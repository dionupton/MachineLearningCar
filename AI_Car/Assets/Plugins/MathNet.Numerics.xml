<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MathNet.Numerics</name>
    </assembly>
    <members>
        <member name="T:MathNet.Numerics.ArrayExtensions">
            <summary>
            Useful extension methods for Arrays.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ArrayExtensions.Copy(System.Double[],System.Double[])">
            <summary>
            Copies the values from on array to another.
            </summary>
            <param name="source">The source array.</param>
            <param name="dest">The destination array.</param>
        </member>
        <member name="M:MathNet.Numerics.ArrayExtensions.Copy(System.Single[],System.Single[])">
            <summary>
            Copies the values from on array to another.
            </summary>
            <param name="source">The source array.</param>
            <param name="dest">The destination array.</param>
        </member>
        <member name="M:MathNet.Numerics.ArrayExtensions.Copy(System.Numerics.Complex[],System.Numerics.Complex[])">
            <summary>
            Copies the values from on array to another.
            </summary>
            <param name="source">The source array.</param>
            <param name="dest">The destination array.</param>
        </member>
        <member name="M:MathNet.Numerics.ArrayExtensions.Copy(MathNet.Numerics.Complex32[],MathNet.Numerics.Complex32[])">
            <summary>
            Copies the values from on array to another.
            </summary>
            <param name="source">The source array.</param>
            <param name="dest">The destination array.</param>
        </member>
        <member name="T:MathNet.Numerics.Combinatorics">
            <summary>
            Enumerative Combinatorics and Counting.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Variations(System.Int32,System.Int32)">
            <summary>
            Count the number of possible variations without repetition.
            The order matters and each object can be chosen only once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen at most once.</param>
            <returns>Maximum number of distinct variations.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.VariationsWithRepetition(System.Int32,System.Int32)">
            <summary>
            Count the number of possible variations with repetition.
            The order matters and each object can be chosen more than once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen 0, 1 or multiple times.</param>
            <returns>Maximum number of distinct variations with repetition.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Combinations(System.Int32,System.Int32)">
            <summary>
            Count the number of possible combinations without repetition.
            The order does not matter and each object can be chosen only once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen at most once.</param>
            <returns>Maximum number of combinations.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.CombinationsWithRepetition(System.Int32,System.Int32)">
            <summary>
            Count the number of possible combinations with repetition.
            The order does not matter and an object can be chosen more than once.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen 0, 1 or multiple times.</param>
            <returns>Maximum number of combinations with repetition.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.Permutations(System.Int32)">
            <summary>
            Count the number of possible permutations (without repetition).
            </summary>
            <param name="n">Number of (distinguishable) elements in the set.</param>
            <returns>Maximum number of permutations without repetition.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.GeneratePermutation(System.Int32,System.Random)">
            <summary>
            Generate a random permutation, without repetition, by generating the index numbers 0 to N-1 and shuffle them randomly.
            Implemented using Fisher-Yates Shuffling.
            </summary>
            <returns>An array of length <c>N</c> that contains (in any order) the integers of the interval <c>[0, N)</c>.</returns>
            <param name="n">Number of (distinguishable) elements in the set.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.SelectPermutationInplace``1(``0[],System.Random)">
            <summary>
            Select a random permutation, without repetition, from a data array by reordering the provided array in-place.
            Implemented using Fisher-Yates Shuffling. The provided data array will be modified.
            </summary>
            <param name="data">The data array to be reordered. The array will be modified by this routine.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.SelectPermutation``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Select a random permutation from a data sequence by returning the provided data in random order.
            Implemented using Fisher-Yates Shuffling.
            </summary>
            <param name="data">The data elements to be reordered.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.GenerateCombination(System.Int32,System.Random)">
            <summary>
            Generate a random combination, without repetition, by randomly selecting some of N elements.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
            <returns>Boolean mask array of length <c>N</c>, for each item true if it is selected.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.GenerateCombination(System.Int32,System.Int32,System.Random)">
            <summary>
            Generate a random combination, without repetition, by randomly selecting k of N elements.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen at most once.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
            <returns>Boolean mask array of length <c>N</c>, for each item true if it is selected.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.SelectCombination``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            Select a random combination, without repetition, from a data sequence by selecting k elements in original order.
            </summary>
            <param name="data">The data source to choose from.</param>
            <param name="elementsToChoose">Number of elements (k) to choose from the data set. Each element is chosen at most once.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
            <returns>The chosen combination, in the original order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.GenerateCombinationWithRepetition(System.Int32,System.Int32,System.Random)">
            <summary>
            Generates a random combination, with repetition, by randomly selecting k of N elements.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Elements can be chosen more than once.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
            <returns>Integer mask array of length <c>N</c>, for each item the number of times it was selected.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.SelectCombinationWithRepetition``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            Select a random combination, with repetition, from a data sequence by selecting k elements in original order.
            </summary>
            <param name="data">The data source to choose from.</param>
            <param name="elementsToChoose">Number of elements (k) to choose from the data set. Elements can be chosen more than once.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
            <returns>The chosen combination with repetition, in the original order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.GenerateVariation(System.Int32,System.Int32,System.Random)">
            <summary>
            Generate a random variation, without repetition, by randomly selecting k of n elements with order.
            Implemented using partial Fisher-Yates Shuffling.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Each element is chosen at most once.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
            <returns>An array of length <c>K</c> that contains the indices of the selections as integers of the interval <c>[0, N)</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.SelectVariation``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            Select a random variation, without repetition, from a data sequence by randomly selecting k elements in random order.
            Implemented using partial Fisher-Yates Shuffling.
            </summary>
            <param name="data">The data source to choose from.</param>
            <param name="elementsToChoose">Number of elements (k) to choose from the set. Each element is chosen at most once.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
            <returns>The chosen variation, in random order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.GenerateVariationWithRepetition(System.Int32,System.Int32,System.Random)">
            <summary>
            Generate a random variation, with repetition, by randomly selecting k of n elements with order.
            </summary>
            <param name="n">Number of elements in the set.</param>
            <param name="k">Number of elements to choose from the set. Elements can be chosen more than once.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
            <returns>An array of length <c>K</c> that contains the indices of the selections as integers of the interval <c>[0, N)</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Combinatorics.SelectVariationWithRepetition``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            Select a random variation, with repetition, from a data sequence by randomly selecting k elements in random order.
            </summary>
            <param name="data">The data source to choose from.</param>
            <param name="elementsToChoose">Number of elements (k) to choose from the data set. Elements can be chosen more than once.</param>
            <param name="randomSource">The random number generator to use. Optional; the default random source will be used if null.</param>
            <returns>The chosen variation with repetition, in random order.</returns>
        </member>
        <member name="T:MathNet.Numerics.Complex32">
            <summary>
            32-bit single precision complex numbers class.
            </summary>
            <remarks>
            <para>
            The class <c>Complex32</c> provides all elementary operations
            on complex numbers. All the operators <c>+</c>, <c>-</c>,
            <c>*</c>, <c>/</c>, <c>==</c>, <c>!=</c> are defined in the
            canonical way. Additional complex trigonometric functions
            are also provided. Note that the <c>Complex32</c> structures
            has two special constant values <see cref="F:MathNet.Numerics.Complex32.NaN"/> and
            <see cref="F:MathNet.Numerics.Complex32.PositiveInfinity"/>.
            </para>
            <para>
            <code>
            Complex32 x = new Complex32(1f,2f);
            Complex32 y = Complex32.FromPolarCoordinates(1f, Math.Pi);
            Complex32 z = (x + y) / (x - y);
            </code>
            </para>
            <para>
            For mathematical details about complex numbers, please
            have a look at the <a href="http://en.wikipedia.org/wiki/Complex_number">
            Wikipedia</a>
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Complex32._real">
            <summary>
            The real component of the complex number.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32._imag">
            <summary>
            The imaginary component of the complex number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex32.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Complex32 structure with the given real
            and imaginary parts.
            </summary>
            <param name="real">The value for the real component.</param>
            <param name="imaginary">The value for the imaginary component.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.FromPolarCoordinates(System.Single,System.Single)">
            <summary>
            Creates a complex number from a point's polar coordinates.
            </summary>
            <returns>A complex number.</returns>
            <param name="magnitude">The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</param>
            <param name="phase">The phase, which is the angle from the line to the horizontal axis, measured in radians.</param>
        </member>
        <member name="F:MathNet.Numerics.Complex32.Zero">
            <summary>
            Returns a new <see cref="T:MathNet.Numerics.Complex32" /> instance
            with a real number equal to zero and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32.One">
            <summary>
            Returns a new <see cref="T:MathNet.Numerics.Complex32" /> instance
            with a real number equal to one and an imaginary number equal to zero.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32.ImaginaryOne">
            <summary>
            Returns a new <see cref="T:MathNet.Numerics.Complex32" /> instance
            with a real number equal to zero and an imaginary number equal to one.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32.PositiveInfinity">
            <summary>
            Returns a new <see cref="T:MathNet.Numerics.Complex32" /> instance
            with real and imaginary numbers positive infinite.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Complex32.NaN">
            <summary>
            Returns a new <see cref="T:MathNet.Numerics.Complex32" /> instance
            with real and imaginary numbers not a number.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Real">
            <summary>
            Gets the real component of the complex number.
            </summary>
            <value>The real component of the complex number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Imaginary">
            <summary>
            Gets the real imaginary component of the complex number.
            </summary>
            <value>The real imaginary component of the complex number.</value>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Phase">
            <summary>
            Gets the phase or argument of this <c>Complex32</c>.
            </summary>
            <remarks>
            Phase always returns a value bigger than negative Pi and
            smaller or equal to Pi. If this <c>Complex32</c> is zero, the Complex32
            is assumed to be positive real with an argument of zero.
            </remarks>
            <returns>The phase or argument of this <c>Complex32</c></returns>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Magnitude">
            <summary>
            Gets the magnitude (or absolute value) of a complex number.
            </summary>
            <remarks>Assuming that magnitude of (inf,a) and (a,inf) and (inf,inf) is inf and (NaN,a), (a,NaN) and (NaN,NaN) is NaN</remarks>
            <returns>The magnitude of the current instance.</returns>
        </member>
        <member name="P:MathNet.Numerics.Complex32.MagnitudeSquared">
            <summary>
            Gets the squared magnitude (or squared absolute value) of a complex number.
            </summary>
            <returns>The squared magnitude of the current instance.</returns>
        </member>
        <member name="P:MathNet.Numerics.Complex32.Sign">
            <summary>
            Gets the unity of this complex (same argument, but on the unit circle; exp(I*arg))
            </summary>
            <returns>The unity of this <c>Complex32</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsZero">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is zero.
            </summary>
            <returns><c>true</c> if this instance is zero; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsOne">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is one.
            </summary>
            <returns><c>true</c> if this instance is one; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsImaginaryOne">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is the imaginary unit.
            </summary>
            <returns><c>true</c> if this instance is ImaginaryOne; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsNaN">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c>evaluates
            to a value that is not a number.
            </summary>
            <returns>
            <c>true</c> if this instance is <see cref="F:MathNet.Numerics.Complex32.NaN"/>; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsInfinity">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> evaluates to an
            infinite value.
            </summary>
            <returns>
                <c>true</c> if this instance is infinite; otherwise, <c>false</c>.
            </returns>
            <remarks>
            True if it either evaluates to a complex infinity
            or to a directed infinity.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsReal">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> is real.
            </summary>
            <returns><c>true</c> if this instance is a real number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.IsRealNonNegative">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> is real and not negative, that is &gt;= 0.
            </summary>
            <returns>
                <c>true</c> if this instance is real nonnegative number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Exponential">
            <summary>
            Exponential of this <c>Complex32</c> (exp(x), E^x).
            </summary>
            <returns>
            The exponential of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.NaturalLogarithm">
            <summary>
            Natural Logarithm of this <c>Complex32</c> (Base E).
            </summary>
            <returns>The natural logarithm of this complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.CommonLogarithm">
            <summary>
            Common Logarithm of this <c>Complex32</c> (Base 10).
            </summary>
            <returns>The common logarithm of this complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Logarithm(System.Single)">
            <summary>
            Logarithm of this <c>Complex32</c> with custom base.
            </summary>
            <returns>The logarithm of this complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Power(MathNet.Numerics.Complex32)">
            <summary>
            Raise this <c>Complex32</c> to the given value.
            </summary>
            <param name="exponent">
            The exponent.
            </param>
            <returns>
            The complex number raised to the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Root(MathNet.Numerics.Complex32)">
            <summary>
            Raise this <c>Complex32</c> to the inverse of the given value.
            </summary>
            <param name="rootExponent">
            The root exponent.
            </param>
            <returns>
            The complex raised to the inverse of the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Square">
            <summary>
            The Square (power 2) of this <c>Complex32</c>
            </summary>
            <returns>
            The square of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.SquareRoot">
            <summary>
            The Square Root (power 1/2) of this <c>Complex32</c>
            </summary>
            <returns>
            The square root of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.SquareRoots">
            <summary>
            Evaluate all square roots of this <c>Complex32</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex32.CubicRoots">
            <summary>
            Evaluate all cubic roots of this <c>Complex32</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Equality(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Equality test.
            </summary>
            <param name="complex1">One of complex numbers to compare.</param>
            <param name="complex2">The other complex numbers to compare.</param>
            <returns><c>true</c> if the real and imaginary components of the two complex numbers are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Inequality(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Inequality test.
            </summary>
            <param name="complex1">One of complex numbers to compare.</param>
            <param name="complex2">The other complex numbers to compare.</param>
            <returns><c>true</c> if the real or imaginary components of the two complex numbers are not equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_UnaryPlus(MathNet.Numerics.Complex32)">
            <summary>
            Unary addition.
            </summary>
            <param name="summand">The complex number to operate on.</param>
            <returns>Returns the same complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_UnaryNegation(MathNet.Numerics.Complex32)">
            <summary>
            Unary minus.
            </summary>
            <param name="subtrahend">The complex number to operate on.</param>
            <returns>The negated value of the <paramref name="subtrahend"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Addition(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Addition operator. Adds two complex numbers together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">One of the complex numbers to add.</param>
            <param name="summand2">The other complex numbers to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Subtraction(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Subtraction operator. Subtracts two complex numbers.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The complex number to subtract from.</param>
            <param name="subtrahend">The complex number to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Addition(MathNet.Numerics.Complex32,System.Single)">
            <summary>Addition operator. Adds a complex number and float together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">The complex numbers to add.</param>
            <param name="summand2">The float value to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Subtraction(MathNet.Numerics.Complex32,System.Single)">
            <summary>Subtraction operator. Subtracts float value from a complex value.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The complex number to subtract from.</param>
            <param name="subtrahend">The float value to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Addition(System.Single,MathNet.Numerics.Complex32)">
            <summary>Addition operator. Adds a complex number and float together.</summary>
            <returns>The result of the addition.</returns>
            <param name="summand1">The float value to add.</param>
            <param name="summand2">The complex numbers to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Subtraction(System.Single,MathNet.Numerics.Complex32)">
            <summary>Subtraction operator. Subtracts complex value from a float value.</summary>
            <returns>The result of the subtraction.</returns>
            <param name="minuend">The float vale to subtract from.</param>
            <param name="subtrahend">The complex value to subtract.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Multiply(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Multiplication operator. Multiplies two complex numbers.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">One of the complex numbers to multiply.</param>
            <param name="multiplier">The other complex number to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Multiply(System.Single,MathNet.Numerics.Complex32)">
            <summary>Multiplication operator. Multiplies a complex number with a float value.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">The float value to multiply.</param>
            <param name="multiplier">The complex number to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Multiply(MathNet.Numerics.Complex32,System.Single)">
            <summary>Multiplication operator. Multiplies a complex number with a float value.</summary>
            <returns>The result of the multiplication.</returns>
            <param name="multiplicand">The complex number to multiply.</param>
            <param name="multiplier">The float value to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Division(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>Division operator. Divides a complex number by another.</summary>
            <remarks>Enhanced Smith's algorithm for dividing two complex numbers </remarks>
            <see cref="M:MathNet.Numerics.Complex32.InternalDiv(System.Single,System.Single,System.Single,System.Single,System.Boolean)"/>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.InternalDiv(System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
             Helper method for dividing.
            </summary>
            <param name="a">Re first</param>
            <param name="b">Im first</param>
            <param name="c">Re second</param>
            <param name="d">Im second</param>
            <param name="swapped"></param>
            <returns></returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Division(System.Single,MathNet.Numerics.Complex32)">
            <summary>Division operator. Divides a float value by a complex number.</summary>
            <remarks>Algorithm based on Smith's algorithm</remarks>
            <see cref="M:MathNet.Numerics.Complex32.InternalDiv(System.Single,System.Single,System.Single,System.Single,System.Boolean)"/>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Division(MathNet.Numerics.Complex32,System.Single)">
            <summary>Division operator. Divides a complex number by a float value.</summary>
            <returns>The result of the division.</returns>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Conjugate">
            <summary>
            Computes the conjugate of a complex number and returns the result.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Reciprocal">
            <summary>
            Returns the multiplicative inverse of a complex number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString">
            <summary>
            Converts the value of the current complex number to its equivalent string representation in Cartesian form.
            </summary>
            <returns>The string representation of the current instance in Cartesian form.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString(System.String)">
            <summary>
            Converts the value of the current complex number to its equivalent string representation
            in Cartesian form by using the specified format for its real and imaginary parts.
            </summary>
            <returns>The string representation of the current instance in Cartesian form.</returns>
            <param name="format">A standard or custom numeric format string.</param>
            <exception cref="T:System.FormatException">
              <paramref name="format" /> is not a valid format string.</exception>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString(System.IFormatProvider)">
            <summary>
            Converts the value of the current complex number to its equivalent string representation
            in Cartesian form by using the specified culture-specific formatting information.
            </summary>
            <returns>The string representation of the current instance in Cartesian form, as specified by <paramref name="provider" />.</returns>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToString(System.String,System.IFormatProvider)">
            <summary>Converts the value of the current complex number to its equivalent string representation
            in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</summary>
            <returns>The string representation of the current instance in Cartesian form, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
            <param name="format">A standard or custom numeric format string.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <exception cref="T:System.FormatException">
              <paramref name="format" /> is not a valid format string.</exception>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Equals(MathNet.Numerics.Complex32)">
            <summary>
            Checks if two complex numbers are equal. Two complex numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns <c>true</c> if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, <c>false</c> otherwise.
            </returns>
            <param name="other">
            The complex number to compare to with.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.GetHashCode">
            <summary>
            The hash code for the complex number.
            </summary>
            <returns>
            The hash code of the complex number.
            </returns>
            <remarks>
            The hash code is calculated as
            System.Math.Exp(ComplexMath.Absolute(complexNumber)).
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Equals(System.Object)">
            <summary>
            Checks if two complex numbers are equal. Two complex numbers are equal if their
            corresponding real and imaginary components are equal.
            </summary>
            <returns>
            Returns <c>true</c> if the two objects are the same object, or if their corresponding
            real and imaginary components are equal, <c>false</c> otherwise.
            </returns>
            <param name="obj">
            The complex number to compare to with.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a complex number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a float.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ParsePart(System.Collections.Generic.LinkedListNode{System.String}@,System.Boolean@,System.IFormatProvider)">
            <summary>
            Parse a part (real or complex) from a complex number.
            </summary>
            <param name="token">Start Token.</param>
            <param name="imaginary">Is set to <c>true</c> if the part identified itself as being imaginary.</param>
            <param name="format">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>Resulting part as float.</returns>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:MathNet.Numerics.Complex32.TryParse(System.String,MathNet.Numerics.Complex32@)">
            <summary>
            Converts the string representation of a complex number to a single-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.Complex32@)">
            <summary>
            Converts the string representation of a complex number to single-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Explicit(System.Decimal)~MathNet.Numerics.Complex32">
            <summary>
            Explicit conversion of a real decimal to a <c>Complex32</c>.
            </summary>
            <param name="value">The decimal value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Explicit(System.Numerics.Complex)~MathNet.Numerics.Complex32">
            <summary>
            Explicit conversion of a <c>Complex</c> to a <c>Complex32</c>.
            </summary>
            <param name="value">The decimal value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Byte)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real byte to a <c>Complex32</c>.
            </summary>
            <param name="value">The byte value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Int16)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real short to a <c>Complex32</c>.
            </summary>
            <param name="value">The short value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.SByte)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a signed byte to a <c>Complex32</c>.
            </summary>
            <param name="value">The signed byte value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.UInt16)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a unsigned real short to a <c>Complex32</c>.
            </summary>
            <param name="value">The unsigned short value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Int32)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real int to a <c>Complex32</c>.
            </summary>
            <param name="value">The int value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Numerics.BigInteger)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a BigInteger int to a <c>Complex32</c>.
            </summary>
            <param name="value">The BigInteger value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Int64)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real long to a <c>Complex32</c>.
            </summary>
            <param name="value">The long value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.UInt32)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real uint to a <c>Complex32</c>.
            </summary>
            <param name="value">The uint value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.UInt64)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real ulong to a <c>Complex32</c>.
            </summary>
            <param name="value">The ulong value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Implicit(System.Single)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real float to a <c>Complex32</c>.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.op_Explicit(System.Double)~MathNet.Numerics.Complex32">
            <summary>
            Implicit conversion of a real double to a <c>Complex32</c>.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.ToComplex">
            <summary>
            Converts this <c>Complex32</c> to a <see cref="T:System.Numerics.Complex"/>.
            </summary>
            <returns>A <see cref="T:System.Numerics.Complex"/> with the same values as this <c>Complex32</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Negate(MathNet.Numerics.Complex32)">
            <summary>
            Returns the additive inverse of a specified complex number.
            </summary>
            <returns>The result of the real and imaginary components of the value parameter multiplied by -1.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Conjugate(MathNet.Numerics.Complex32)">
            <summary>
            Computes the conjugate of a complex number and returns the result.
            </summary>
            <returns>The conjugate of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Add(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Adds two complex numbers and returns the result.
            </summary>
            <returns>The sum of <paramref name="left" /> and <paramref name="right" />.</returns>
            <param name="left">The first complex number to add.</param>
            <param name="right">The second complex number to add.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Subtract(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Subtracts one complex number from another and returns the result.
            </summary>
            <returns>The result of subtracting <paramref name="right" /> from <paramref name="left" />.</returns>
            <param name="left">The value to subtract from (the minuend).</param>
            <param name="right">The value to subtract (the subtrahend).</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Multiply(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Returns the product of two complex numbers.
            </summary>
            <returns>The product of the <paramref name="left" /> and <paramref name="right" /> parameters.</returns>
            <param name="left">The first complex number to multiply.</param>
            <param name="right">The second complex number to multiply.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Divide(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Divides one complex number by another and returns the result.
            </summary>
            <returns>The quotient of the division.</returns>
            <param name="dividend">The complex number to be divided.</param>
            <param name="divisor">The complex number to divide by.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Reciprocal(MathNet.Numerics.Complex32)">
            <summary>
            Returns the multiplicative inverse of a complex number.
            </summary>
            <returns>The reciprocal of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Sqrt(MathNet.Numerics.Complex32)">
            <summary>
            Returns the square root of a specified complex number.
            </summary>
            <returns>The square root of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Abs(MathNet.Numerics.Complex32)">
            <summary>
            Gets the absolute value (or magnitude) of a complex number.
            </summary>
            <returns>The absolute value of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Exp(MathNet.Numerics.Complex32)">
            <summary>
            Returns e raised to the power specified by a complex number.
            </summary>
            <returns>The number e raised to the power <paramref name="value" />.</returns>
            <param name="value">A complex number that specifies a power.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Pow(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Returns a specified complex number raised to a power specified by a complex number.
            </summary>
            <returns>The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</returns>
            <param name="value">A complex number to be raised to a power.</param>
            <param name="power">A complex number that specifies a power.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Pow(MathNet.Numerics.Complex32,System.Single)">
            <summary>
            Returns a specified complex number raised to a power specified by a single-precision floating-point number.
            </summary>
            <returns>The complex number <paramref name="value" /> raised to the power <paramref name="power" />.</returns>
            <param name="value">A complex number to be raised to a power.</param>
            <param name="power">A single-precision floating-point number that specifies a power.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Log(MathNet.Numerics.Complex32)">
            <summary>
            Returns the natural (base e) logarithm of a specified complex number.
            </summary>
            <returns>The natural (base e) logarithm of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Log(MathNet.Numerics.Complex32,System.Single)">
            <summary>
            Returns the logarithm of a specified complex number in a specified base.
            </summary>
            <returns>The logarithm of <paramref name="value" /> in base <paramref name="baseValue" />.</returns>
            <param name="value">A complex number.</param>
            <param name="baseValue">The base of the logarithm.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Log10(MathNet.Numerics.Complex32)">
            <summary>
            Returns the base-10 logarithm of a specified complex number.
            </summary>
            <returns>The base-10 logarithm of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Sin(MathNet.Numerics.Complex32)">
            <summary>
            Returns the sine of the specified complex number.
            </summary>
            <returns>The sine of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Cos(MathNet.Numerics.Complex32)">
            <summary>
            Returns the cosine of the specified complex number.
            </summary>
            <returns>The cosine of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Tan(MathNet.Numerics.Complex32)">
            <summary>
            Returns the tangent of the specified complex number.
            </summary>
            <returns>The tangent of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Asin(MathNet.Numerics.Complex32)">
            <summary>
            Returns the angle that is the arc sine of the specified complex number.
            </summary>
            <returns>The angle which is the arc sine of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Acos(MathNet.Numerics.Complex32)">
            <summary>
            Returns the angle that is the arc cosine of the specified complex number.
            </summary>
            <returns>The angle, measured in radians, which is the arc cosine of <paramref name="value" />.</returns>
            <param name="value">A complex number that represents a cosine.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Atan(MathNet.Numerics.Complex32)">
            <summary>
            Returns the angle that is the arc tangent of the specified complex number.
            </summary>
            <returns>The angle that is the arc tangent of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Sinh(MathNet.Numerics.Complex32)">
            <summary>
            Returns the hyperbolic sine of the specified complex number.
            </summary>
            <returns>The hyperbolic sine of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Cosh(MathNet.Numerics.Complex32)">
            <summary>
            Returns the hyperbolic cosine of the specified complex number.
            </summary>
            <returns>The hyperbolic cosine of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="M:MathNet.Numerics.Complex32.Tanh(MathNet.Numerics.Complex32)">
            <summary>
            Returns the hyperbolic tangent of the specified complex number.
            </summary>
            <returns>The hyperbolic tangent of <paramref name="value" />.</returns>
            <param name="value">A complex number.</param>
        </member>
        <member name="T:MathNet.Numerics.ComplexExtensions">
            <summary>
            Extension methods for the Complex type provided by System.Numerics
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.MagnitudeSquared(MathNet.Numerics.Complex32)">
            <summary>
            Gets the squared magnitude of the <c>Complex</c> number.
            </summary>
            <param name="complex">The <see cref="T:MathNet.Numerics.Complex32"/> number to perform this operation on.</param>
            <returns>The squared magnitude of the <c>Complex</c> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.MagnitudeSquared(System.Numerics.Complex)">
            <summary>
            Gets the squared magnitude of the <c>Complex</c> number.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <returns>The squared magnitude of the <c>Complex</c> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Sign(System.Numerics.Complex)">
            <summary>
            Gets the unity of this complex (same argument, but on the unit circle; exp(I*arg))
            </summary>
            <returns>The unity of this <c>Complex</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Conjugate(System.Numerics.Complex)">
            <summary>
            Gets the conjugate of the <c>Complex</c> number.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <remarks>
            The semantic of <i>setting the conjugate</i> is such that
            <code>
            // a, b of type Complex32
            a.Conjugate = b;
            </code>
            is equivalent to
            <code>
            // a, b of type Complex32
            a = b.Conjugate
            </code>
            </remarks>
            <returns>The conjugate of the <see cref="T:System.Numerics.Complex"/> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Reciprocal(System.Numerics.Complex)">
            <summary>
            Returns the multiplicative inverse of a complex number.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Exp(System.Numerics.Complex)">
            <summary>
            Exponential of this <c>Complex</c> (exp(x), E^x).
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <returns>
            The exponential of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Ln(System.Numerics.Complex)">
            <summary>
            Natural Logarithm of this <c>Complex</c> (Base E).
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <returns>
            The natural logarithm of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Log10(System.Numerics.Complex)">
            <summary>
            Common Logarithm of this <c>Complex</c> (Base 10).
            </summary>
            <returns>The common logarithm of this complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Log(System.Numerics.Complex,System.Double)">
            <summary>
            Logarithm of this <c>Complex</c> with custom base.
            </summary>
            <returns>The logarithm of this complex number.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Power(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Raise this <c>Complex</c> to the given value.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <param name="exponent">
            The exponent.
            </param>
            <returns>
            The complex number raised to the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Root(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Raise this <c>Complex</c> to the inverse of the given value.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <param name="rootExponent">
            The root exponent.
            </param>
            <returns>
            The complex raised to the inverse of the given exponent.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Square(System.Numerics.Complex)">
            <summary>
            The Square (power 2) of this <c>Complex</c>
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <returns>
            The square of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.SquareRoot(System.Numerics.Complex)">
            <summary>
            The Square Root (power 1/2) of this <c>Complex</c>
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <returns>
            The square root of this complex number.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.SquareRoots(System.Numerics.Complex)">
            <summary>
            Evaluate all square roots of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.CubicRoots(System.Numerics.Complex)">
            <summary>
            Evaluate all cubic roots of this <c>Complex</c>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsZero(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is zero.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <returns><c>true</c> if this instance is zero; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsOne(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is one.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <returns><c>true</c> if this instance is one; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsImaginaryOne(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the <c>Complex32</c> is the imaginary unit.
            </summary>
            <returns><c>true</c> if this instance is ImaginaryOne; otherwise, <c>false</c>.</returns>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsNaN(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c>evaluates
            to a value that is not a number.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <returns>
            <c>true</c> if this instance is <c>NaN</c>; otherwise,
            <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsInfinity(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> evaluates to an
            infinite value.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <returns>
                <c>true</c> if this instance is infinite; otherwise, <c>false</c>.
            </returns>
            <remarks>
            True if it either evaluates to a complex infinity
            or to a directed infinity.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsReal(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> is real.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <returns><c>true</c> if this instance is a real number; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.IsRealNonNegative(System.Numerics.Complex)">
            <summary>
            Gets a value indicating whether the provided <c>Complex32</c> is real and not negative, that is &gt;= 0.
            </summary>
            <param name="complex">The <see cref="T:System.Numerics.Complex"/> number to perform this operation on.</param>
            <returns>
                <c>true</c> if this instance is real nonnegative number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Norm(System.Numerics.Complex)">
            <summary>
            Returns a Norm of a value of this type, which is appropriate for measuring how
            close this value is to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.Norm(MathNet.Numerics.Complex32)">
            <summary>
            Returns a Norm of a value of this type, which is appropriate for measuring how
            close this value is to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.NormOfDifference(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Returns a Norm of the difference of two values of this type, which is
            appropriate for measuring how close together these two values are.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.NormOfDifference(MathNet.Numerics.Complex32,MathNet.Numerics.Complex32)">
            <summary>
            Returns a Norm of the difference of two values of this type, which is
            appropriate for measuring how close together these two values are.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.ToComplex(System.String)">
            <summary>
            Creates a complex number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a double.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            The string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.ToComplex(System.String,System.IFormatProvider)">
            <summary>
            Creates a complex number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a double.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.ParsePart(System.Collections.Generic.LinkedListNode{System.String}@,System.Boolean@,System.IFormatProvider)">
            <summary>
            Parse a part (real or complex) from a complex number.
            </summary>
            <param name="token">Start Token.</param>
            <param name="imaginary">Is set to <c>true</c> if the part identified itself as being imaginary.</param>
            <param name="format">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>Resulting part as double.</returns>
            <exception cref="T:System.FormatException"/>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.TryToComplex(System.String,System.Numerics.Complex@)">
            <summary>
            Converts the string representation of a complex number to a double-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain Complex.Zero.  This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.TryToComplex(System.String,System.IFormatProvider,System.Numerics.Complex@)">
            <summary>
            Converts the string representation of a complex number to double-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.ToComplex32(System.String)">
            <summary>
            Creates a <c>Complex32</c> number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a double.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.ToComplex32(System.String,System.IFormatProvider)">
            <summary>
            Creates a <c>Complex32</c> number based on a string. The string can be in the
            following formats (without the quotes): 'n', 'ni', 'n +/- ni',
            'ni +/- n', 'n,n', 'n,ni,' '(n,n)', or '(n,ni)', where n is a double.
            </summary>
            <returns>
            A complex number containing the value specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.TryToComplex32(System.String,MathNet.Numerics.Complex32@)">
            <summary>
            Converts the string representation of a complex number to a single-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain complex32.Zero.  This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.ComplexExtensions.TryToComplex32(System.String,System.IFormatProvider,MathNet.Numerics.Complex32@)">
            <summary>
            Converts the string representation of a complex number to single-precision complex number equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex number to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will contain Complex.Zero.  This parameter is passed uninitialized.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.Constants">
            <summary>
            A collection of frequently used mathematical constants.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.E">
            <summary>The number e</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Log2E">
            <summary>The number log[2](e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Log10E">
            <summary>The number log[10](e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Ln2">
            <summary>The number log[e](2)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Ln10">
            <summary>The number log[e](10)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LnPi">
            <summary>The number log[e](pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Ln2PiOver2">
            <summary>The number log[e](2*pi)/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvE">
            <summary>The number 1/e</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SqrtE">
            <summary>The number sqrt(e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt2">
            <summary>The number sqrt(2)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt3">
            <summary>The number sqrt(3)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt1Over2">
            <summary>The number sqrt(1/2) = 1/sqrt(2) = sqrt(2)/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HalfSqrt3">
            <summary>The number sqrt(3)/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pi">
            <summary>The number pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pi2">
            <summary>The number pi*2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PiOver2">
            <summary>The number pi/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pi3Over2">
            <summary>The number pi*3/2</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PiOver4">
            <summary>The number pi/4</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SqrtPi">
            <summary>The number sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt2Pi">
            <summary>The number sqrt(2pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Sqrt2PiE">
            <summary>The number sqrt(2*pi*e)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LogSqrt2Pi">
            <summary>The number log(sqrt(2*pi))</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LogSqrt2PiE">
            <summary>The number log(sqrt(2*pi*e))</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.LogTwoSqrtEOverPi">
            <summary>The number log(2 * sqrt(e / pi))</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvPi">
            <summary>The number 1/pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TwoInvPi">
            <summary>The number 2/pi</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvSqrtPi">
            <summary>The number 1/sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.InvSqrt2Pi">
            <summary>The number 1/sqrt(2pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TwoInvSqrtPi">
            <summary>The number 2/sqrt(pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TwoSqrtEOverPi">
            <summary>The number 2 * sqrt(e / pi)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Degree">
            <summary>The number (pi)/180 - factor to convert from Degree (deg) to Radians (rad).</summary>
            <seealso cref="M:MathNet.Numerics.Trig.DegreeToRadian(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Trig.RadianToDegree(System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Constants.Grad">
            <summary>The number (pi)/200 - factor to convert from NewGrad (grad) to Radians (rad).</summary>
            <seealso cref="M:MathNet.Numerics.Trig.GradToRadian(System.Double)"/>
            <seealso cref="M:MathNet.Numerics.Trig.RadianToGrad(System.Double)"/>
        </member>
        <member name="F:MathNet.Numerics.Constants.PowerDecibel">
            <summary>The number ln(10)/20 - factor to convert from Power Decibel (dB) to Neper (Np). Use this version when the Decibel represent a power gain but the compared values are not powers (e.g. amplitude, current, voltage).</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutralDecibel">
            <summary>The number ln(10)/10 - factor to convert from Neutral Decibel (dB) to Neper (Np). Use this version when either both or neither of the Decibel and the compared values represent powers.</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Catalan">
            <summary>The Catalan constant</summary>
            <remarks>Sum(k=0 -> inf){ (-1)^k/(2*k + 1)2 }</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.EulerMascheroni">
            <summary>The Euler-Mascheroni constant</summary>
            <remarks>lim(n -> inf){ Sum(k=1 -> n) { 1/k - log(n) } }</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.GoldenRatio">
            <summary>The number (1+sqrt(5))/2, also known as the golden ratio</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Glaisher">
            <summary>The Glaisher constant</summary>
            <remarks>e^(1/12 - Zeta(-1))</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.Khinchin">
            <summary>The Khinchin constant</summary>
            <remarks>prod(k=1 -> inf){1+1/(k*(k+2))^log(k,2)}</remarks>
        </member>
        <member name="F:MathNet.Numerics.Constants.SizeOfDouble">
            <summary>
            The size of a double in bytes.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SizeOfInt">
            <summary>
            The size of an int in bytes.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SizeOfFloat">
            <summary>
            The size of a float in bytes.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SizeOfComplex">
            <summary>
            The size of a Complex in bytes.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SizeOfComplex32">
            <summary>
            The size of a Complex in bytes.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.SpeedOfLight">
            <summary>Speed of Light in Vacuum: c_0 = 2.99792458e8 [m s^-1] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MagneticPermeability">
            <summary>Magnetic Permeability in Vacuum: mu_0 = 4*Pi * 10^-7 [N A^-2 = kg m A^-2 s^-2] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectricPermittivity">
            <summary>Electric Permittivity in Vacuum: epsilon_0 = 1/(mu_0*c_0^2) [F m^-1 = A^2 s^4 kg^-1 m^-3] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.CharacteristicImpedanceVacuum">
            <summary>Characteristic Impedance of Vacuum: Z_0 = mu_0*c_0 [Ohm = m^2 kg s^-3 A^-2] (defined, exact; 2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.GravitationalConstant">
            <summary>Newtonian Constant of Gravitation: G = 6.67429e-11 [m^3 kg^-1 s^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksConstant">
            <summary>Planck's constant: h = 6.62606896e-34 [J s = m^2 kg s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DiracsConstant">
            <summary>Reduced Planck's constant: h_bar = h / (2*Pi) [J s = m^2 kg s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksMass">
            <summary>Planck mass: m_p = (h_bar*c_0/G)^(1/2) [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksTemperature">
            <summary>Planck temperature: T_p = (h_bar*c_0^5/G)^(1/2)/k [K] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksLength">
            <summary>Planck length: l_p = h_bar/(m_p*c_0) [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.PlancksTime">
            <summary>Planck time: t_p = l_p/c_0 [s] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElementaryCharge">
            <summary>Elementary Electron Charge: e = 1.602176487e-19 [C = A s] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MagneticFluxQuantum">
            <summary>Magnetic Flux Quantum: theta_0 = h/(2*e) [Wb = m^2 kg s^-2 A^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ConductanceQuantum">
            <summary>Conductance Quantum: G_0 = 2*e^2/h [S = m^-2 kg^-1 s^3 A^2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.JosephsonConstant">
            <summary>Josephson Constant: K_J = 2*e/h [Hz V^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.VonKlitzingConstant">
            <summary>Von Klitzing Constant: R_K = h/e^2 [Ohm = m^2 kg s^-3 A^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.BohrMagneton">
            <summary>Bohr Magneton: mu_B = e*h_bar/2*m_e [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NuclearMagneton">
            <summary>Nuclear Magneton: mu_N = e*h_bar/2*m_p [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.FineStructureConstant">
            <summary>Fine Structure Constant: alpha = e^2/4*Pi*e_0*h_bar*c_0 [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.RydbergConstant">
            <summary>Rydberg Constant: R_infty = alpha^2*m_e*c_0/2*h [m^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.BohrRadius">
            <summary>Bor Radius: a_0 = alpha/4*Pi*R_infty [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HartreeEnergy">
            <summary>Hartree Energy: E_h = 2*R_infty*h*c_0 [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.QuantumOfCirculation">
            <summary>Quantum of Circulation: h/2*m_e [m^2 s^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.FermiCouplingConstant">
            <summary>Fermi Coupling Constant: G_F/(h_bar*c_0)^3 [GeV^-2] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.WeakMixingAngle">
            <summary>Weak Mixin Angle: sin^2(theta_W) [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMass">
            <summary>Electron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMassEnergyEquivalent">
            <summary>Electron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMolarMass">
            <summary>Electron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ComptonWavelength">
            <summary>Electron Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ClassicalElectronRadius">
            <summary>Classical Electron Radius: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ThomsonCrossSection">
            <summary>Thomson Cross Section: [m^2] (2002 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronMagneticMoment">
            <summary>Electron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ElectronGFactor">
            <summary>Electon G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMass">
            <summary>Muon Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMassEnegryEquivalent">
            <summary>Muon Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMolarMass">
            <summary>Muon Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonComptonWavelength">
            <summary>Muon Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonMagneticMoment">
            <summary>Muon Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.MuonGFactor">
            <summary>Muon G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauMass">
            <summary>Tau Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauMassEnergyEquivalent">
            <summary>Tau Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauMolarMass">
            <summary>Tau Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.TauComptonWavelength">
            <summary>Tau Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMass">
            <summary>Proton Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMassEnergyEquivalent">
            <summary>Proton Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMolarMass">
            <summary>Proton Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonComptonWavelength">
            <summary>Proton Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonMagneticMoment">
            <summary>Proton Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonGFactor">
            <summary>Proton G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ShieldedProtonMagneticMoment">
            <summary>Proton Shielded Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ProtonGyromagneticRatio">
            <summary>Proton Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.ShieldedProtonGyromagneticRatio">
            <summary>Proton Shielded Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMass">
            <summary>Neutron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMassEnegryEquivalent">
            <summary>Neutron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMolarMass">
            <summary>Neutron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronComptonWavelength">
            <summary>Neuron Compton Wavelength: [m] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronMagneticMoment">
            <summary>Neutron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronGFactor">
            <summary>Neutron G-Factor: [1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.NeutronGyromagneticRatio">
            <summary>Neutron Gyro-Magnetic Ratio: [s^-1 T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMass">
            <summary>Deuteron Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMassEnegryEquivalent">
            <summary>Deuteron Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMolarMass">
            <summary>Deuteron Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.DeuteronMagneticMoment">
            <summary>Deuteron Magnetic Moment: [J T^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HelionMass">
            <summary>Helion Mass: [kg] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HelionMassEnegryEquivalent">
            <summary>Helion Mass Energy Equivalent: [J] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.HelionMolarMass">
            <summary>Helion Molar Mass: [kg mol^-1] (2007 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Avogadro">
            <summary>Avogadro constant: [mol^-1] (2010 CODATA)</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Yotta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Zetta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Exa">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Peta">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Tera">
            <summary>The SI prefix factor corresponding to 1 000 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Giga">
            <summary>The SI prefix factor corresponding to 1 000 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Mega">
            <summary>The SI prefix factor corresponding to 1 000 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Kilo">
            <summary>The SI prefix factor corresponding to 1 000</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Hecto">
            <summary>The SI prefix factor corresponding to 100</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Deca">
            <summary>The SI prefix factor corresponding to 10</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Deci">
            <summary>The SI prefix factor corresponding to 0.1</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Centi">
            <summary>The SI prefix factor corresponding to 0.01</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Milli">
            <summary>The SI prefix factor corresponding to 0.001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Micro">
            <summary>The SI prefix factor corresponding to 0.000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Nano">
            <summary>The SI prefix factor corresponding to 0.000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Pico">
            <summary>The SI prefix factor corresponding to 0.000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Femto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Atto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Zepto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 000 001</summary>
        </member>
        <member name="F:MathNet.Numerics.Constants.Yocto">
            <summary>The SI prefix factor corresponding to 0.000 000 000 000 000 000 000 001</summary>
        </member>
        <member name="T:MathNet.Numerics.Control">
            <summary>
            Sets parameters for the library.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Control.UseDefaultProviders">
            <summary>
            Use a specific provider if configured, e.g. using
            environment variables, or fall back to the best providers.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Control.UseBestProviders">
            <summary>
            Use the best provider available.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Control.UseNativeMKL">
            <summary>
            Use the Intel MKL native provider for linear algebra.
            Throws if it is not available or failed to initialize, in which case the previous provider is still active.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Control.UseNativeMKL(MathNet.Numerics.Providers.Common.Mkl.MklConsistency,MathNet.Numerics.Providers.Common.Mkl.MklPrecision,MathNet.Numerics.Providers.Common.Mkl.MklAccuracy)">
            <summary>
            Use the Intel MKL native provider for linear algebra, with the specified configuration parameters.
            Throws if it is not available or failed to initialize, in which case the previous provider is still active.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Control.TryUseNativeMKL">
            <summary>
            Try to use the Intel MKL native provider for linear algebra.
            </summary>
            <returns>
            True if the provider was found and initialized successfully.
            False if it failed and the previous provider is still active.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Control.UseNativeCUDA">
            <summary>
            Use the Nvidia CUDA native provider for linear algebra.
            Throws if it is not available or failed to initialize, in which case the previous provider is still active.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Control.TryUseNativeCUDA">
            <summary>
            Try to use the Nvidia CUDA native provider for linear algebra.
            </summary>
            <returns>
            True if the provider was found and initialized successfully.
            False if it failed and the previous provider is still active.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Control.UseNativeOpenBLAS">
            <summary>
            Use the OpenBLAS native provider for linear algebra.
            Throws if it is not available or failed to initialize, in which case the previous provider is still active.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Control.TryUseNativeOpenBLAS">
            <summary>
            Try to use the OpenBLAS native provider for linear algebra.
            </summary>
            <returns>
            True if the provider was found and initialized successfully.
            False if it failed and the previous provider is still active.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Control.TryUseNative">
            <summary>
            Try to use any available native provider in an undefined order.
            </summary>
            <returns>
            True if one of the native providers was found and successfully initialized.
            False if it failed and the previous provider is still active.
            </returns>
        </member>
        <member name="P:MathNet.Numerics.Control.CheckDistributionParameters">
            <summary>
            Gets or sets a value indicating whether the distribution classes check validate each parameter.
            For the multivariate distributions this could involve an expensive matrix factorization.
            The default setting of this property is <c>true</c>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Control.ThreadSafeRandomNumberGenerators">
            <summary>
            Gets or sets a value indicating whether to use thread safe random number generators (RNG).
            Thread safe RNG about two and half time slower than non-thread safe RNG.
            </summary>
            <value>
                <c>true</c> to use thread safe random number generators ; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MathNet.Numerics.Control.NativeProviderPath">
            <summary>
            Optional path to try to load native provider binaries from.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Control.MaxDegreeOfParallelism">
            <summary>
            Gets or sets a value indicating how many parallel worker threads shall be used
            when parallelization is applicable.
            </summary>
            <remarks>Default to the number of processor cores, must be between 1 and 1024 (inclusive).</remarks>
        </member>
        <member name="P:MathNet.Numerics.Control.TaskScheduler">
            <summary>
            Gets or sets the TaskScheduler used to schedule the worker tasks.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Control.ParallelizeOrder">
            <summary>
            Gets or sets the order of the matrix when linear algebra provider
            must calculate multiply in parallel threads.
            </summary>
            <value>The order. Default 64, must be at least 3.</value>
        </member>
        <member name="P:MathNet.Numerics.Control.ParallelizeElements">
            <summary>
            Gets or sets the number of elements a vector or matrix
            must contain before we multiply threads.
            </summary>
            <value>Number of elements. Default 300, must be at least 3.</value>
        </member>
        <member name="T:MathNet.Numerics.Differentiate">
            <summary>
            Numerical Derivative.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.Points(System.Int32,System.Int32)">
            <summary>
            Initialized a NumericalDerivative with the given points and center.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.Order(System.Int32)">
            <summary>
            Initialized a NumericalDerivative with the default points and center for the given order.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.Derivative(System.Func{System.Double,System.Double},System.Double,System.Int32)">
            <summary>
            Evaluates the derivative of a scalar univariate function.
            </summary>
            <param name="f">Univariate function handle.</param>
            <param name="x">Point at which to evaluate the derivative.</param>
            <param name="order">Derivative order.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.DerivativeFunc(System.Func{System.Double,System.Double},System.Int32)">
            <summary>
            Creates a function handle for the derivative of a scalar univariate function.
            </summary>
            <param name="f">Univariate function handle.</param>
            <param name="order">Derivative order.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.FirstDerivative(System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Evaluates the first derivative of a scalar univariate function.
            </summary>
            <param name="f">Univariate function handle.</param>
            <param name="x">Point at which to evaluate the derivative.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.FirstDerivativeFunc(System.Func{System.Double,System.Double})">
            <summary>
            Creates a function handle for the first derivative of a scalar univariate function.
            </summary>
            <param name="f">Univariate function handle.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.SecondDerivative(System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Evaluates the second derivative of a scalar univariate function.
            </summary>
            <param name="f">Univariate function handle.</param>
            <param name="x">Point at which to evaluate the derivative.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.SecondDerivativeFunc(System.Func{System.Double,System.Double})">
            <summary>
            Creates a function handle for the second derivative of a scalar univariate function.
            </summary>
            <param name="f">Univariate function handle.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.PartialDerivative(System.Func{System.Double[],System.Double},System.Double[],System.Int32,System.Int32)">
            <summary>
            Evaluates the partial derivative of a multivariate function.
            </summary>
            <param name="f">Multivariate function handle.</param>
            <param name="x">Vector at which to evaluate the derivative.</param>
            <param name="parameterIndex">Index of independent variable for partial derivative.</param>
            <param name="order">Derivative order.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.PartialDerivativeFunc(System.Func{System.Double[],System.Double},System.Int32,System.Int32)">
            <summary>
            Creates a function handle for the partial derivative of a multivariate function.
            </summary>
            <param name="f">Multivariate function handle.</param>
            <param name="parameterIndex">Index of independent variable for partial derivative.</param>
            <param name="order">Derivative order.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.FirstPartialDerivative(System.Func{System.Double[],System.Double},System.Double[],System.Int32)">
            <summary>
            Evaluates the first partial derivative of a multivariate function.
            </summary>
            <param name="f">Multivariate function handle.</param>
            <param name="x">Vector at which to evaluate the derivative.</param>
            <param name="parameterIndex">Index of independent variable for partial derivative.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.FirstPartialDerivativeFunc(System.Func{System.Double[],System.Double},System.Int32)">
            <summary>
            Creates a function handle for the first partial derivative of a multivariate function.
            </summary>
            <param name="f">Multivariate function handle.</param>
            <param name="parameterIndex">Index of independent variable for partial derivative.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.PartialDerivative2(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Evaluates the partial derivative of a bivariate function.
            </summary>
            <param name="f">Bivariate function handle.</param>
            <param name="x">First argument at which to evaluate the derivative.</param>
            <param name="y">Second argument at which to evaluate the derivative.</param>
            <param name="parameterIndex">Index of independent variable for partial derivative.</param>
            <param name="order">Derivative order.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.PartialDerivative2Func(System.Func{System.Double,System.Double,System.Double},System.Int32,System.Int32)">
            <summary>
            Creates a function handle for the partial derivative of a bivariate function.
            </summary>
            <param name="f">Bivariate function handle.</param>
            <param name="parameterIndex">Index of independent variable for partial derivative.</param>
            <param name="order">Derivative order.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.FirstPartialDerivative2(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Evaluates the first partial derivative of a bivariate function.
            </summary>
            <param name="f">Bivariate function handle.</param>
            <param name="x">First argument at which to evaluate the derivative.</param>
            <param name="y">Second argument at which to evaluate the derivative.</param>
            <param name="parameterIndex">Index of independent variable for partial derivative.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiate.FirstPartialDerivative2Func(System.Func{System.Double,System.Double,System.Double},System.Int32)">
            <summary>
            Creates a function handle for the first partial derivative of a bivariate function.
            </summary>
            <param name="f">Bivariate function handle.</param>
            <param name="parameterIndex">Index of independent variable for partial derivative.</param>
        </member>
        <member name="T:MathNet.Numerics.Differentiation.FiniteDifferenceCoefficients">
            <summary>
            Class to calculate finite difference coefficients using Taylor series expansion method.
            <remarks>
            <para>
            For n points, coefficients are calculated up to the maximum derivative order possible (n-1).
            The current function value position specifies the "center" for surrounding coefficients.
            Selecting the first, middle or last positions represent forward, backwards and central difference methods.
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Differentiation.FiniteDifferenceCoefficients.Points">
            <summary>
            Number of points for finite difference coefficients. Changing this value recalculates the coefficients table.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.FiniteDifferenceCoefficients.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Differentiation.FiniteDifferenceCoefficients"/> class.
            </summary>
            <param name="points">Number of finite difference coefficients.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.FiniteDifferenceCoefficients.GetCoefficients(System.Int32,System.Int32)">
            <summary>
            Gets the finite difference coefficients for a specified center and order.
            </summary>
            <param name="center">Current function position with respect to coefficients. Must be within point range.</param>
            <param name="order">Order of finite difference coefficients.</param>
            <returns>Vector of finite difference coefficients.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.FiniteDifferenceCoefficients.GetCoefficientsForAllOrders(System.Int32)">
            <summary>
            Gets the finite difference coefficients for all orders at a specified center.
            </summary>
            <param name="center">Current function position with respect to coefficients. Must be within point range.</param>
            <returns>Rectangular array of coefficients, with columns specifying order.</returns>
        </member>
        <member name="T:MathNet.Numerics.Differentiation.StepType">
            <summary>
            Type of finite different step size.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Differentiation.StepType.Absolute">
            <summary>
            The absolute step size value will be used in numerical derivatives, regardless of order or function parameters.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Differentiation.StepType.RelativeX">
            <summary>
            A base step size value, h, will be scaled according to the function input parameter. A common example is hx = h*(1+abs(x)), however
            this may vary depending on implementation. This definition only guarantees that the only scaling will be relative to the
            function input parameter and not the order of the finite difference derivative.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Differentiation.StepType.Relative">
            <summary>
            A base step size value, eps (typically machine precision), is scaled according to the finite difference coefficient order
            and function input parameter. The initial scaling according to finite different coefficient order can be thought of as producing a
            base step size, h, that is equivalent to <see cref="F:MathNet.Numerics.Differentiation.StepType.RelativeX"/> scaling. This step size is then scaled according to the function
            input parameter. Although implementation may vary, an example of second order accurate scaling may be (eps)^(1/3)*(1+abs(x)).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Differentiation.NumericalDerivative">
            <summary>
            Class to evaluate the numerical derivative of a function using finite difference approximations.
            Variable point and center methods can be initialized <seealso cref="T:MathNet.Numerics.Differentiation.FiniteDifferenceCoefficients"/>.
            This class can also be used to return function handles (delegates) for a fixed derivative order and variable.
            It is possible to evaluate the derivative and partial derivative of univariate and multivariate functions respectively.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.#ctor">
            <summary>
            Initializes a NumericalDerivative class with the default 3 point center difference method.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialized a NumericalDerivative class.
            </summary>
            <param name="points">Number of points for finite difference derivatives.</param>
            <param name="center">Location of the center with respect to other points. Value ranges from zero to points-1.</param>
        </member>
        <member name="P:MathNet.Numerics.Differentiation.NumericalDerivative.StepSize">
            <summary>
            Sets and gets the finite difference step size. This value is for each function evaluation if relative step size types are used.
            If the base step size used in scaling is desired, see <see cref="P:MathNet.Numerics.Differentiation.NumericalDerivative.Epsilon"/>.
            </summary>
            <remarks>
            Setting then getting the StepSize may return a different value. This is not unusual since a user-defined step size is converted to a
            base-2 representable number to improve finite difference accuracy.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.Differentiation.NumericalDerivative.BaseStepSize">
            <summary>
            Sets and gets the base finite difference step size. This assigned value to this parameter is only used if <see cref="P:MathNet.Numerics.Differentiation.NumericalDerivative.StepType"/> is set to RelativeX.
            However, if the StepType is Relative, it will contain the base step size computed from <see cref="P:MathNet.Numerics.Differentiation.NumericalDerivative.Epsilon"/> based on the finite difference order.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Differentiation.NumericalDerivative.Epsilon">
            <summary>
            Sets and gets the base finite difference step size. This parameter is only used if <see cref="P:MathNet.Numerics.Differentiation.NumericalDerivative.StepType"/> is set to Relative.
            By default this is set to machine epsilon, from which <see cref="P:MathNet.Numerics.Differentiation.NumericalDerivative.BaseStepSize"/> is computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Differentiation.NumericalDerivative.Center">
            <summary>
            Sets and gets the location of the center point for the finite difference derivative.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Differentiation.NumericalDerivative.Evaluations">
            <summary>
            Number of times a function is evaluated for numerical derivatives.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Differentiation.NumericalDerivative.StepType">
            <summary>
            Type of step size for computing finite differences. If set to absolute, dx = h.
            If set to relative, dx = (1+abs(x))*h^(2/(order+1)). This provides accurate results when
            h is approximately equal to the square-root of machine accuracy, epsilon.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.EvaluateDerivative(System.Double[],System.Int32,System.Double)">
            <summary>
            Evaluates the derivative of equidistant points using the finite difference method.
            </summary>
            <param name="points">Vector of points StepSize apart.</param>
            <param name="order">Derivative order.</param>
            <param name="stepSize">Finite difference step size.</param>
            <returns>Derivative of points of the specified order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.EvaluateDerivative(System.Func{System.Double,System.Double},System.Double,System.Int32,System.Nullable{System.Double})">
            <summary>
            Evaluates the derivative of a scalar univariate function.
            </summary>
            <remarks>
            Supplying the optional argument currentValue will reduce the number of function evaluations
            required to calculate the finite difference derivative.
            </remarks>
            <param name="f">Function handle.</param>
            <param name="x">Point at which to compute the derivative.</param>
            <param name="order">Derivative order.</param>
            <param name="currentValue">Current function value at center.</param>
            <returns>Function derivative at x of the specified order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.CreateDerivativeFunctionHandle(System.Func{System.Double,System.Double},System.Int32)">
            <summary>
            Creates a function handle for the derivative of a scalar univariate function.
            </summary>
            <param name="f">Input function handle.</param>
            <param name="order">Derivative order.</param>
            <returns>Function handle that evaluates the derivative of input function at a fixed order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.EvaluatePartialDerivative(System.Func{System.Double[],System.Double},System.Double[],System.Int32,System.Int32,System.Nullable{System.Double})">
            <summary>
            Evaluates the partial derivative of a multivariate function.
            </summary>
            <param name="f">Multivariate function handle.</param>
            <param name="x">Vector at which to evaluate the derivative.</param>
            <param name="parameterIndex">Index of independent variable for partial derivative.</param>
            <param name="order">Derivative order.</param>
            <param name="currentValue">Current function value at center.</param>
            <returns>Function partial derivative at x of the specified order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.EvaluatePartialDerivative(System.Func{System.Double[],System.Double}[],System.Double[],System.Int32,System.Int32,System.Nullable{System.Double}[])">
            <summary>
            Evaluates the partial derivatives of a multivariate function array.
            </summary>
            <remarks>
            This function assumes the input vector x is of the correct length for f.
            </remarks>
            <param name="f">Multivariate vector function array handle.</param>
            <param name="x">Vector at which to evaluate the derivatives.</param>
            <param name="parameterIndex">Index of independent variable for partial derivative.</param>
            <param name="order">Derivative order.</param>
            <param name="currentValue">Current function value at center.</param>
            <returns>Vector of functions partial derivatives at x of the specified order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.CreatePartialDerivativeFunctionHandle(System.Func{System.Double[],System.Double},System.Int32,System.Int32)">
            <summary>
            Creates a function handle for the partial derivative of a multivariate function.
            </summary>
            <param name="f">Input function handle.</param>
            <param name="parameterIndex">Index of the independent variable for partial derivative.</param>
            <param name="order">Derivative order.</param>
            <returns>Function handle that evaluates partial derivative of input function at a fixed order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.CreatePartialDerivativeFunctionHandle(System.Func{System.Double[],System.Double}[],System.Int32,System.Int32)">
            <summary>
            Creates a function handle for the partial derivative of a vector multivariate function.
            </summary>
            <param name="f">Input function handle.</param>
            <param name="parameterIndex">Index of the independent variable for partial derivative.</param>
            <param name="order">Derivative order.</param>
            <returns>Function handle that evaluates partial derivative of input function at fixed order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.EvaluateMixedPartialDerivative(System.Func{System.Double[],System.Double},System.Double[],System.Int32[],System.Int32,System.Nullable{System.Double})">
            <summary>
            Evaluates the mixed partial derivative of variable order for multivariate functions.
            </summary>
            <remarks>
            This function recursively uses <see cref="M:MathNet.Numerics.Differentiation.NumericalDerivative.EvaluatePartialDerivative(System.Func{System.Double[],System.Double},System.Double[],System.Int32,System.Int32,System.Nullable{System.Double})"/> to evaluate mixed partial derivative.
            Therefore, it is more efficient to call <see cref="M:MathNet.Numerics.Differentiation.NumericalDerivative.EvaluatePartialDerivative(System.Func{System.Double[],System.Double},System.Double[],System.Int32,System.Int32,System.Nullable{System.Double})"/> for higher order derivatives of
            a single independent variable.
            </remarks>
            <param name="f">Multivariate function handle.</param>
            <param name="x">Points at which to evaluate the derivative.</param>
            <param name="parameterIndex">Vector of indices for the independent variables at descending derivative orders.</param>
            <param name="order">Highest order of differentiation.</param>
            <param name="currentValue">Current function value at center.</param>
            <returns>Function mixed partial derivative at x of the specified order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.EvaluateMixedPartialDerivative(System.Func{System.Double[],System.Double}[],System.Double[],System.Int32[],System.Int32,System.Nullable{System.Double}[])">
            <summary>
            Evaluates the mixed partial derivative of variable order for multivariate function arrays.
            </summary>
            <remarks>
            This function recursively uses <see cref="M:MathNet.Numerics.Differentiation.NumericalDerivative.EvaluatePartialDerivative(System.Func{System.Double[],System.Double}[],System.Double[],System.Int32,System.Int32,System.Nullable{System.Double}[])"/> to evaluate mixed partial derivative.
            Therefore, it is more efficient to call <see cref="M:MathNet.Numerics.Differentiation.NumericalDerivative.EvaluatePartialDerivative(System.Func{System.Double[],System.Double}[],System.Double[],System.Int32,System.Int32,System.Nullable{System.Double}[])"/> for higher order derivatives of
            a single independent variable.
            </remarks>
            <param name="f">Multivariate function array handle.</param>
            <param name="x">Vector at which to evaluate the derivative.</param>
            <param name="parameterIndex">Vector of indices for the independent variables at descending derivative orders.</param>
            <param name="order">Highest order of differentiation.</param>
            <param name="currentValue">Current function value at center.</param>
            <returns>Function mixed partial derivatives at x of the specified order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.CreateMixedPartialDerivativeFunctionHandle(System.Func{System.Double[],System.Double},System.Int32[],System.Int32)">
            <summary>
            Creates a function handle for the mixed partial derivative of a multivariate function.
            </summary>
            <param name="f">Input function handle.</param>
            <param name="parameterIndex">Vector of indices for the independent variables at descending derivative orders.</param>
            <param name="order">Highest derivative order.</param>
            <returns>Function handle that evaluates the fixed mixed partial derivative of input function at fixed order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.CreateMixedPartialDerivativeFunctionHandle(System.Func{System.Double[],System.Double}[],System.Int32[],System.Int32)">
            <summary>
            Creates a function handle for the mixed partial derivative of a multivariate vector function.
            </summary>
            <param name="f">Input vector function handle.</param>
            <param name="parameterIndex">Vector of indices for the independent variables at descending derivative orders.</param>
            <param name="order">Highest derivative order.</param>
            <returns>Function handle that evaluates the fixed mixed partial derivative of input function at fixed order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalDerivative.ResetEvaluations">
            <summary>
            Resets the evaluation counter.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Differentiation.NumericalHessian">
            <summary>
            Class for evaluating the Hessian of a smooth continuously differentiable function using finite differences.
            By default, a central 3-point method is used.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Differentiation.NumericalHessian.FunctionEvaluations">
            <summary>
            Number of function evaluations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalHessian.#ctor">
            <summary>
            Creates a numerical Hessian object with a three point central difference method.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalHessian.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a numerical Hessian with a specified differentiation scheme.
            </summary>
            <param name="points">Number of points for Hessian evaluation.</param>
            <param name="center">Center point for differentiation.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalHessian.Evaluate(System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Evaluates the Hessian of the scalar univariate function f at points x.
            </summary>
            <param name="f">Scalar univariate function handle.</param>
            <param name="x">Point at which to evaluate Hessian.</param>
            <returns>Hessian tensor.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalHessian.Evaluate(System.Func{System.Double[],System.Double},System.Double[])">
            <summary>
            Evaluates the Hessian of a multivariate function f at points x.
            </summary>
            <remarks>
            This method of computing the Hessian is only valid for Lipschitz continuous functions.
            The function mirrors the Hessian along the diagonal since d2f/dxdy = d2f/dydx for continuously differentiable functions.
            </remarks>
            <param name="f">Multivariate function handle.></param>
            <param name="x">Points at which to evaluate Hessian.></param>
            <returns>Hessian tensor.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalHessian.ResetFunctionEvaluations">
            <summary>
            Resets the function evaluation counter for the Hessian.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Differentiation.NumericalJacobian">
            <summary>
            Class for evaluating the Jacobian of a function using finite differences.
            By default, a central 3-point method is used.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Differentiation.NumericalJacobian.FunctionEvaluations">
            <summary>
            Number of function evaluations.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalJacobian.#ctor">
            <summary>
            Creates a numerical Jacobian object with a three point central difference method.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalJacobian.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a numerical Jacobian with a specified differentiation scheme.
            </summary>
            <param name="points">Number of points for Jacobian evaluation.</param>
            <param name="center">Center point for differentiation.</param>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalJacobian.Evaluate(System.Func{System.Double,System.Double},System.Double)">
            <summary>
            Evaluates the Jacobian of scalar univariate function f at point x.
            </summary>
            <param name="f">Scalar univariate function handle.</param>
            <param name="x">Point at which to evaluate Jacobian.</param>
            <returns>Jacobian vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalJacobian.Evaluate(System.Func{System.Double[],System.Double},System.Double[])">
            <summary>
            Evaluates the Jacobian of a multivariate function f at vector x.
            </summary>
            <remarks>
            This function assumes that the length of vector x consistent with the argument count of f.
            </remarks>
            <param name="f">Multivariate function handle.</param>
            <param name="x">Points at which to evaluate Jacobian.</param>
            <returns>Jacobian vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalJacobian.Evaluate(System.Func{System.Double[],System.Double},System.Double[],System.Double)">
            <summary>
            Evaluates the Jacobian of a multivariate function f at vector x given a current function value.
            </summary>
            <remarks>
            To minimize the number of function evaluations, a user can supply the current value of the function
            to be used in computing the Jacobian. This value must correspond to the "center" location for the
            finite differencing. If a scheme is used where the center value is not evaluated, this will provide no
            added efficiency. This method also assumes that the length of vector x consistent with the argument count of f.
            </remarks>
            <param name="f">Multivariate function handle.</param>
            <param name="x">Points at which to evaluate Jacobian.</param>
            <param name="currentValue">Current function value at finite difference center.</param>
            <returns>Jacobian vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalJacobian.Evaluate(System.Func{System.Double[],System.Double}[],System.Double[])">
            <summary>
            Evaluates the Jacobian of a multivariate function array f at vector x.
            </summary>
            <param name="f">Multivariate function array handle.</param>
            <param name="x">Vector at which to evaluate Jacobian.</param>
            <returns>Jacobian matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalJacobian.Evaluate(System.Func{System.Double[],System.Double}[],System.Double[],System.Double[])">
            <summary>
            Evaluates the Jacobian of a multivariate function array f at vector x given a vector of current function values.
            </summary>
            <remarks>
            To minimize the number of function evaluations, a user can supply a vector of current values of the functions
            to be used in computing the Jacobian. These value must correspond to the "center" location for the
            finite differencing. If a scheme is used where the center value is not evaluated, this will provide no
            added efficiency. This method also assumes that the length of vector x consistent with the argument count of f.
            </remarks>
            <param name="f">Multivariate function array handle.</param>
            <param name="x">Vector at which to evaluate Jacobian.</param>
            <param name="currentValues">Vector of current function values.</param>
            <returns>Jacobian matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.Differentiation.NumericalJacobian.ResetFunctionEvaluations">
            <summary>
            Resets the function evaluation counter for the Jacobian.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distance">
            <summary>
            Metrics to measure the distance between two structures.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.SAD``1(MathNet.Numerics.LinearAlgebra.Vector{``0},MathNet.Numerics.LinearAlgebra.Vector{``0})">
            <summary>
            Sum of Absolute Difference (SAD), i.e. the L1-norm (Manhattan) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.SAD(System.Double[],System.Double[])">
            <summary>
            Sum of Absolute Difference (SAD), i.e. the L1-norm (Manhattan) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.SAD(System.Single[],System.Single[])">
            <summary>
            Sum of Absolute Difference (SAD), i.e. the L1-norm (Manhattan) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.MAE``1(MathNet.Numerics.LinearAlgebra.Vector{``0},MathNet.Numerics.LinearAlgebra.Vector{``0})">
            <summary>
            Mean-Absolute Error (MAE), i.e. the normalized L1-norm (Manhattan) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.MAE(System.Double[],System.Double[])">
            <summary>
            Mean-Absolute Error (MAE), i.e. the normalized L1-norm (Manhattan) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.MAE(System.Single[],System.Single[])">
            <summary>
            Mean-Absolute Error (MAE), i.e. the normalized L1-norm (Manhattan) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.SSD``1(MathNet.Numerics.LinearAlgebra.Vector{``0},MathNet.Numerics.LinearAlgebra.Vector{``0})">
            <summary>
            Sum of Squared Difference (SSD), i.e. the squared L2-norm (Euclidean) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.SSD(System.Double[],System.Double[])">
            <summary>
            Sum of Squared Difference (SSD), i.e. the squared L2-norm (Euclidean) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.SSD(System.Single[],System.Single[])">
            <summary>
            Sum of Squared Difference (SSD), i.e. the squared L2-norm (Euclidean) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.MSE``1(MathNet.Numerics.LinearAlgebra.Vector{``0},MathNet.Numerics.LinearAlgebra.Vector{``0})">
            <summary>
            Mean-Squared Error (MSE), i.e. the normalized squared L2-norm (Euclidean) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.MSE(System.Double[],System.Double[])">
            <summary>
            Mean-Squared Error (MSE), i.e. the normalized squared L2-norm (Euclidean) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.MSE(System.Single[],System.Single[])">
            <summary>
            Mean-Squared Error (MSE), i.e. the normalized squared L2-norm (Euclidean) of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Euclidean``1(MathNet.Numerics.LinearAlgebra.Vector{``0},MathNet.Numerics.LinearAlgebra.Vector{``0})">
            <summary>
            Euclidean Distance, i.e. the L2-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Euclidean(System.Double[],System.Double[])">
            <summary>
            Euclidean Distance, i.e. the L2-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Euclidean(System.Single[],System.Single[])">
            <summary>
            Euclidean Distance, i.e. the L2-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Manhattan``1(MathNet.Numerics.LinearAlgebra.Vector{``0},MathNet.Numerics.LinearAlgebra.Vector{``0})">
            <summary>
            Manhattan Distance, i.e. the L1-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Manhattan(System.Double[],System.Double[])">
            <summary>
            Manhattan Distance, i.e. the L1-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Manhattan(System.Single[],System.Single[])">
            <summary>
            Manhattan Distance, i.e. the L1-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Chebyshev``1(MathNet.Numerics.LinearAlgebra.Vector{``0},MathNet.Numerics.LinearAlgebra.Vector{``0})">
            <summary>
            Chebyshev Distance, i.e. the Infinity-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Chebyshev(System.Double[],System.Double[])">
            <summary>
            Chebyshev Distance, i.e. the Infinity-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Chebyshev(System.Single[],System.Single[])">
            <summary>
            Chebyshev Distance, i.e. the Infinity-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Minkowski``1(System.Double,MathNet.Numerics.LinearAlgebra.Vector{``0},MathNet.Numerics.LinearAlgebra.Vector{``0})">
            <summary>
            Minkowski Distance, i.e. the generalized p-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Minkowski(System.Double,System.Double[],System.Double[])">
            <summary>
            Minkowski Distance, i.e. the generalized p-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Minkowski(System.Double,System.Single[],System.Single[])">
            <summary>
            Minkowski Distance, i.e. the generalized p-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Canberra(System.Double[],System.Double[])">
            <summary>
            Canberra Distance, a weighted version of the L1-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Canberra(System.Single[],System.Single[])">
            <summary>
            Canberra Distance, a weighted version of the L1-norm of the difference.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Cosine(System.Double[],System.Double[])">
            <summary>
            Cosine Distance, representing the angular distance while ignoring the scale.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Cosine(System.Single[],System.Single[])">
            <summary>
            Cosine Distance, representing the angular distance while ignoring the scale.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Hamming(System.Double[],System.Double[])">
            <summary>
            Hamming Distance, i.e. the number of positions that have different values in the vectors.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Hamming(System.Single[],System.Single[])">
            <summary>
            Hamming Distance, i.e. the number of positions that have different values in the vectors.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Pearson(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Pearson's distance, i.e. 1 - the person correlation coefficient.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distance.Jaccard(System.Double[],System.Double[])">
            <summary>
            Jaccard distance, i.e. 1 - the Jaccard index.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if a or b are null.</exception>
            <exception cref="T:System.ArgumentException">Throw if a and b are of different lengths.</exception>
            <returns>Jaccard distance.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distance.Jaccard(System.Single[],System.Single[])">
            <summary>
            Jaccard distance, i.e. 1 - the Jaccard index.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if a or b are null.</exception>
            <exception cref="T:System.ArgumentException">Throw if a and b are of different lengths.</exception>
            <returns>Jaccard distance.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Bernoulli">
            <summary>
            Discrete Univariate Bernoulli distribution.
            The Bernoulli distribution is a distribution over bits. The parameter
            p specifies the probability that a 1 is generated.
            <a href="http://en.wikipedia.org/wiki/Bernoulli_distribution">Wikipedia - Bernoulli distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Bernoulli class.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the Bernoulli parameter is not in the range [0,1].</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.#ctor(System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Bernoulli class.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the Bernoulli parameter is not in the range [0,1].</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.IsValidParameterSet(System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.P">
            <summary>
            Gets the probability of generating a one. Range: 0 ≤ p ≤ 1.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Modes">
            <summary>
            Gets all modes of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Bernoulli.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.PMF(System.Double,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.PMFLn(System.Double,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.CDF(System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Bernoulli.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.SampleUnchecked(System.Random,System.Double)">
            <summary>
            Generates one sample from the Bernoulli distribution.
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>A random sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Sample">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
            <returns>A sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Samples">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Sample(System.Random,System.Double)">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>A sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Samples(System.Random,System.Double)">
            <summary>
            Samples a sequence of Bernoulli distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Samples(System.Random,System.Int32[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Sample(System.Double)">
            <summary>
            Samples a Bernoulli distributed random variable.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>A sample from the Bernoulli distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Samples(System.Double)">
            <summary>
            Samples a sequence of Bernoulli distributed random variables.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Bernoulli.Samples(System.Int32[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Beta">
            <summary>
            Continuous Univariate Beta distribution.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Beta_distribution">Wikipedia - Beta distribution</a>.
            </summary>
            <remarks>
            There are a few special cases for the parameterization of the Beta distribution. When both
            shape parameters are positive infinity, the Beta distribution degenerates to a point distribution
            at 0.5. When one of the shape parameters is positive infinity, the distribution degenerates to a point
            distribution at the positive infinity. When both shape parameters are 0.0, the Beta distribution
            degenerates to a Bernoulli distribution with parameter 0.5. When one shape parameter is 0.0, the
            distribution degenerates to a point distribution at the non-zero shape parameter.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Beta class.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Beta class.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>A string representation of the Beta distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.A">
            <summary>
            Gets the α shape parameter of the Beta distribution. Range: α ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.B">
            <summary>
            Gets the β shape parameter of the Beta distribution. Range: β ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Mean">
            <summary>
            Gets the mean of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Variance">
            <summary>
            Gets the variance of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.StdDev">
            <summary>
            Gets the standard deviation of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Entropy">
            <summary>
            Gets the entropy of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Skewness">
            <summary>
            Gets the skewness of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Mode">
            <summary>
            Gets the mode of the Beta distribution; when there are multiple answers, this routine will return 0.5.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Median">
            <summary>
            Gets the median of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Minimum">
            <summary>
            Gets the minimum of the Beta distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Beta.Maximum">
            <summary>
            Gets the maximum of the Beta distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Beta.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Beta.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Beta.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Beta.InvCDF(System.Double,System.Double,System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Sample">
            <summary>
            Generates a sample from the Beta distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Samples">
            <summary>
            Generates a sequence of samples from the Beta distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Samples Beta distributed random variables by sampling two Gamma variables and normalizing.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a random number from the Beta distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Beta.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Beta.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Beta.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Beta.InverseCumulativeDistribution(System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Beta.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="a">The α shape parameter of the Beta distribution. Range: α ≥ 0.</param>
            <param name="b">The β shape parameter of the Beta distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the BetaScaled class.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.#ctor(System.Double,System.Double,System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the BetaScaled class.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.PERT(System.Double,System.Double,System.Double,System.Random)">
            <summary>
            Create a Beta PERT distribution, used in risk analysis and other domains where an expert forecast
            is used to construct an underlying beta distribution.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="likely">The most likely value (mode).</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <returns>The Beta distribution derived from the PERT parameters.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>A string representation of the BetaScaled distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.IsValidParameterSet(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.A">
            <summary>
            Gets the α shape parameter of the BetaScaled distribution. Range: α > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.B">
            <summary>
            Gets the β shape parameter of the BetaScaled distribution. Range: β > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.Location">
            <summary>
            Gets the location (μ) of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.Scale">
            <summary>
            Gets the scale (σ) of the BetaScaled distribution. Range: σ > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.Mean">
            <summary>
            Gets the mean of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.Variance">
            <summary>
            Gets the variance of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.StdDev">
            <summary>
            Gets the standard deviation of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.Entropy">
            <summary>
            Gets the entropy of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.Skewness">
            <summary>
            Gets the skewness of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.Mode">
            <summary>
            Gets the mode of the BetaScaled distribution; when there are multiple answers, this routine will return 0.5.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.Median">
            <summary>
            Gets the median of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.Minimum">
            <summary>
            Gets the minimum of the BetaScaled distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.BetaScaled.Maximum">
            <summary>
            Gets the maximum of the BetaScaled distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.BetaScaled.PDF(System.Double,System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.BetaScaled.PDFLn(System.Double,System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.BetaScaled.CDF(System.Double,System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.BetaScaled.InvCDF(System.Double,System.Double,System.Double,System.Double,System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.Sample">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.Samples">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.PDF(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.BetaScaled.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.PDFLn(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.BetaScaled.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.CDF(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.BetaScaled.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.InvCDF(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.BetaScaled.InverseCumulativeDistribution(System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.Sample(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.Samples(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.Samples(System.Random,System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.Sample(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.Samples(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.BetaScaled.Samples(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="a">The α shape parameter of the BetaScaled distribution. Range: α > 0.</param>
            <param name="b">The β shape parameter of the BetaScaled distribution. Range: β > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Binomial">
            <summary>
            Discrete Univariate Binomial distribution.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Binomial_distribution">Wikipedia - Binomial distribution</a>.
            </summary>
            <remarks>
            The distribution is parameterized by a probability (between 0.0 and 1.0).
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the Binomial class.
            </summary>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="p"/> is not in the interval [0.0,1.0].</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.#ctor(System.Double,System.Int32,System.Random)">
            <summary>
            Initializes a new instance of the Binomial class.
            </summary>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="p"/> is not in the interval [0.0,1.0].</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.IsValidParameterSet(System.Double,System.Int32)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.P">
            <summary>
            Gets the success probability in each trial. Range: 0 ≤ p ≤ 1.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.N">
            <summary>
            Gets the number of trials. Range: n ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Modes">
            <summary>
            Gets all modes of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Binomial.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.PMF(System.Double,System.Int32,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.PMFLn(System.Double,System.Int32,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.CDF(System.Double,System.Int32,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Binomial.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.SampleUnchecked(System.Random,System.Double,System.Int32)">
            <summary>
            Generates a sample from the Binomial distribution without doing parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>The number of successful trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Sample">
            <summary>
            Samples a Binomially distributed random variable.
            </summary>
            <returns>The number of successes in N trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Samples">
            <summary>
            Samples an array of Binomially distributed random variables.
            </summary>
            <returns>a sequence of successes in N trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Sample(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a binomially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>The number of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Samples(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a sequence of binomially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>a sequence of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Samples(System.Random,System.Int32[],System.Double,System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>a sequence of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Sample(System.Double,System.Int32)">
            <summary>
            Samples a binomially distributed random variable.
            </summary>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>The number of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Samples(System.Double,System.Int32)">
            <summary>
            Samples a sequence of binomially distributed random variable.
            </summary>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>a sequence of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Binomial.Samples(System.Int32[],System.Double,System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="p">The success probability (p) in each trial. Range: 0 ≤ p ≤ 1.</param>
            <param name="n">The number of trials (n). Range: n ≥ 0.</param>
            <returns>a sequence of successes in <paramref name="n"/> trials.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Categorical">
            <summary>
            Discrete Univariate Categorical distribution.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Categorical_distribution">Wikipedia - Categorical distribution</a>. This
            distribution is sometimes called the Discrete distribution.
            </summary>
            <remarks>
            The distribution is parameterized by a vector of ratios: in other words, the parameter
            does not have to be normalized and sum to 1. The reason is that some vectors can't be exactly normalized
            to sum to 1 in floating point representation.
            </remarks>
            <remarks>
            Support: 0..k where k = length(probability mass array)-1
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the Categorical class.
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <exception cref="T:System.ArgumentException">If any of the probabilities are negative or do not sum to one.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.#ctor(System.Double[],System.Random)">
            <summary>
            Initializes a new instance of the Categorical class.
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentException">If any of the probabilities are negative or do not sum to one.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.#ctor(MathNet.Numerics.Statistics.Histogram)">
            <summary>
            Initializes a new instance of the Categorical class from a <paramref name="histogram"/>. The distribution
            will not be automatically updated when the histogram changes. The categorical distribution will have
            one value for each bucket and a probability for that value proportional to the bucket count.
            </summary>
            <param name="histogram">The histogram from which to create the categorical variable.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.IsValidProbabilityMass(System.Double[])">
            <summary>
            Checks whether the parameters of the distribution are valid.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized as this is often impossible using floating point arithmetic.</param>
            <returns>If any of the probabilities are negative returns <c>false</c>, or if the sum of parameters is 0.0; otherwise <c>true</c></returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.IsValidCumulativeDistribution(System.Double[])">
            <summary>
            Checks whether the parameters of the distribution are valid.
            </summary>
            <param name="cdf">An array of nonnegative ratios: this array does not need to be normalized as this is often impossible using floating point arithmetic.</param>
            <returns>If any of the probabilities are negative returns <c>false</c>, or if the sum of parameters is 0.0; otherwise <c>true</c></returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.P">
            <summary>
            Gets the probability mass vector (non-negative ratios) of the multinomial.
            </summary>
            <remarks>Sometimes the normalized probability vector cannot be represented exactly in a floating point representation.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
            <remarks>Throws a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Mode">
            <summary>
            Gets he mode of the distribution.
            </summary>
            <remarks>Throws a <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Categorical.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability.
            </summary>
            <param name="probability">A real number between 0 and 1.</param>
            <returns>An integer between 0 and the size of the categorical (exclusive), that corresponds to the inverse CDF for the given probability.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.PMF(System.Double[],System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.PMFLn(System.Double[],System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.CDF(System.Double[],System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Categorical.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.InvCDF(System.Double[],System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability.
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <param name="probability">A real number between 0 and 1.</param>
            <returns>An integer between 0 and the size of the categorical (exclusive), that corresponds to the inverse CDF for the given probability.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.InvCDFWithCumulativeDistribution(System.Double[],System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability.
            </summary>
            <param name="cdfUnnormalized">An array corresponding to a CDF for a categorical distribution. Not assumed to be normalized.</param>
            <param name="probability">A real number between 0 and 1.</param>
            <returns>An integer between 0 and the size of the categorical (exclusive), that corresponds to the inverse CDF for the given probability.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.ProbabilityMassToCumulativeDistribution(System.Double[])">
            <summary>
            Computes the cumulative distribution function. This method performs no parameter checking.
            If the probability mass was normalized, the resulting cumulative distribution is normalized as well (up to numerical errors).
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <returns>An array representing the unnormalized cumulative distribution function.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SampleUnchecked(System.Random,System.Double[])">
            <summary>
            Returns one trials from the categorical distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="cdfUnnormalized">The (unnormalized) cumulative distribution of the probability distribution.</param>
            <returns>One sample from the categorical distribution implied by <paramref name="cdfUnnormalized"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Sample">
            <summary>
            Samples a Binomially distributed random variable.
            </summary>
            <returns>The number of successful trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Samples">
            <summary>
            Samples an array of Bernoulli distributed random variables.
            </summary>
            <returns>a sequence of successful trial counts.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Sample(System.Random,System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Samples(System.Random,System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Samples(System.Random,System.Int32[],System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Sample(System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Samples(System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.Samples(System.Int32[],System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="probabilityMass">An array of nonnegative ratios. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SampleWithCumulativeDistribution(System.Random,System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SamplesWithCumulativeDistribution(System.Random,System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SamplesWithCumulativeDistribution(System.Random,System.Int32[],System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SampleWithCumulativeDistribution(System.Double[])">
            <summary>
            Samples one categorical distributed random variable; also known as the Discrete distribution.
            </summary>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>One random integer between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SamplesWithCumulativeDistribution(System.Double[])">
            <summary>
            Samples a categorically distributed random variable.
            </summary>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Categorical.SamplesWithCumulativeDistribution(System.Int32[],System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="cdfUnnormalized">An array of the cumulative distribution. Not assumed to be normalized.</param>
            <returns>random integers between 0 and the size of the categorical (exclusive).</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Cauchy">
            <summary>
            Continuous Univariate Cauchy distribution.
            The Cauchy distribution is a symmetric continuous probability distribution. For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Cauchy_distribution">Wikipedia - Cauchy distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Cauchy"/> class with the location parameter set to 0 and the scale parameter set to 1
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Cauchy"/> class.
            </summary>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Cauchy"/> class.
            </summary>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Location">
            <summary>
            Gets the location  (x0) of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Scale">
            <summary>
            Gets the scale (γ) of the distribution. Range: γ > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Cauchy.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Cauchy.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Cauchy.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Cauchy.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Cauchy.InvCDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Samples">
            <summary>
            Generates a sequence of samples from the Cauchy distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Cauchy.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Cauchy.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Cauchy.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Cauchy.InverseCumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Cauchy.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="location">The location (x0) of the distribution.</param>
            <param name="scale">The scale (γ) of the distribution. Range: γ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Chi">
            <summary>
            Continuous Univariate Chi distribution.
            This distribution is a continuous probability distribution. The distribution usually arises when a k-dimensional vector's orthogonal
            components are independent and each follow a standard normal distribution. The length of the vector will
            then have a chi distribution.
            <a href="http://en.wikipedia.org/wiki/Chi_distribution">Wikipedia - Chi distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Chi"/> class.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.#ctor(System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Chi"/> class.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.IsValidParameterSet(System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom (k) of the Chi distribution. Range: k > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Chi.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Chi.PDF(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Chi.PDFLn(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Chi.CDF(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Sample">
            <summary>
            Generates a sample from the Chi distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Samples">
            <summary>
            Generates a sequence of samples from the Chi distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.SampleUnchecked(System.Random,System.Int32)">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.PDF(System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Chi.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.PDFLn(System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Chi.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.CDF(System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Chi.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Sample(System.Random,System.Int32)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Samples(System.Random,System.Int32)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Samples(System.Random,System.Double[],System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Sample(System.Int32)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Samples(System.Int32)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Chi.Samples(System.Double[],System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ChiSquared">
            <summary>
            Continuous Univariate Chi-Squared distribution.
            This distribution is a sum of the squares of k independent standard normal random variables.
            <a href="http://en.wikipedia.org/wiki/Chi-square_distribution">Wikipedia - ChiSquare distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.ChiSquared"/> class.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.#ctor(System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.ChiSquared"/> class.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.IsValidParameterSet(System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquared.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom (k) of the Chi-Squared distribution. Range: k > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquared.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquared.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquared.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquared.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquared.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquared.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquared.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquared.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquared.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ChiSquared.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ChiSquared.PDF(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ChiSquared.PDFLn(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ChiSquared.CDF(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ChiSquared.InvCDF(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.Sample">
            <summary>
            Generates a sample from the <c>ChiSquare</c> distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.Samples">
            <summary>
            Generates a sequence of samples from the <c>ChiSquare</c> distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.SampleUnchecked(System.Random,System.Double)">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.PDF(System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ChiSquared.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.PDFLn(System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ChiSquared.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.CDF(System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ChiSquared.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.InvCDF(System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.Sample(System.Random,System.Double)">
            <summary>
            Generates a sample from the <c>ChiSquare</c> distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sample from the distribution. </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.Samples(System.Random,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sample from the distribution. </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.Samples(System.Random,System.Double[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sample from the distribution. </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.Sample(System.Double)">
            <summary>
            Generates a sample from the <c>ChiSquare</c> distribution.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sample from the distribution. </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.Samples(System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sample from the distribution. </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ChiSquared.Samples(System.Double[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="freedom">The degrees of freedom (k) of the distribution. Range: k > 0.</param>
            <returns>a sample from the distribution. </returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ContinuousUniform">
            <summary>
            Continuous Univariate Uniform distribution.
            The continuous uniform distribution is a distribution over real numbers. For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29">Wikipedia - Continuous uniform distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.#ctor">
            <summary>
            Initializes a new instance of the ContinuousUniform class with lower bound 0 and upper bound 1.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the ContinuousUniform class with given lower and upper bounds.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <exception cref="T:System.ArgumentException">If the upper bound is smaller than the lower bound.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the ContinuousUniform class with given lower and upper bounds.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentException">If the upper bound is smaller than the lower bound.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.LowerBound">
            <summary>
            Gets the lower bound of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.UpperBound">
            <summary>
            Gets the upper bound of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ContinuousUniform.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ContinuousUniform.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ContinuousUniform.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ContinuousUniform.InvCDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Sample">
            <summary>
            Generates a sample from the <c>ContinuousUniform</c> distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Samples">
            <summary>
            Generates a sequence of samples from the <c>ContinuousUniform</c> distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ContinuousUniform.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ContinuousUniform.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ContinuousUniform.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ContinuousUniform.InverseCumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the <c>ContinuousUniform</c> distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <returns>a uniformly distributed sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the <c>ContinuousUniform</c> distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <returns>a sequence of uniformly distributed samples.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the <c>ContinuousUniform</c> distribution.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <returns>a uniformly distributed sample.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the <c>ContinuousUniform</c> distribution.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <returns>a sequence of uniformly distributed samples.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ContinuousUniform.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="lower">Lower bound. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound. Range: lower ≤ upper.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.ConwayMaxwellPoisson">
            <summary>
            Discrete Univariate Conway-Maxwell-Poisson distribution.
            <para>The Conway-Maxwell-Poisson distribution is a generalization of the Poisson, Geometric and Bernoulli
            distributions. It is parameterized by two real numbers "lambda" and "nu". For
            <list>
                <item>nu = 0 the distribution reverts to a Geometric distribution</item>
                <item>nu = 1 the distribution reverts to the Poisson distribution</item>
                <item>nu -> infinity the distribution converges to a Bernoulli distribution</item>
            </list></para>
            This implementation will cache the value of the normalization constant.
            <a href="http://en.wikipedia.org/wiki/Conway%E2%80%93Maxwell%E2%80%93Poisson_distribution">Wikipedia - ConwayMaxwellPoisson distribution</a>.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ConwayMaxwellPoisson._mean">
            <summary>
            The mean of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ConwayMaxwellPoisson._variance">
            <summary>
             The variance of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ConwayMaxwellPoisson._z">
            <summary>
            Caches the value of the normalization constant.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Tolerance">
            <summary>
            Since many properties of the distribution can only be computed approximately, the tolerance
            level specifies how much error we accept.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.ConwayMaxwellPoisson"/> class.
            </summary>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.ConwayMaxwellPoisson"/> class.
            </summary>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Lambda">
            <summary>
            Gets the lambda (λ) parameter. Range: λ > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Nu">
            <summary>
            Gets the rate of decay (ν) parameter. Range: ν ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Mode">
            <summary>
            Gets the mode of the distribution
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMF(System.Double,System.Double,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.PMFLn(System.Double,System.Double,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Z">
            <summary>
            Gets the normalization constant of the Conway-Maxwell-Poisson distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Normalization(System.Double,System.Double)">
            <summary>
            Computes an approximate normalization constant for the CMP distribution.
            </summary>
            <param name="lambda">The lambda (λ) parameter for the CMP distribution.</param>
            <param name="nu">The rate of decay (ν) parameter for the CMP distribution.</param>
            <returns>
            an approximate normalization constant for the CMP distribution.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.SampleUnchecked(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Returns one trials from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
            <param name="z">The z parameter.</param>
            <returns>
            One sample from the distribution implied by <paramref name="lambda"/>, <paramref name="nu"/>, and <paramref name="z"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Sample">
            <summary>
            Samples a Conway-Maxwell-Poisson distributed random variable.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Samples">
            <summary>
            Samples a sequence of a Conway-Maxwell-Poisson distributed random variables.
            </summary>
            <returns>
            a sequence of samples from a Conway-Maxwell-Poisson distribution.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Samples(System.Random,System.Int32[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Sample(System.Double,System.Double)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Samples(System.Double,System.Double)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.ConwayMaxwellPoisson.Samples(System.Int32[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="lambda">The lambda (λ) parameter. Range: λ > 0.</param>
            <param name="nu">The rate of decay (ν) parameter. Range: ν ≥ 0.</param>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Dirichlet">
            <summary>
            Multivariate Dirichlet distribution. For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Dirichlet_distribution">Wikipedia - Dirichlet distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the Dirichlet class. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="alpha">An array with the Dirichlet parameters.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.#ctor(System.Double[],System.Random)">
            <summary>
            Initializes a new instance of the Dirichlet class. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="alpha">An array with the Dirichlet parameters.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Dirichlet"/> class.
            <seealso cref="T:System.Random"/>random number generator.</summary>
            <param name="alpha">The value of each parameter of the Dirichlet distribution.</param>
            <param name="k">The dimension of the Dirichlet distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.#ctor(System.Double,System.Int32,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Dirichlet"/> class.
            <seealso cref="T:System.Random"/>random number generator.</summary>
            <param name="alpha">The value of each parameter of the Dirichlet distribution.</param>
            <param name="k">The dimension of the Dirichlet distribution.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.IsValidParameterSet(System.Double[])">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            No parameter can be less than zero and at least one parameter should be larger than zero.
            </summary>
            <param name="alpha">The parameters of the Dirichlet distribution.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Alpha">
            <summary>
            Gets or sets the parameters of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Dimension">
            <summary>
            Gets the dimension of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.AlphaSum">
            <summary>
            Gets the sum of the Dirichlet parameters.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Mean">
            <summary>
            Gets the mean of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Variance">
            <summary>
            Gets the variance of the Dirichlet distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Dirichlet.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.Density(System.Double[])">
            <summary>
            Computes the density of the distribution.
            </summary>
            <param name="x">The locations at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <remarks>The Dirichlet distribution requires that the sum of the components of x equals 1.
            You can also leave out the last <paramref name="x"/> component, and it will be computed from the others. </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.DensityLn(System.Double[])">
            <summary>
            Computes the log density of the distribution.
            </summary>
            <param name="x">The locations at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.Sample">
            <summary>
            Samples a Dirichlet distributed random vector.
            </summary>
            <returns>A sample from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Dirichlet.Sample(System.Random,System.Double[])">
            <summary>
            Samples a Dirichlet distributed random vector.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="alpha">The Dirichlet distribution parameter.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.DiscreteUniform">
            <summary>
            Discrete Univariate Uniform distribution.
            The discrete uniform distribution is a distribution over integers. The distribution
            is parameterized by a lower and upper bound (both inclusive).
            <a href="http://en.wikipedia.org/wiki/Uniform_distribution_%28discrete%29">Wikipedia - Discrete uniform distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DiscreteUniform class.
            </summary>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.#ctor(System.Int32,System.Int32,System.Random)">
            <summary>
            Initializes a new instance of the DiscreteUniform class.
            </summary>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.IsValidParameterSet(System.Int32,System.Int32)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.LowerBound">
            <summary>
            Gets the inclusive lower bound of the probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.UpperBound">
            <summary>
            Gets the inclusive upper bound of the probability distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Mode">
            <summary>
            Gets the mode of the distribution; since every element in the domain has the same probability this method returns the middle one.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.DiscreteUniform.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.PMF(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.PMFLn(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.CDF(System.Int32,System.Int32,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.DiscreteUniform.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.SampleUnchecked(System.Random,System.Int32,System.Int32)">
            <summary>
            Generates one sample from the discrete uniform distribution. This method does not do any parameter checking.
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
            <returns>A random sample from the discrete uniform distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Samples">
            <summary>
            Samples an array of uniformly distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Sample(System.Random,System.Int32,System.Int32)">
            <summary>
            Samples a uniformly distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
            <returns>A sample from the discrete uniform distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Samples(System.Random,System.Int32,System.Int32)">
            <summary>
            Samples a sequence of uniformly distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
            <returns>a sequence of samples from the discrete uniform distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Samples(System.Random,System.Int32[],System.Int32,System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
            <returns>a sequence of samples from the discrete uniform distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Sample(System.Int32,System.Int32)">
            <summary>
            Samples a uniformly distributed random variable.
            </summary>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
            <returns>A sample from the discrete uniform distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Samples(System.Int32,System.Int32)">
            <summary>
            Samples a sequence of uniformly distributed random variables.
            </summary>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
            <returns>a sequence of samples from the discrete uniform distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.DiscreteUniform.Samples(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="lower">Lower bound, inclusive. Range: lower ≤ upper.</param>
            <param name="upper">Upper bound, inclusive. Range: lower ≤ upper.</param>
            <returns>a sequence of samples from the discrete uniform distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Erlang">
            <summary>
            Continuous Univariate Erlang distribution.
            This distribution is a continuous probability distribution with wide applicability primarily due to its
            relation to the exponential and Gamma distributions.
            <a href="http://en.wikipedia.org/wiki/Erlang_distribution">Wikipedia - Erlang distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Erlang"/> class.
            </summary>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.#ctor(System.Int32,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Erlang"/> class.
            </summary>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.WithShapeScale(System.Int32,System.Double,System.Random)">
            <summary>
            Constructs a Erlang distribution from a shape and scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="scale">The scale (μ) of the Erlang distribution. Range: μ ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.WithShapeRate(System.Int32,System.Double,System.Random)">
            <summary>
            Constructs a Erlang distribution from a shape and inverse scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.IsValidParameterSet(System.Int32,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Shape">
            <summary>
            Gets the shape (k) of the Erlang distribution. Range: k ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Rate">
            <summary>
            Gets the rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Scale">
            <summary>
            Gets the scale of the Erlang distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Minimum">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Erlang.Maximum">
            <summary>
            Gets the Maximum value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Erlang.PDF(System.Int32,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Erlang.PDFLn(System.Int32,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Erlang.CDF(System.Int32,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Sample">
            <summary>
            Generates a sample from the Erlang distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Samples">
            <summary>
            Generates a sequence of samples from the Erlang distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.PDF(System.Int32,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Erlang.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.PDFLn(System.Int32,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Erlang.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.CDF(System.Int32,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Erlang.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Sample(System.Random,System.Int32,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Samples(System.Random,System.Int32,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Samples(System.Random,System.Double[],System.Int32,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Sample(System.Int32,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Samples(System.Int32,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Erlang.Samples(System.Double[],System.Int32,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="shape">The shape (k) of the Erlang distribution. Range: k ≥ 0.</param>
            <param name="rate">The rate or inverse scale (λ) of the Erlang distribution. Range: λ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Exponential">
            <summary>
            Continuous Univariate Exponential distribution.
            The exponential distribution is a distribution over the real numbers parameterized by one non-negative parameter.
            <a href="http://en.wikipedia.org/wiki/Exponential_distribution">Wikipedia - exponential distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Exponential"/> class.
            </summary>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.#ctor(System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Exponential"/> class.
            </summary>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.IsValidParameterSet(System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Rate">
            <summary>
            Gets the rate (λ) parameter of the distribution. Range: λ ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Exponential.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Exponential.PDF(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Exponential.PDFLn(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Exponential.CDF(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Exponential.InvCDF(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Samples">
            <summary>
            Generates a sequence of samples from the Exponential distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.PDF(System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Exponential.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.PDFLn(System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Exponential.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.CDF(System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Exponential.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.InvCDF(System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Exponential.InverseCumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Sample(System.Random,System.Double)">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Samples(System.Random,System.Double[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Samples(System.Random,System.Double)">
            <summary>
            Generates a sequence of samples from the Exponential distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Sample(System.Double)">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Samples(System.Double[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Exponential.Samples(System.Double)">
            <summary>
            Generates a sequence of samples from the Exponential distribution.
            </summary>
            <param name="rate">The rate (λ) parameter of the distribution. Range: λ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.FisherSnedecor">
            <summary>
            Continuous Univariate F-distribution, also known as Fisher-Snedecor distribution.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/F-distribution">Wikipedia - FisherSnedecor distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.FisherSnedecor"/> class.
            </summary>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.FisherSnedecor"/> class.
            </summary>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.DegreesOfFreedom1">
            <summary>
            Gets the first degree of freedom (d1) of the distribution. Range: d1 > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.DegreesOfFreedom2">
            <summary>
            Gets the second degree of freedom (d2) of the distribution. Range: d2 > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.FisherSnedecor.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.FisherSnedecor.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.FisherSnedecor.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.FisherSnedecor.InvCDF(System.Double,System.Double,System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Sample">
            <summary>
            Generates a sample from the <c>FisherSnedecor</c> distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Samples">
            <summary>
            Generates a sequence of samples from the <c>FisherSnedecor</c> distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Generates one sample from the <c>FisherSnedecor</c> distribution without parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <returns>a <c>FisherSnedecor</c> distributed random number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.FisherSnedecor.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.FisherSnedecor.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.FisherSnedecor.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.FisherSnedecor.InverseCumulativeDistribution(System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.FisherSnedecor.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="d1">The first degree of freedom (d1) of the distribution. Range: d1 > 0.</param>
            <param name="d2">The second degree of freedom (d2) of the distribution. Range: d2 > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Gamma">
             <summary>
             Continuous Univariate Gamma distribution.
             For details about this distribution, see
             <a href="http://en.wikipedia.org/wiki/Gamma_distribution">Wikipedia - Gamma distribution</a>.
             </summary>
             <remarks>
             The Gamma distribution is parametrized by a shape and inverse scale parameter. When we want
             to specify a Gamma distribution which is a point distribution we set the shape parameter to be the
             location of the point distribution and the inverse scale as positive infinity. The distribution
             with shape and inverse scale both zero is undefined.
            
             Random number generation for the Gamma distribution is based on the algorithm in:
             "A Simple Method for Generating Gamma Variables" - Marsaglia &amp; Tsang
             ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000, Pages 363–372.
             </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Gamma class.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Gamma class.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.WithShapeScale(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a Gamma distribution from a shape and scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape (k) of the Gamma distribution. Range: k ≥ 0.</param>
            <param name="scale">The scale (θ) of the Gamma distribution. Range: θ ≥ 0</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.WithShapeRate(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a Gamma distribution from a shape and inverse scale parameter. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Shape">
            <summary>
            Gets or sets the shape (k, α) of the Gamma distribution. Range: α ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Rate">
            <summary>
            Gets or sets the rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Scale">
            <summary>
            Gets or sets the scale (θ) of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Mean">
            <summary>
            Gets the mean of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Variance">
            <summary>
            Gets the variance of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.StdDev">
            <summary>
            Gets the standard deviation of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Entropy">
            <summary>
            Gets the entropy of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Skewness">
            <summary>
            Gets the skewness of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Mode">
            <summary>
            Gets the mode of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Median">
            <summary>
            Gets the median of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Minimum">
            <summary>
            Gets the minimum of the Gamma distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Gamma.Maximum">
            <summary>
            Gets the maximum of the Gamma distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Gamma.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Gamma.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Gamma.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Gamma.InvCDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Sample">
            <summary>
            Generates a sample from the Gamma distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Samples">
            <summary>
            Generates a sequence of samples from the Gamma distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            <para>Sampling implementation based on:
            "A Simple Method for Generating Gamma Variables" - Marsaglia &amp; Tsang
            ACM Transactions on Mathematical Software, Vol. 26, No. 3, September 2000, Pages 363–372.</para>
            <para>This method performs no parameter checks.</para>
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>A sample from a Gamma distributed random variable.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Gamma.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Gamma.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Gamma.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Gamma.InverseCumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the Gamma distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Gamma distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the Gamma distribution.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Gamma distribution.
            </summary>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Gamma.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="shape">The shape (k, α) of the Gamma distribution. Range: α ≥ 0.</param>
            <param name="rate">The rate or inverse scale (β) of the Gamma distribution. Range: β ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Geometric">
            <summary>
            Discrete Univariate Geometric distribution.
            The Geometric distribution is a distribution over positive integers parameterized by one positive real number.
            This implementation of the Geometric distribution will never generate 0's.
            <a href="http://en.wikipedia.org/wiki/Geometric_distribution">Wikipedia - geometric distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the Geometric class.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.#ctor(System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Geometric class.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.IsValidParameterSet(System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.P">
            <summary>
            Gets the probability of generating a one. Range: 0 ≤ p ≤ 1.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
            <remarks>Throws a not supported exception.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Geometric.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.PMF(System.Double,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.PMFLn(System.Double,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.CDF(System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Geometric.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.SampleUnchecked(System.Random,System.Double)">
            <summary>
            Returns one sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
            <returns>One sample from the distribution implied by <paramref name="p"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Sample">
            <summary>
            Samples a Geometric distributed random variable.
            </summary>
            <returns>A sample from the Geometric distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Samples">
            <summary>
            Samples an array of Geometric distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Sample(System.Random,System.Double)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Samples(System.Random,System.Double)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Samples(System.Random,System.Int32[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Sample(System.Double)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Samples(System.Double)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Geometric.Samples(System.Int32[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="p">The probability (p) of generating one. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Hypergeometric">
            <summary>
            Discrete Univariate Hypergeometric distribution.
            This distribution is a discrete probability distribution that describes the number of successes in a sequence
            of n draws from a finite population without replacement, just as the binomial distribution
            describes the number of successes for draws with replacement
            <a href="http://en.wikipedia.org/wiki/Hypergeometric_distribution">Wikipedia - Hypergeometric distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Hypergeometric class.
            </summary>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.#ctor(System.Int32,System.Int32,System.Int32,System.Random)">
            <summary>
            Initializes a new instance of the Hypergeometric class.
            </summary>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.IsValidParameterSet(System.Int32,System.Int32,System.Int32)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Population">
            <summary>
            Gets the size of the population (N).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Draws">
            <summary>
            Gets the number of draws without replacement (n).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Success">
            <summary>
            Gets the number successes within the population (K, M).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Hypergeometric.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.PMF(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.PMFLn(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.CDF(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Hypergeometric.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.SampleUnchecked(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a sample from the Hypergeometric distribution without doing parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The n parameter of the distribution.</param>
            <returns>a random number from the Hypergeometric distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Sample">
            <summary>
            Samples a Hypergeometric distributed random variable.
            </summary>
            <returns>The number of successes in n trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Samples">
            <summary>
            Samples an array of Hypergeometric distributed random variables.
            </summary>
            <returns>a sequence of successes in n trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Sample(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Samples(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Samples(System.Random,System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Sample(System.Int32,System.Int32,System.Int32)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Samples(System.Int32,System.Int32,System.Int32)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Hypergeometric.Samples(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="population">The size of the population (N).</param>
            <param name="success">The number successes within the population (K, M).</param>
            <param name="draws">The number of draws without replacement (n).</param>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IContinuousDistribution">
            <summary>
            Continuous Univariate Probability Distribution.
            </summary>
            <seealso cref="T:MathNet.Numerics.Distributions.IDiscreteDistribution"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousDistribution.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousDistribution.Minimum">
            <summary>
            Gets the smallest element in the domain of the distribution which can be represented by a double.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IContinuousDistribution.Maximum">
            <summary>
            Gets the largest element in the domain of the distribution which can be represented by a double.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IContinuousDistribution.Samples">
            <summary>
            Draws a sequence of random samples from the distribution.
            </summary>
            <returns>an infinite sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IDiscreteDistribution">
            <summary>
            Discrete Univariate Probability Distribution.
            </summary>
            <seealso cref="T:MathNet.Numerics.Distributions.IContinuousDistribution"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteDistribution.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteDistribution.Minimum">
            <summary>
            Gets the smallest element in the domain of the distribution which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDiscreteDistribution.Maximum">
            <summary>
            Gets the largest element in the domain of the distribution which can be represented by an integer.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IDiscreteDistribution.Samples">
            <summary>
            Draws a sequence of random samples from the distribution.
            </summary>
            <returns>an infinite sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IDistribution">
            <summary>
            Probability Distribution.
            </summary>
            <seealso cref="T:MathNet.Numerics.Distributions.IContinuousDistribution"/>
            <seealso cref="T:MathNet.Numerics.Distributions.IDiscreteDistribution"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IDistribution.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.InverseGamma">
            <summary>
            Continuous Univariate Inverse Gamma distribution.
            The inverse Gamma distribution is a distribution over the positive real numbers parameterized by
            two positive parameters.
            <a href="http://en.wikipedia.org/wiki/Inverse-gamma_distribution">Wikipedia - InverseGamma distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.InverseGamma"/> class.
            </summary>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.InverseGamma"/> class.
            </summary>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Shape">
            <summary>
            Gets or sets the shape (α) parameter. Range: α > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Scale">
            <summary>
            Gets or sets The scale (β) parameter. Range: β > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <remarks>Throws <see cref="T:System.NotSupportedException"/>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseGamma.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.InverseGamma.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.InverseGamma.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.InverseGamma.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Samples">
            <summary>
            Generates a sequence of samples from the Cauchy distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.InverseGamma.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.InverseGamma.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.InverseGamma.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseGamma.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="scale">The scale (β) of the distribution. Range: β > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.InverseWishart">
            <summary>
            Multivariate Inverse Wishart distribution. This distribution is
            parameterized by the degrees of freedom nu and the scale matrix S. The inverse Wishart distribution
            is the conjugate prior for the covariance matrix of a multivariate normal distribution.
            <a href="http://en.wikipedia.org/wiki/Inverse-Wishart_distribution">Wikipedia - Inverse-Wishart distribution</a>.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.InverseWishart._chol">
            <summary>
            Caches the Cholesky factorization of the scale matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.#ctor(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.InverseWishart"/> class.
            </summary>
            <param name="degreesOfFreedom">The degree of freedom (ν) for the inverse Wishart distribution.</param>
            <param name="scale">The scale matrix (Ψ) for the inverse Wishart distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.#ctor(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.InverseWishart"/> class.
            </summary>
            <param name="degreesOfFreedom">The degree of freedom (ν) for the inverse Wishart distribution.</param>
            <param name="scale">The scale matrix (Ψ) for the inverse Wishart distribution.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.IsValidParameterSet(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="degreesOfFreedom">The degree of freedom (ν) for the inverse Wishart distribution.</param>
            <param name="scale">The scale matrix (Ψ) for the inverse Wishart distribution.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.DegreesOfFreedom">
            <summary>
            Gets or sets the degree of freedom (ν) for the inverse Wishart distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.Scale">
            <summary>
            Gets or sets the scale matrix (Ψ) for the inverse Wishart distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.Mean">
            <summary>
            Gets the mean.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value>The mode of the distribution.</value>
            <remarks>A. O'Hagan, and J. J. Forster (2004). Kendall's Advanced Theory of Statistics: Bayesian Inference. 2B (2 ed.). Arnold. ISBN 0-340-80752-0.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.InverseWishart.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <value>The variance  of the distribution.</value>
            <remarks>Kanti V. Mardia, J. T. Kent and J. M. Bibby (1979). Multivariate Analysis.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.Density(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Evaluates the probability density function for the inverse Wishart distribution.
            </summary>
            <param name="x">The matrix at which to evaluate the density at.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the argument does not have the same dimensions as the scale matrix.</exception>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.Sample">
            <summary>
            Samples an inverse Wishart distributed random variable by sampling
            a Wishart random variable and inverting the matrix.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.InverseWishart.Sample(System.Random,System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Samples an inverse Wishart distributed random variable by sampling
            a Wishart random variable and inverting the matrix.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="degreesOfFreedom">The degree of freedom (ν) for the inverse Wishart distribution.</param>
            <param name="scale">The scale matrix (Ψ) for the inverse Wishart distribution.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.IUnivariateDistribution">
            <summary>
            Univariate Probability Distribution.
            </summary>
            <seealso cref="T:MathNet.Numerics.Distributions.IContinuousDistribution"/>
            <seealso cref="T:MathNet.Numerics.Distributions.IDiscreteDistribution"/>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IUnivariateDistribution.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IUnivariateDistribution.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IUnivariateDistribution.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IUnivariateDistribution.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IUnivariateDistribution.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.IUnivariateDistribution.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.IUnivariateDistribution.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Laplace">
            <summary>
            Continuous Univariate Laplace distribution.
            The Laplace distribution is a distribution over the real numbers parameterized by a mean and
            scale parameter. The PDF is:
                p(x) = \frac{1}{2 * scale} \exp{- |x - mean| / scale}.
            <a href="http://en.wikipedia.org/wiki/Laplace_distribution">Wikipedia - Laplace distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Laplace"/> class (location = 0, scale = 1).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Laplace"/> class.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="scale"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Laplace"/> class.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="scale"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Location">
            <summary>
            Gets the location (μ) of the Laplace distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Scale">
            <summary>
            Gets the scale (b) of the Laplace distribution. Range: b > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Laplace.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Laplace.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Laplace.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Laplace.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Sample">
            <summary>
            Samples a Laplace distributed random variable.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Samples">
            <summary>
            Generates a sample from the Laplace distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Laplace.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Laplace.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Laplace.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Laplace.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (b) of the distribution. Range: b > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.LogNormal">
            <summary>
            Continuous Univariate Log-Normal distribution.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Log-normal_distribution">Wikipedia - Log-Normal distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.LogNormal"/> class.
            The distribution will be initialized with the default <seealso cref="T:System.Random"/>
            random number generator.
            </summary>
            <param name="mu">The log-scale (μ) of the logarithm of the distribution.</param>
            <param name="sigma">The shape (σ) of the logarithm of the distribution. Range: σ ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.LogNormal"/> class.
            The distribution will be initialized with the default <seealso cref="T:System.Random"/>
            random number generator.
            </summary>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.WithMuSigma(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a log-normal distribution with the desired mu and sigma parameters.
            </summary>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
            <returns>A log-normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.WithMeanVariance(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a log-normal distribution with the desired mean and variance.
            </summary>
            <param name="mean">The mean of the log-normal distribution.</param>
            <param name="var">The variance of the log-normal distribution.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
            <returns>A log-normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Estimate(System.Collections.Generic.IEnumerable{System.Double},System.Random)">
            <summary>
            Estimates the log-normal distribution parameters from sample data with maximum-likelihood.
            </summary>
            <param name="samples">The samples to estimate the distribution parameters from.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
            <returns>A log-normal distribution.</returns>
            <remarks>MATLAB: lognfit</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Mu">
            <summary>
            Gets the log-scale (μ) (mean of the logarithm) of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Sigma">
            <summary>
            Gets the shape (σ) (standard deviation of the logarithm) of the distribution. Range: σ ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Mean">
            <summary>
            Gets the mu of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Variance">
            <summary>
            Gets the variance of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.StdDev">
            <summary>
            Gets the standard deviation of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Entropy">
            <summary>
            Gets the entropy of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Skewness">
            <summary>
            Gets the skewness of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Mode">
            <summary>
            Gets the mode of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Median">
            <summary>
            Gets the median of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Minimum">
            <summary>
            Gets the minimum of the log-normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.LogNormal.Maximum">
            <summary>
            Gets the maximum of the log-normal distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.LogNormal.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.LogNormal.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.LogNormal.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.LogNormal.InvCDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Sample">
            <summary>
            Generates a sample from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Samples">
            <summary>
            Generates a sequence of samples from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.LogNormal.Density(System.Double)"/>
            <remarks>MATLAB: lognpdf</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.LogNormal.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.LogNormal.CumulativeDistribution(System.Double)"/>
            <remarks>MATLAB: logncdf</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.LogNormal.InverseCumulativeDistribution(System.Double)"/>
            <remarks>MATLAB: logninv</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the log-normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.LogNormal.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="mu">The log-scale (μ) of the distribution.</param>
            <param name="sigma">The shape (σ) of the distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.MatrixNormal">
            <summary>
            Multivariate Matrix-valued Normal distributions. The distribution
            is parameterized by a mean matrix (M), a covariance matrix for the rows (V) and a covariance matrix
            for the columns (K). If the dimension of M is d-by-m then V is d-by-d and K is m-by-m.
            <a href="http://en.wikipedia.org/wiki/Matrix_normal_distribution">Wikipedia - MatrixNormal distribution</a>.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.MatrixNormal._m">
            <summary>
            The mean of the matrix normal distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.MatrixNormal._v">
            <summary>
            The covariance matrix for the rows.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.MatrixNormal._k">
            <summary>
            The covariance matrix for the columns.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.#ctor(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.MatrixNormal"/> class.
            </summary>
            <param name="m">The mean of the matrix normal.</param>
            <param name="v">The covariance matrix for the rows.</param>
            <param name="k">The covariance matrix for the columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the dimensions of the mean and two covariance matrices don't match.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.#ctor(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.MatrixNormal"/> class.
            </summary>
            <param name="m">The mean of the matrix normal.</param>
            <param name="v">The covariance matrix for the rows.</param>
            <param name="k">The covariance matrix for the columns.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the dimensions of the mean and two covariance matrices don't match.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.IsValidParameterSet(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="m">The mean of the matrix normal.</param>
            <param name="v">The covariance matrix for the rows.</param>
            <param name="k">The covariance matrix for the columns.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MatrixNormal.Mean">
            <summary>
            Gets the mean. (M)
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MatrixNormal.RowCovariance">
            <summary>
            Gets the row covariance. (V)
            </summary>
            <value>The row covariance.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MatrixNormal.ColumnCovariance">
            <summary>
            Gets the column covariance. (K)
            </summary>
            <value>The column covariance.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MatrixNormal.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.Density(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Evaluates the probability density function for the matrix normal distribution.
            </summary>
            <param name="x">The matrix at which to evaluate the density at.</param>
            <returns>the density at <paramref name="x"/></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the argument does not have the correct dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.Sample">
            <summary>
            Samples a matrix normal distributed random variable.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.Sample(System.Random,MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Samples a matrix normal distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="m">The mean of the matrix normal.</param>
            <param name="v">The covariance matrix for the rows.</param>
            <param name="k">The covariance matrix for the columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the dimensions of the mean and two covariance matrices don't match.</exception>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MatrixNormal.SampleVectorNormal(System.Random,MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Samples a vector normal distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean of the vector normal distribution.</param>
            <param name="covariance">The covariance matrix of the vector normal distribution.</param>
            <returns>a sequence of samples from defined distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Multinomial">
            <summary>
            Multivariate Multinomial distribution. For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Multinomial_distribution">Wikipedia - Multinomial distribution</a>.
            </summary>
            <remarks>
            The distribution is parameterized by a vector of ratios: in other words, the parameter
            does not have to be normalized and sum to 1. The reason is that some vectors can't be exactly normalized
            to sum to 1 in floating point representation.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Multinomial._p">
            <summary>
            Stores the normalized multinomial probabilities.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Multinomial._trials">
            <summary>
            The number of trials.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the Multinomial class.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the probabilities are negative or do not sum to one.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.#ctor(System.Double[],System.Int32,System.Random)">
            <summary>
            Initializes a new instance of the Multinomial class.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the probabilities are negative or do not sum to one.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.#ctor(MathNet.Numerics.Statistics.Histogram,System.Int32)">
            <summary>
            Initializes a new instance of the Multinomial class from histogram <paramref name="h"/>. The distribution will
            not be automatically updated when the histogram changes.
            </summary>
            <param name="h">Histogram instance</param>
            <param name="n">The number of trials.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If any of the probabilities are negative or do not sum to one.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="n"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.IsValidParameterSet(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <returns>If any of the probabilities are negative returns <c>false</c>,
            if the sum of parameters is 0.0, or if the number of trials is negative; otherwise <c>true</c>.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.P">
            <summary>
            Gets the proportion of ratios.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.N">
            <summary>
            Gets the number of trials.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Multinomial.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Probability(System.Int32[])">
            <summary>
            Computes values of the probability mass function.
            </summary>
            <param name="x">Non-negative integers x1, ..., xk</param>
            <returns>The probability mass at location <paramref name="x"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="x"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When length of <paramref name="x"/> is not equal to event probabilities count.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.ProbabilityLn(System.Int32[])">
            <summary>
            Computes values of the log probability mass function.
            </summary>
            <param name="x">Non-negative integers x1, ..., xk</param>
            <returns>The log probability mass at location <paramref name="x"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="x"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When length of <paramref name="x"/> is not equal to event probabilities count.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Sample">
            <summary>
            Samples one multinomial distributed random variable.
            </summary>
            <returns>the counts for each of the different possible values.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Samples">
            <summary>
            Samples a sequence multinomially distributed random variables.
            </summary>
            <returns>a sequence of counts for each of the different possible values.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Sample(System.Random,System.Double[],System.Int32)">
            <summary>
            Samples one multinomial distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of trials.</param>
            <returns>the counts for each of the different possible values.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Multinomial.Samples(System.Random,System.Double[],System.Int32)">
            <summary>
            Samples a multinomially distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="p">An array of nonnegative ratios: this array does not need to be normalized
            as this is often impossible using floating point arithmetic.</param>
            <param name="n">The number of variables needed.</param>
            <returns>a sequence of counts for each of the different possible values.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.NegativeBinomial">
            <summary>
            Discrete Univariate Negative Binomial distribution.
            The negative binomial is a distribution over the natural numbers with two parameters r, p. For the special
            case that r is an integer one can interpret the distribution as the number of failures before the r'th success
            when the probability of success is p.
            <a href="http://en.wikipedia.org/wiki/Negative_binomial_distribution">Wikipedia - NegativeBinomial distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.NegativeBinomial"/> class.
            </summary>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.NegativeBinomial"/> class.
            </summary>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.R">
            <summary>
            Gets the number of successes. Range: r ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.P">
            <summary>
            Gets the probability of success. Range: 0 ≤ p ≤ 1.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Mode">
            <summary>
            Gets the mode of the distribution
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NegativeBinomial.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.PMF(System.Double,System.Double,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.PMFLn(System.Double,System.Double,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.NegativeBinomial.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.SampleUnchecked(System.Random,System.Double,System.Double)">
            <summary>
            Samples a negative binomial distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Sample">
            <summary>
            Samples a <c>NegativeBinomial</c> distributed random variable.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Samples">
            <summary>
            Samples an array of <c>NegativeBinomial</c> distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Samples(System.Random,System.Int32[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Sample(System.Double,System.Double)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Samples(System.Double,System.Double)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NegativeBinomial.Samples(System.Int32[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="r">The number of successes (r) required to stop the experiment. Range: r ≥ 0.</param>
            <param name="p">The probability (p) of a trial resulting in success. Range: 0 ≤ p ≤ 1.</param>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Normal">
            <summary>
            Continuous Univariate Normal distribution, also known as Gaussian distribution.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Normal_distribution">Wikipedia - Normal distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.#ctor">
            <summary>
            Initializes a new instance of the Normal class. This is a normal distribution with mean 0.0
            and standard deviation 1.0. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.#ctor(System.Random)">
            <summary>
            Initializes a new instance of the Normal class. This is a normal distribution with mean 0.0
            and standard deviation 1.0. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Normal class with a particular mean and standard deviation. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Normal class with a particular mean and standard deviation. The distribution will
            be initialized with the default <seealso cref="T:System.Random"/> random number generator.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.WithMeanStdDev(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a normal distribution from a mean and standard deviation.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
            <returns>a normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.WithMeanVariance(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a normal distribution from a mean and variance.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="var">The variance (σ^2) of the normal distribution.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
            <returns>A normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.WithMeanPrecision(System.Double,System.Double,System.Random)">
            <summary>
            Constructs a normal distribution from a mean and precision.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="precision">The precision of the normal distribution.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
            <returns>A normal distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Estimate(System.Collections.Generic.IEnumerable{System.Double},System.Random)">
            <summary>
            Estimates the normal distribution parameters from sample data with maximum-likelihood.
            </summary>
            <param name="samples">The samples to estimate the distribution parameters from.</param>
            <param name="randomSource">The random number generator which is used to draw random samples. Optional, can be null.</param>
            <returns>A normal distribution.</returns>
            <remarks>MATLAB: normfit</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Mean">
            <summary>
            Gets the mean (μ) of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.StdDev">
            <summary>
            Gets the standard deviation (σ) of the normal distribution. Range: σ ≥ 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Variance">
            <summary>
            Gets the variance of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Precision">
            <summary>
            Gets the precision of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.RandomSource">
            <summary>
            Gets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Entropy">
            <summary>
            Gets the entropy of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Skewness">
            <summary>
            Gets the skewness of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Mode">
            <summary>
            Gets the mode of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Median">
            <summary>
            Gets the median of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Minimum">
            <summary>
            Gets the minimum of the normal distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Normal.Maximum">
            <summary>
            Gets the maximum of the normal distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Normal.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Normal.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Normal.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Normal.InvCDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Sample">
            <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Samples">
            <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Normal.Density(System.Double)"/>
            <remarks>MATLAB: normpdf</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Normal.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Normal.CumulativeDistribution(System.Double)"/>
            <remarks>MATLAB: normcdf</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Normal.InverseCumulativeDistribution(System.Double)"/>
            <remarks>MATLAB: norminv</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the normal distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Normal.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="mean">The mean (μ) of the normal distribution.</param>
            <param name="stddev">The standard deviation (σ) of the normal distribution. Range: σ ≥ 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.MeanPrecisionPair">
            <summary>
            This structure represents the type over which the <see cref="T:MathNet.Numerics.Distributions.NormalGamma"/> distribution
            is defined.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.MeanPrecisionPair._mean">
            <summary>
            The mean value.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.MeanPrecisionPair._precision">
            <summary>
            The precision value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.MeanPrecisionPair.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.MeanPrecisionPair"/> struct.
            </summary>
            <param name="m">The mean of the pair.</param>
            <param name="p">The precision of the pair.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MeanPrecisionPair.Mean">
            <summary>
            Gets or sets the mean of the pair.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.MeanPrecisionPair.Precision">
            <summary>
            Gets or sets the precision of the pair.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Distributions.NormalGamma">
            <summary>
            Multivariate Normal-Gamma Distribution.
            <para>The <see cref="T:MathNet.Numerics.Distributions.NormalGamma"/> distribution is the conjugate prior distribution for the <see cref="T:MathNet.Numerics.Distributions.Normal"/>
            distribution. It specifies a prior over the mean and precision of the <see cref="T:MathNet.Numerics.Distributions.Normal"/> distribution.</para>
            <para>It is parameterized by four numbers: the mean location, the mean scale, the precision shape and the
            precision inverse scale.</para>
            <para>The distribution NG(mu, tau | mloc,mscale,psscale,pinvscale) = Normal(mu | mloc, 1/(mscale*tau)) * Gamma(tau | psscale,pinvscale).</para>
            <para>The following degenerate cases are special: when the precision is known,
            the precision shape will encode the value of the precision while the precision inverse scale is positive
            infinity. When the mean is known, the mean location will encode the value of the mean while the scale
            will be positive infinity. A completely degenerate NormalGamma distribution with known mean and precision is possible as well.</para>
            <a href="http://en.wikipedia.org/wiki/Normal-gamma_distribution">Wikipedia - Normal-Gamma distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.NormalGamma"/> class.
            </summary>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precisionShape">The shape of the precision.</param>
            <param name="precisionInverseScale">The inverse scale of the precision.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.#ctor(System.Double,System.Double,System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.NormalGamma"/> class.
            </summary>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precisionShape">The shape of the precision.</param>
            <param name="precisionInverseScale">The inverse scale of the precision.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.IsValidParameterSet(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precShape">The shape of the precision.</param>
            <param name="precInvScale">The inverse scale of the precision.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.MeanLocation">
            <summary>
            Gets the location of the mean.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.MeanScale">
            <summary>
            Gets the scale of the mean.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.PrecisionShape">
            <summary>
            Gets the shape of the precision.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.PrecisionInverseScale">
            <summary>
            Gets the inverse scale of the precision.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.MeanMarginal">
            <summary>
            Returns the marginal distribution for the mean of the <c>NormalGamma</c> distribution.
            </summary>
            <returns>the marginal distribution for the mean of the <c>NormalGamma</c> distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.PrecisionMarginal">
            <summary>
            Returns the marginal distribution for the precision of the <see cref="T:MathNet.Numerics.Distributions.NormalGamma"/> distribution.
            </summary>
            <returns>The marginal distribution for the precision of the <see cref="T:MathNet.Numerics.Distributions.NormalGamma"/> distribution/</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.NormalGamma.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Density(MathNet.Numerics.Distributions.MeanPrecisionPair)">
            <summary>
            Evaluates the probability density function for a NormalGamma distribution.
            </summary>
            <param name="mp">The mean/precision pair of the distribution</param>
            <returns>Density value</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Density(System.Double,System.Double)">
            <summary>
            Evaluates the probability density function for a NormalGamma distribution.
            </summary>
            <param name="mean">The mean of the distribution</param>
            <param name="prec">The precision of the distribution</param>
            <returns>Density value</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.DensityLn(MathNet.Numerics.Distributions.MeanPrecisionPair)">
            <summary>
            Evaluates the log probability density function for a NormalGamma distribution.
            </summary>
            <param name="mp">The mean/precision pair of the distribution</param>
            <returns>The log of the density value</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.DensityLn(System.Double,System.Double)">
            <summary>
            Evaluates the log probability density function for a NormalGamma distribution.
            </summary>
            <param name="mean">The mean of the distribution</param>
            <param name="prec">The precision of the distribution</param>
            <returns>The log of the density value</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Sample">
            <summary>
            Generates a sample from the <c>NormalGamma</c> distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Samples">
            <summary>
            Generates a sequence of samples from the <c>NormalGamma</c> distribution
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Sample(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the <c>NormalGamma</c> distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precisionShape">The shape of the precision.</param>
            <param name="precisionInverseScale">The inverse scale of the precision.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.NormalGamma.Samples(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the NormalGamma distribution
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="meanLocation">The location of the mean.</param>
            <param name="meanScale">The scale of the mean.</param>
            <param name="precisionShape">The shape of the precision.</param>
            <param name="precisionInvScale">The inverse scale of the precision.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Pareto">
            <summary>
            Continuous Univariate Pareto distribution.
            The Pareto distribution is a power law probability distribution that coincides with social,
            scientific, geophysical, actuarial, and many other types of observable phenomena.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Pareto_distribution">Wikipedia - Pareto distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Pareto"/> class.
            </summary>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="scale"/> or <paramref name="shape"/> are negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Pareto"/> class.
            </summary>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="scale"/> or <paramref name="shape"/> are negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Scale">
            <summary>
            Gets the scale (xm) of the distribution. Range: xm > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Shape">
            <summary>
            Gets the shape (α) of the distribution. Range: α > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Pareto.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Pareto.PDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Pareto.PDFLn(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Pareto.CDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Pareto.InvCDF(System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Samples">
            <summary>
            Generates a sequence of samples from the Pareto distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Pareto.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Pareto.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Pareto.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.InvCDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Pareto.InverseCumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Pareto.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="scale">The scale (xm) of the distribution. Range: xm > 0.</param>
            <param name="shape">The shape (α) of the distribution. Range: α > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Poisson">
            <summary>
            Discrete Univariate Poisson distribution.
            </summary>
            <remarks>
            <para>Distribution is described at <a href="http://en.wikipedia.org/wiki/Poisson_distribution"> Wikipedia - Poisson distribution</a>.</para>
            <para>Knuth's method is used to generate Poisson distributed random variables.</para>
            <para>f(x) = exp(-λ)*λ^x/x!;</para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Poisson"/> class.
            </summary>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="lambda"/> is equal or less then 0.0.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.#ctor(System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Poisson"/> class.
            </summary>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="lambda"/> is equal or less then 0.0.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.IsValidParameterSet(System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Lambda">
            <summary>
            Gets the Poisson distribution parameter λ. Range: λ > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.RandomSource">
            <summary>
            Gets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
            <remarks>Approximation, see Wikipedia <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Poisson distribution</a></remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Poisson.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <remarks>Approximation, see Wikipedia <a href="http://en.wikipedia.org/wiki/Poisson_distribution">Poisson distribution</a></remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.PMF(System.Double,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.PMFLn(System.Double,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.CDF(System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Poisson.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.SampleUnchecked(System.Random,System.Double)">
            <summary>
            Generates one sample from the Poisson distribution.
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>A random sample from the Poisson distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.DoSampleShort(System.Random,System.Double)">
            <summary>
            Generates one sample from the Poisson distribution by Knuth's method.
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>A random sample from the Poisson distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.DoSampleLarge(System.Random,System.Double)">
            <summary>
            Generates one sample from the Poisson distribution by "Rejection method PA".
            </summary>
            <param name="rnd">The random source to use.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>A random sample from the Poisson distribution.</returns>
            <remarks>"Rejection method PA" from "The Computer Generation of Poisson Random Variables" by A. C. Atkinson,
            Journal of the Royal Statistical Society Series C (Applied Statistics) Vol. 28, No. 1. (1979)
            The article is on pages 29-35. The algorithm given here is on page 32. </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Sample">
            <summary>
            Samples a Poisson distributed random variable.
            </summary>
            <returns>A sample from the Poisson distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Samples">
            <summary>
            Samples an array of Poisson distributed random variables.
            </summary>
            <returns>a sequence of successes in N trials.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Sample(System.Random,System.Double)">
            <summary>
            Samples a Poisson distributed random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>A sample from the Poisson distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Samples(System.Random,System.Double)">
            <summary>
            Samples a sequence of Poisson distributed random variables.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Samples(System.Random,System.Int32[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Sample(System.Double)">
            <summary>
            Samples a Poisson distributed random variable.
            </summary>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>A sample from the Poisson distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Samples(System.Double)">
            <summary>
            Samples a sequence of Poisson distributed random variables.
            </summary>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Poisson.Samples(System.Int32[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="lambda">The lambda (λ) parameter of the Poisson distribution. Range: λ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Rayleigh">
            <summary>
            Continuous Univariate Rayleigh distribution.
            The Rayleigh distribution (pronounced /ˈreɪli/) is a continuous probability distribution. As an
            example of how it arises, the wind speed will have a Rayleigh distribution if the components of
            the two-dimensional wind velocity vector are uncorrelated and normally distributed with equal variance.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Rayleigh_distribution">Wikipedia - Rayleigh distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Rayleigh"/> class.
            </summary>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="scale"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.#ctor(System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Rayleigh"/> class.
            </summary>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="scale"/> is negative.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.IsValidParameterSet(System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Scale">
            <summary>
            Gets the scale (σ) of the distribution. Range: σ > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Rayleigh.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Rayleigh.PDF(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Rayleigh.PDFLn(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Rayleigh.CDF(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Rayleigh.InvCDF(System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Samples">
            <summary>
            Generates a sequence of samples from the Rayleigh distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.PDF(System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Rayleigh.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.PDFLn(System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Rayleigh.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.CDF(System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Rayleigh.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.InvCDF(System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Rayleigh.InverseCumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Sample(System.Random,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Samples(System.Random,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Samples(System.Random,System.Double[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Sample(System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Samples(System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Rayleigh.Samples(System.Double[],System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Stable">
            <summary>
            Continuous Univariate Stable distribution.
            A random variable is said to be stable (or to have a stable distribution) if it has
            the property that a linear combination of two independent copies of the variable has
            the same distribution, up to location and scale parameters.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Stable_distribution">Wikipedia - Stable distribution</a>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Stable"/> class.
            </summary>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.#ctor(System.Double,System.Double,System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Stable"/> class.
            </summary>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.IsValidParameterSet(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Alpha">
            <summary>
            Gets the stability (α) of the distribution. Range: 2 ≥ α > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Beta">
            <summary>
            Gets The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Scale">
            <summary>
            Gets the scale (c) of the distribution. Range: c > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Location">
            <summary>
            Gets the location (μ) of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Entropy">
            <summary>
            Gets he entropy of the distribution.
            </summary>
            <remarks>Always throws a not supported exception.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
            <remarks>Throws a not supported exception of <c>Alpha</c> != 2.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <remarks>Throws a not supported exception if <c>Beta != 0</c>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <remarks>Throws a not supported exception if <c>Beta != 0</c>.</remarks>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Stable.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <remarks>Throws a not supported exception if <c>Alpha != 2</c>, <c>(Alpha != 1 and Beta !=0)</c>, or <c>(Alpha != 0.5 and Beta != 1)</c></remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.SampleUnchecked(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Samples">
            <summary>
            Generates a sequence of samples from the Stable distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.PDF(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Stable.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.PDFLn(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Stable.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.CDF(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Stable.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Sample(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Samples(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Samples(System.Random,System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Sample(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the distribution.
            </summary>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Samples(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the distribution.
            </summary>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Stable.Samples(System.Double[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="alpha">The stability (α) of the distribution. Range: 2 ≥ α > 0.</param>
            <param name="beta">The skewness (β) of the distribution. Range: 1 ≥ β ≥ -1.</param>
            <param name="scale">The scale (c) of the distribution. Range: c > 0.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.StudentT">
            <summary>
            Continuous Univariate Student's T-distribution.
            Implements the univariate Student t-distribution. For details about this
            distribution, see
            <a href="http://en.wikipedia.org/wiki/Student%27s_t-distribution">
            Wikipedia - Student's t-distribution</a>.
            </summary>
            <remarks><para>We use a slightly generalized version (compared to
            Wikipedia) of the Student t-distribution. Namely, one which also
            parameterizes the location and scale. See the book "Bayesian Data
            Analysis" by Gelman et al. for more details.</para>
            <para>The density of the Student t-distribution  p(x|mu,scale,dof) =
            Gamma((dof+1)/2) (1 + (x - mu)^2 / (scale * scale * dof))^(-(dof+1)/2) /
            (Gamma(dof/2)*Sqrt(dof*pi*scale)).</para>
            <para>The distribution will use the <see cref="T:System.Random"/> by
            default.  Users can get/set the random number generator by using the
            <see cref="P:MathNet.Numerics.Distributions.StudentT.RandomSource"/> property.</para>
            <para>The statistics classes will check all the incoming parameters
            whether they are in the allowed range. This might involve heavy
            computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.#ctor">
            <summary>
            Initializes a new instance of the StudentT class. This is a Student t-distribution with location 0.0
            scale 1.0 and degrees of freedom 1.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the StudentT class with a particular location, scale and degrees of
            freedom.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.#ctor(System.Double,System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the StudentT class with a particular location, scale and degrees of
            freedom.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.IsValidParameterSet(System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Location">
            <summary>
            Gets the location (μ) of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Scale">
            <summary>
            Gets the scale (σ) of the Student t-distribution. Range: σ > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.DegreesOfFreedom">
            <summary>
            Gets the degrees of freedom (ν) of the Student t-distribution. Range: ν > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Mean">
            <summary>
            Gets the mean of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Variance">
            <summary>
            Gets the variance of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.StdDev">
            <summary>
            Gets the standard deviation of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Entropy">
            <summary>
            Gets the entropy of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Skewness">
            <summary>
            Gets the skewness of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Mode">
            <summary>
            Gets the mode of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Median">
            <summary>
            Gets the median of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Minimum">
            <summary>
            Gets the minimum of the Student t-distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.StudentT.Maximum">
            <summary>
            Gets the maximum of the Student t-distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.StudentT.InvCDF(System.Double,System.Double,System.Double,System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.SampleUnchecked(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Samples student-t distributed random variables.
            </summary>
            <remarks>The algorithm is method 2 in section 5, chapter 9
            in L. Devroye's "Non-Uniform Random Variate Generation"</remarks>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <returns>a random number from the standard student-t distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Sample">
            <summary>
            Generates a sample from the Student t-distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Samples">
            <summary>
            Generates a sequence of samples from the Student t-distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.PDF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.StudentT.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.PDFLn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.StudentT.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.CDF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.StudentT.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.InvCDF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.StudentT.InverseCumulativeDistribution(System.Double)"/>
            <remarks>WARNING: currently not an explicit implementation, hence slow and unreliable.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Sample(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the Student t-distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Samples(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Student t-distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Samples(System.Random,System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Sample(System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the Student t-distribution.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Samples(System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Student t-distribution using the <i>Box-Muller</i> algorithm.
            </summary>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.StudentT.Samples(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="location">The location (μ) of the distribution.</param>
            <param name="scale">The scale (σ) of the distribution. Range: σ > 0.</param>
            <param name="freedom">The degrees of freedom (ν) for the distribution. Range: ν > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Triangular">
            <summary>
            Triangular distribution.
            For details, see <a href="https://en.wikipedia.org/wiki/Triangular_distribution">Wikipedia - Triangular distribution</a>.
            </summary>
            <remarks><para>The distribution will use the <see cref="T:System.Random"/> by default.
            Users can get/set the random number generator by using the <see cref="P:MathNet.Numerics.Distributions.Triangular.RandomSource"/> property.</para>
            <para>The statistics classes will check whether all the incoming parameters are in the allowed range. This might involve heavy computation. Optionally, by setting Control.CheckDistributionParameters
            to <c>false</c>, all parameter checks can be turned off.</para></remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Triangular class with the given lower bound, upper bound and mode.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <exception cref="T:System.ArgumentException">If the upper bound is smaller than the mode or if the mode is smaller than the lower bound.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.#ctor(System.Double,System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Triangular class with the given lower bound, upper bound and mode.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
            <exception cref="T:System.ArgumentException">If the upper bound is smaller than the mode or if the mode is smaller than the lower bound.</exception>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.IsValidParameterSet(System.Double,System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.LowerBound">
            <summary>
            Gets the lower bound of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.UpperBound">
            <summary>
            Gets the upper bound of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.Mode">
            <summary>
            Gets or sets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
            <value></value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.Minimum">
            <summary>
            Gets the minimum of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Triangular.Maximum">
            <summary>
            Gets the maximum of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Triangular.PDF(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Triangular.PDFLn(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Triangular.CDF(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.InverseCumulativeDistribution(System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Triangular.InvCDF(System.Double,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.Sample">
            <summary>
            Generates a sample from the <c>Triangular</c> distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.Samples">
            <summary>
            Generates a sequence of samples from the <c>Triangular</c> distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.PDF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Triangular.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.PDFLn(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Triangular.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.CDF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Triangular.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.InvCDF(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the inverse of the cumulative distribution function (InvCDF) for the distribution
            at the given probability. This is also known as the quantile or percent point function.
            </summary>
            <param name="p">The location at which to compute the inverse cumulative density.</param>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <returns>the inverse cumulative density at <paramref name="p"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Triangular.InverseCumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.Sample(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the <c>Triangular</c> distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.Samples(System.Random,System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the <c>Triangular</c> distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.Samples(System.Random,System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.Sample(System.Double,System.Double,System.Double)">
            <summary>
            Generates a sample from the <c>Triangular</c> distribution.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.Samples(System.Double,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the <c>Triangular</c> distribution.
            </summary>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Triangular.Samples(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="lower">Lower bound. Range: lower ≤ mode ≤ upper</param>
            <param name="upper">Upper bound. Range: lower ≤ mode ≤ upper</param>
            <param name="mode">Mode (most frequent value).  Range: lower ≤ mode ≤ upper</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Weibull">
            <summary>
            Continuous Univariate Weibull distribution.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Weibull_distribution">Wikipedia - Weibull distribution</a>.
            </summary>
            <remarks>
            The Weibull distribution is parametrized by a shape and scale parameter.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Weibull._scalePowShapeInv">
            <summary>
            Reusable intermediate result 1 / (_scale ^ _shape)
            </summary>
            <remarks>
            By caching this parameter we can get slightly better numerics precision
            in certain constellations without any additional computations.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Weibull class.
            </summary>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.#ctor(System.Double,System.Double,System.Random)">
            <summary>
            Initializes a new instance of the Weibull class.
            </summary>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.IsValidParameterSet(System.Double,System.Double)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Shape">
            <summary>
            Gets the shape (k) of the Weibull distribution. Range: k > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Scale">
            <summary>
            Gets the scale (λ) of the Weibull distribution. Range: λ > 0.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Mean">
            <summary>
            Gets the mean of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Variance">
            <summary>
            Gets the variance of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.StdDev">
            <summary>
            Gets the standard deviation of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Entropy">
            <summary>
            Gets the entropy of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Skewness">
            <summary>
            Gets the skewness of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Mode">
            <summary>
            Gets the mode of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Median">
            <summary>
            Gets the median of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Minimum">
            <summary>
            Gets the minimum of the Weibull distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Weibull.Maximum">
            <summary>
            Gets the maximum of the Weibull distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Density(System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.DensityLn(System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="x">The location at which to compute the log density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Sample">
            <summary>
            Generates a sample from the Weibull distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Samples(System.Double[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Samples">
            <summary>
            Generates a sequence of samples from the Weibull distribution.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.PDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the probability density of the distribution (PDF) at x, i.e. ∂P(X ≤ x)/∂x.
            </summary>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Weibull.Density(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.PDFLn(System.Double,System.Double,System.Double)">
            <summary>
            Computes the log probability density of the distribution (lnPDF) at x, i.e. ln(∂P(X ≤ x)/∂x).
            </summary>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
            <param name="x">The location at which to compute the density.</param>
            <returns>the log density at <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Weibull.DensityLn(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.CDF(System.Double,System.Double,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Weibull.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Estimate(System.Collections.Generic.IEnumerable{System.Double},System.Random)">
            <summary>
            Implemented according to: Parameter estimation of the Weibull probability distribution, 1994, Hongzhu Qiao, Chris P. Tsokos 
            </summary>
            <param name="samples"></param>
            <param name="randomSource"></param>
            <returns>Returns a Weibull distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Sample(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sample from the Weibull distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Samples(System.Random,System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Weibull distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Samples(System.Random,System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Sample(System.Double,System.Double)">
            <summary>
            Generates a sample from the Weibull distribution.
            </summary>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Samples(System.Double,System.Double)">
            <summary>
            Generates a sequence of samples from the Weibull distribution.
            </summary>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Weibull.Samples(System.Double[],System.Double,System.Double)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="shape">The shape (k) of the Weibull distribution. Range: k > 0.</param>
            <param name="scale">The scale (λ) of the Weibull distribution. Range: λ > 0.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Wishart">
            <summary>
            Multivariate Wishart distribution. This distribution is
            parameterized by the degrees of freedom nu and the scale matrix S. The Wishart distribution
            is the conjugate prior for the precision (inverse covariance) matrix of the multivariate
            normal distribution.
            <a href="http://en.wikipedia.org/wiki/Wishart_distribution">Wikipedia - Wishart distribution</a>.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Wishart._degreesOfFreedom">
            <summary>
            The degrees of freedom for the Wishart distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Wishart._scale">
            <summary>
            The scale matrix for the Wishart distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Wishart._chol">
            <summary>
            Caches the Cholesky factorization of the scale matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.#ctor(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Wishart"/> class.
            </summary>
            <param name="degreesOfFreedom">The degrees of freedom (n) for the Wishart distribution.</param>
            <param name="scale">The scale matrix (V) for the Wishart distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.#ctor(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Wishart"/> class.
            </summary>
            <param name="degreesOfFreedom">The degrees of freedom (n) for the Wishart distribution.</param>
            <param name="scale">The scale matrix (V) for the Wishart distribution.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.IsValidParameterSet(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="degreesOfFreedom">The degrees of freedom (n) for the Wishart distribution.</param>
            <param name="scale">The scale matrix (V) for the Wishart distribution.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.DegreesOfFreedom">
            <summary>
            Gets or sets the degrees of freedom (n) for the Wishart distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.Scale">
            <summary>
            Gets or sets the scale matrix (V) for the Wishart distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
            <value>The mean of the distribution.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
            <value>The mode of the distribution.</value>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Wishart.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
            <value>The variance  of the distribution.</value>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.Density(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Evaluates the probability density function for the Wishart distribution.
            </summary>
            <param name="x">The matrix at which to evaluate the density at.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the argument does not have the same dimensions as the scale matrix.</exception>
            <returns>the density at <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.Sample">
            <summary>
            Samples a Wishart distributed random variable using the method
                Algorithm AS 53: Wishart Variate Generator
                W. B. Smith and R. R. Hocking
                Applied Statistics, Vol. 21, No. 3 (1972), pp. 341-345
            </summary>
            <returns>A random number from this distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.Sample(System.Random,System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Samples a Wishart distributed random variable using the method
                Algorithm AS 53: Wishart Variate Generator
                W. B. Smith and R. R. Hocking
                Applied Statistics, Vol. 21, No. 3 (1972), pp. 341-345
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="degreesOfFreedom">The degrees of freedom (n) for the Wishart distribution.</param>
            <param name="scale">The scale matrix (V) for the Wishart distribution.</param>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Wishart.DoSample(System.Random,System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Factorization.Cholesky{System.Double})">
            <summary>
            Samples the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="degreesOfFreedom">The degrees of freedom (n) for the Wishart distribution.</param>
            <param name="scale">The scale matrix (V) for the Wishart distribution.</param>
            <param name="chol">The cholesky decomposition to use.</param>
            <returns>a random number from the distribution.</returns>
        </member>
        <member name="T:MathNet.Numerics.Distributions.Zipf">
            <summary>
            Discrete Univariate Zipf distribution.
            Zipf's law, an empirical law formulated using mathematical statistics, refers to the fact
            that many types of data studied in the physical and social sciences can be approximated with
            a Zipfian distribution, one of a family of related discrete power law probability distributions.
            For details about this distribution, see
            <a href="http://en.wikipedia.org/wiki/Zipf%27s_law">Wikipedia - Zipf distribution</a>.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Zipf._s">
            <summary>
            The s parameter of the distribution.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Distributions.Zipf._n">
            <summary>
            The n parameter of the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Zipf"/> class.
            </summary>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.#ctor(System.Double,System.Int32,System.Random)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Distributions.Zipf"/> class.
            </summary>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
            <param name="randomSource">The random number generator which is used to draw random samples.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.ToString">
            <summary>
            A string representation of the distribution.
            </summary>
            <returns>a string representation of the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.IsValidParameterSet(System.Double,System.Int32)">
            <summary>
            Tests whether the provided values are valid parameters for this distribution.
            </summary>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.S">
            <summary>
            Gets or sets the s parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.N">
            <summary>
            Gets or sets the n parameter of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.RandomSource">
            <summary>
            Gets or sets the random number generator which is used to draw random samples.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Mean">
            <summary>
            Gets the mean of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Variance">
            <summary>
            Gets the variance of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.StdDev">
            <summary>
            Gets the standard deviation of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Entropy">
            <summary>
            Gets the entropy of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Skewness">
            <summary>
            Gets the skewness of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Mode">
            <summary>
            Gets the mode of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Median">
            <summary>
            Gets the median of the distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Minimum">
            <summary>
            Gets the smallest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Distributions.Zipf.Maximum">
            <summary>
            Gets the largest element in the domain of the distributions which can be represented by an integer.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Probability(System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.ProbabilityLn(System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.CumulativeDistribution(System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.PMF(System.Double,System.Int32,System.Int32)">
            <summary>
            Computes the probability mass (PMF) at k, i.e. P(X = k).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the probability mass function.</param>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
            <returns>the probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.PMFLn(System.Double,System.Int32,System.Int32)">
            <summary>
            Computes the log probability mass (lnPMF) at k, i.e. ln(P(X = k)).
            </summary>
            <param name="k">The location in the domain where we want to evaluate the log probability mass function.</param>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
            <returns>the log probability mass at location <paramref name="k"/>.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.CDF(System.Double,System.Int32,System.Double)">
            <summary>
            Computes the cumulative distribution (CDF) of the distribution at x, i.e. P(X ≤ x).
            </summary>
            <param name="x">The location at which to compute the cumulative distribution function.</param>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
            <returns>the cumulative distribution at location <paramref name="x"/>.</returns>
            <seealso cref="M:MathNet.Numerics.Distributions.Zipf.CumulativeDistribution(System.Double)"/>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.SampleUnchecked(System.Random,System.Double,System.Int32)">
            <summary>
            Generates a sample from the Zipf distribution without doing parameter checking.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
            <returns>a random number from the Zipf distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Sample">
            <summary>
            Draws a random sample from the distribution.
            </summary>
            <returns>a sample from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Samples(System.Int32[])">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Samples">
            <summary>
            Samples an array of zipf distributed random variables.
            </summary>
            <returns>a sequence of samples from the distribution.</returns>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Sample(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Samples(System.Random,System.Double,System.Int32)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Samples(System.Random,System.Int32[],System.Double,System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="rnd">The random number generator to use.</param>
            <param name="values">The array to fill with the samples.</param>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Sample(System.Double,System.Int32)">
            <summary>
            Samples a random variable.
            </summary>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Samples(System.Double,System.Int32)">
            <summary>
            Samples a sequence of this random variable.
            </summary>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="M:MathNet.Numerics.Distributions.Zipf.Samples(System.Int32[],System.Double,System.Int32)">
            <summary>
            Fills an array with samples generated from the distribution.
            </summary>
            <param name="values">The array to fill with the samples.</param>
            <param name="s">The s parameter of the distribution.</param>
            <param name="n">The n parameter of the distribution.</param>
        </member>
        <member name="T:MathNet.Numerics.Euclid">
            <summary>
            Integer number theory functions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Euclid.Modulus(System.Double,System.Double)">
            <summary>
            Canonical Modulus. The result has the sign of the divisor.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Euclid.Modulus(System.Single,System.Single)">
            <summary>
            Canonical Modulus. The result has the sign of the divisor.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Euclid.Modulus(System.Int32,System.Int32)">
            <summary>
            Canonical Modulus. The result has the sign of the divisor.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Euclid.Modulus(System.Int64,System.Int64)">
            <summary>
            Canonical Modulus. The result has the sign of the divisor.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Euclid.Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Canonical Modulus. The result has the sign of the divisor.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Euclid.Remainder(System.Double,System.Double)">
            <summary>
            Remainder (% operator). The result has the sign of the dividend.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Euclid.Remainder(System.Single,System.Single)">
            <summary>
            Remainder (% operator). The result has the sign of the dividend.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Euclid.Remainder(System.Int32,System.Int32)">
            <summary>
            Remainder (% operator). The result has the sign of the dividend.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Euclid.Remainder(System.Int64,System.Int64)">
            <summary>
            Remainder (% operator). The result has the sign of the dividend.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Euclid.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Remainder (% operator). The result has the sign of the dividend.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Euclid.IsEven(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is an even number.
            </summary>
            <param name="number">The number to very whether it's even.</param>
            <returns>True if and only if it is an even number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.IsEven(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is an even number.
            </summary>
            <param name="number">The number to very whether it's even.</param>
            <returns>True if and only if it is an even number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.IsOdd(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is an odd number.
            </summary>
            <param name="number">The number to very whether it's odd.</param>
            <returns>True if and only if it is an odd number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.IsOdd(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is an odd number.
            </summary>
            <param name="number">The number to very whether it's odd.</param>
            <returns>True if and only if it is an odd number.</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.IsPowerOfTwo(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is a perfect power of two.
            </summary>
            <param name="number">The number to very whether it's a power of two.</param>
            <returns>True if and only if it is a power of two.</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.IsPowerOfTwo(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is a perfect power of two.
            </summary>
            <param name="number">The number to very whether it's a power of two.</param>
            <returns>True if and only if it is a power of two.</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.IsPerfectSquare(System.Int32)">
            <summary>
            Find out whether the provided 32 bit integer is a perfect square, i.e. a square of an integer.
            </summary>
            <param name="number">The number to very whether it's a perfect square.</param>
            <returns>True if and only if it is a perfect square.</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.IsPerfectSquare(System.Int64)">
            <summary>
            Find out whether the provided 64 bit integer is a perfect square, i.e. a square of an integer.
            </summary>
            <param name="number">The number to very whether it's a perfect square.</param>
            <returns>True if and only if it is a perfect square.</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.PowerOfTwo(System.Int32)">
            <summary>
            Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 31).
            </summary>
            <param name="exponent">The exponent to raise 2 up to.</param>
            <returns>2 ^ exponent.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Euclid.PowerOfTwo(System.Int64)">
            <summary>
            Raises 2 to the provided integer exponent (0 &lt;= exponent &lt; 63).
            </summary>
            <param name="exponent">The exponent to raise 2 up to.</param>
            <returns>2 ^ exponent.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Euclid.Log2(System.Int32)">
            <summary>
            Evaluate the binary logarithm of an integer number.
            </summary>
            <remarks>Two-step method using a De Bruijn-like sequence table lookup.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Euclid.CeilingToPowerOfTwo(System.Int32)">
            <summary>
            Find the closest perfect power of two that is larger or equal to the provided
            32 bit integer.
            </summary>
            <param name="number">The number of which to find the closest upper power of two.</param>
            <returns>A power of two.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Euclid.CeilingToPowerOfTwo(System.Int64)">
            <summary>
            Find the closest perfect power of two that is larger or equal to the provided
            64 bit integer.
            </summary>
            <param name="number">The number of which to find the closest upper power of two.</param>
            <returns>A power of two.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MathNet.Numerics.Euclid.GreatestCommonDivisor(System.Int64,System.Int64)">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of two integers using Euclid's algorithm.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.GreatestCommonDivisor(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of integers using Euclid's
            algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.GreatestCommonDivisor(System.Int64[])">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.ExtendedGreatestCommonDivisor(System.Int64,System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Computes the extended greatest common divisor, such that a*x + b*y = <c>gcd</c>(a,b).
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <param name="x">Resulting x, such that a*x + b*y = <c>gcd</c>(a,b).</param>
            <param name="y">Resulting y, such that a*x + b*y = <c>gcd</c>(a,b)</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
            <example>
            <code>
            long x,y,d;
            d = Fn.GreatestCommonDivisor(45,18,out x, out y);
            -> d == 9 &amp;&amp; x == 1 &amp;&amp; y == -2
            </code>
            The <c>gcd</c> of 45 and 18 is 9: 18 = 2*9, 45 = 5*9. 9 = 1*45 -2*18, therefore x=1 and y=-2.
            </example>
        </member>
        <member name="M:MathNet.Numerics.Euclid.LeastCommonMultiple(System.Int64,System.Int64)">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of two integers using Euclid's algorithm.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Least common multiple <c>lcm</c>(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.LeastCommonMultiple(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.LeastCommonMultiple(System.Int64[])">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of integers using Euclid's algorithm.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of two big integers.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.GreatestCommonDivisor(System.Collections.Generic.IList{System.Numerics.BigInteger})">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.GreatestCommonDivisor(System.Numerics.BigInteger[])">
            <summary>
            Returns the greatest common divisor (<c>gcd</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Greatest common divisor <c>gcd</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.ExtendedGreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <summary>
            Computes the extended greatest common divisor, such that a*x + b*y = <c>gcd</c>(a,b).
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <param name="x">Resulting x, such that a*x + b*y = <c>gcd</c>(a,b).</param>
            <param name="y">Resulting y, such that a*x + b*y = <c>gcd</c>(a,b)</param>
            <returns>Greatest common divisor <c>gcd</c>(a,b)</returns>
            <example>
            <code>
            long x,y,d;
            d = Fn.GreatestCommonDivisor(45,18,out x, out y);
            -> d == 9 &amp;&amp; x == 1 &amp;&amp; y == -2
            </code>
            The <c>gcd</c> of 45 and 18 is 9: 18 = 2*9, 45 = 5*9. 9 = 1*45 -2*18, therefore x=1 and y=-2.
            </example>
        </member>
        <member name="M:MathNet.Numerics.Euclid.LeastCommonMultiple(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of two big integers.
            </summary>
            <param name="a">First Integer: a.</param>
            <param name="b">Second Integer: b.</param>
            <returns>Least common multiple <c>lcm</c>(a,b)</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.LeastCommonMultiple(System.Collections.Generic.IList{System.Numerics.BigInteger})">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="M:MathNet.Numerics.Euclid.LeastCommonMultiple(System.Numerics.BigInteger[])">
            <summary>
            Returns the least common multiple (<c>lcm</c>) of a set of big integers.
            </summary>
            <param name="integers">List of Integers.</param>
            <returns>Least common multiple <c>lcm</c>(list of integers)</returns>
        </member>
        <member name="T:MathNet.Numerics.ExcelFunctions">
            <summary>
            Collection of functions equivalent to those provided by Microsoft Excel
            but backed instead by Math.NET Numerics.
            We do not recommend to use them except in an intermediate phase when
            porting over solutions previously implemented in Excel.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.NonConvergenceException">
            <summary>
            An algorithm failed to converge.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.NumericalBreakdownException">
            <summary>
            An algorithm failed to converge due to a numerical breakdown.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.NativeInterfaceException">
            <summary>
            An error occurred calling native provider function.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.InvalidParameterException">
            <summary>
            An error occurred calling native provider function.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.MemoryAllocationException">
            <summary>
            Native provider was unable to allocate sufficient memory.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.SingularUMatrixException">
            <summary>
            Native provider failed LU inversion do to a singular U matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteReturnMeasures.CompoundReturn(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Compound Monthly Return or Geometric Return or Annualized Return
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteReturnMeasures.GainMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Average Gain or Gain Mean
            This is a simple average (arithmetic mean) of the periods with a gain. It is calculated by summing the returns for gain periods (return 0)
            and then dividing the total by the number of gain periods.
            </summary>
            <remarks>http://www.offshore-library.com/kb/statistics.php</remarks>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteReturnMeasures.LossMean(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Average Loss or LossMean
            This is a simple average (arithmetic mean) of the periods with a loss. It is calculated by summing the returns for loss periods (return &lt; 0)
            and then dividing the total by the number of loss periods.
            </summary>
            <remarks>http://www.offshore-library.com/kb/statistics.php</remarks>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteRiskMeasures.GainStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculation is similar to Standard Deviation , except it calculates an average (mean) return only for periods with a gain 
            and measures the variation of only the gain periods around the gain mean. Measures the volatility of upside performance.
            © Copyright 1996, 1999 Gary L.Gastineau. First Edition. © 1992 Swiss Bank Corporation.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteRiskMeasures.LossStandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Similar to standard deviation, except this statistic calculates an average (mean) return for only the periods with a loss and then 
            measures the variation of only the losing periods around this loss mean. This statistic measures the volatility of downside performance.
            </summary>
            <remarks>http://www.offshore-library.com/kb/statistics.php</remarks>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteRiskMeasures.DownsideDeviation(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            This measure is similar to the loss standard deviation except the downside deviation
            considers only returns that fall below a defined minimum acceptable return (MAR) rather than the arithmetic mean.
            For example, if the MAR is 7%, the downside deviation would measure the variation of each period that falls below
            7%. (The loss standard deviation, on the other hand, would take only losing periods, calculate an average return for
            the losing periods, and then measure the variation between each losing return and the losing return average).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteRiskMeasures.SemiDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            A measure of volatility in returns below the mean. It's similar to standard deviation, but it only
            looks at periods where the investment return was less than average return.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Financial.AbsoluteRiskMeasures.GainLossRatio(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Measures a fund’s average gain in a gain period divided by the fund’s average loss in a losing
            period. Periods can be monthly or quarterly depending on the data frequency.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindMinimum.OfScalarFunctionConstrained(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Find value x that minimizes the scalar function f(x), constrained within bounds, using the Golden Section algorithm.
            For more options and diagnostics consider to use <see cref="T:MathNet.Numerics.Optimization.GoldenSectionMinimizer"/> directly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindMinimum.OfFunction(System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double,System.Int32)">
            <summary>
            Find vector x that minimizes the function f(x) using the Nelder-Mead Simplex algorithm.
            For more options and diagnostics consider to use <see cref="T:MathNet.Numerics.Optimization.NelderMeadSimplex"/> directly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindMinimum.OfFunctionConstrained(System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Find vector x that minimizes the function f(x), constrained within bounds, using the Broyden–Fletcher–Goldfarb–Shanno Bounded (BFGS-B) algorithm.
            The missing gradient is evaluated numerically (forward difference).
            For more options and diagnostics consider to use <see cref="T:MathNet.Numerics.Optimization.BfgsBMinimizer"/> directly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindMinimum.OfFunctionGradient(System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double},System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double}},MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Find vector x that minimizes the function f(x) using the Broyden–Fletcher–Goldfarb–Shanno (BFGS) algorithm.
            For more options and diagnostics consider to use <see cref="T:MathNet.Numerics.Optimization.BfgsMinimizer"/> directly.
            An alternative routine using conjugate gradients (CG) is available in <see cref="T:MathNet.Numerics.Optimization.ConjugateGradientMinimizer"/>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindMinimum.OfFunctionGradient(System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Tuple{System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double}}},MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Find vector x that minimizes the function f(x) using the Broyden–Fletcher–Goldfarb–Shanno (BFGS) algorithm.
            For more options and diagnostics consider to use <see cref="T:MathNet.Numerics.Optimization.BfgsMinimizer"/> directly.
            An alternative routine using conjugate gradients (CG) is available in <see cref="T:MathNet.Numerics.Optimization.ConjugateGradientMinimizer"/>.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindMinimum.OfFunctionGradientConstrained(System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double},System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double}},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Find vector x that minimizes the function f(x), constrained within bounds, using the Broyden–Fletcher–Goldfarb–Shanno Bounded (BFGS-B) algorithm.
            For more options and diagnostics consider to use <see cref="T:MathNet.Numerics.Optimization.BfgsBMinimizer"/> directly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindMinimum.OfFunctionGradientConstrained(System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Tuple{System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double}}},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Find vector x that minimizes the function f(x), constrained within bounds, using the Broyden–Fletcher–Goldfarb–Shanno Bounded (BFGS-B) algorithm.
            For more options and diagnostics consider to use <see cref="T:MathNet.Numerics.Optimization.BfgsBMinimizer"/> directly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindMinimum.OfFunctionGradientHessian(System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double},System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double}},System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double}},MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double,System.Int32)">
            <summary>
            Find vector x that minimizes the function f(x) using the Newton algorithm.
            For more options and diagnostics consider to use <see cref="T:MathNet.Numerics.Optimization.NewtonMinimizer"/> directly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindMinimum.OfFunctionGradientHessian(System.Func{MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Tuple{System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double}}},MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Double,System.Int32)">
            <summary>
            Find vector x that minimizes the function f(x) using the Newton algorithm.
            For more options and diagnostics consider to use <see cref="T:MathNet.Numerics.Optimization.NewtonMinimizer"/> directly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindRoots.OfFunction(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Example: 1e-14.</param>
            <param name="maxIterations">Maximum number of iterations. Example: 100.</param>
        </member>
        <member name="M:MathNet.Numerics.FindRoots.OfFunctionDerivative(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double,System.Double,System.Int32)">
            <summary>Find a solution of the equation f(x)=0.</summary>
            <param name="f">The function to find roots from.</param>
            <param name="df">The first derivative of the function to find roots from.</param>
            <param name="lowerBound">The low value of the range where the root is supposed to be.</param>
            <param name="upperBound">The high value of the range where the root is supposed to be.</param>
            <param name="accuracy">Desired accuracy. The root will be refined until the accuracy or the maximum number of iterations is reached. Example: 1e-14.</param>
            <param name="maxIterations">Maximum number of iterations. Example: 100.</param>
        </member>
        <member name="M:MathNet.Numerics.FindRoots.Quadratic(System.Double,System.Double,System.Double)">
            <summary>
            Find both complex roots of the quadratic equation c + b*x + a*x^2 = 0.
            Note the special coefficient order ascending by exponent (consistent with polynomials).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindRoots.Cubic(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Find all three complex roots of the cubic equation d + c*x + b*x^2 + a*x^3 = 0.
            Note the special coefficient order ascending by exponent (consistent with polynomials).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.FindRoots.ChebychevPolynomialFirstKind(System.Int32,System.Double,System.Double)">
            <summary>
            Find all roots of the Chebychev polynomial of the first kind.
            </summary>
            <param name="degree">The polynomial order and therefore the number of roots.</param>
            <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
            <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
            <returns>Samples in [a,b] at (b+a)/2+(b-1)/2*cos(pi*(2i-1)/(2n))</returns>
        </member>
        <member name="M:MathNet.Numerics.FindRoots.ChebychevPolynomialSecondKind(System.Int32,System.Double,System.Double)">
            <summary>
            Find all roots of the Chebychev polynomial of the second kind.
            </summary>
            <param name="degree">The polynomial order and therefore the number of roots.</param>
            <param name="intervalBegin">The real domain interval begin where to start sampling.</param>
            <param name="intervalEnd">The real domain interval end where to stop sampling.</param>
            <returns>Samples in [a,b] at (b+a)/2+(b-1)/2*cos(pi*i/(n-1))</returns>
        </member>
        <member name="T:MathNet.Numerics.Fit">
            <summary>
            Least-Squares Curve Fitting Routines
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.Line(System.Double[],System.Double[])">
            <summary>
            Least-Squares fitting the points (x,y) to a line y : x -> a+b*x,
            returning its best fitting parameters as [a, b] array,
            where a is the intercept and b the slope.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LineFunc(System.Double[],System.Double[])">
            <summary>
            Least-Squares fitting the points (x,y) to a line y : x -> a+b*x,
            returning a function y' for the best fitting line.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LineThroughOrigin(System.Double[],System.Double[])">
            <summary>
            Least-Squares fitting the points (x,y) to a line through origin y : x -> b*x,
            returning its best fitting parameter b,
            where the intercept is zero and b the slope.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LineThroughOriginFunc(System.Double[],System.Double[])">
            <summary>
            Least-Squares fitting the points (x,y) to a line through origin y : x -> b*x,
            returning a function y' for the best fitting line.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.Exponential(System.Double[],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod)">
            <summary>
            Least-Squares fitting the points (x,y) to an exponential y : x -> a*exp(r*x),
            returning its best fitting parameters as (a, r) tuple.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.ExponentialFunc(System.Double[],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod)">
            <summary>
            Least-Squares fitting the points (x,y) to an exponential y : x -> a*exp(r*x),
            returning a function y' for the best fitting line.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.Logarithm(System.Double[],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod)">
            <summary>
            Least-Squares fitting the points (x,y) to a logarithm y : x -> a + b*ln(x),
            returning its best fitting parameters as (a, b) tuple.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LogarithmFunc(System.Double[],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod)">
            <summary>
            Least-Squares fitting the points (x,y) to a logarithm y : x -> a + b*ln(x),
            returning a function y' for the best fitting line.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.Power(System.Double[],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod)">
            <summary>
            Least-Squares fitting the points (x,y) to a power y : x -> a*x^b,
            returning its best fitting parameters as (a, b) tuple.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.PowerFunc(System.Double[],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod)">
            <summary>
            Least-Squares fitting the points (x,y) to a power y : x -> a*x^b,
            returning a function y' for the best fitting line.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.Polynomial(System.Double[],System.Double[],System.Int32,MathNet.Numerics.LinearRegression.DirectRegressionMethod)">
            <summary>
            Least-Squares fitting the points (x,y) to a k-order polynomial y : x -> p0 + p1*x + p2*x^2 + ... + pk*x^k,
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array, compatible with Evaluate.Polynomial.
            A polynomial with order/degree k has (k+1) coefficients and thus requires at least (k+1) samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.PolynomialFunc(System.Double[],System.Double[],System.Int32,MathNet.Numerics.LinearRegression.DirectRegressionMethod)">
            <summary>
            Least-Squares fitting the points (x,y) to a k-order polynomial y : x -> p0 + p1*x + p2*x^2 + ... + pk*x^k,
            returning a function y' for the best fitting polynomial.
            A polynomial with order/degree k has (k+1) coefficients and thus requires at least (k+1) samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.PolynomialWeighted(System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Weighted Least-Squares fitting the points (x,y) and weights w to a k-order polynomial y : x -> p0 + p1*x + p2*x^2 + ... + pk*x^k,
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array, compatible with Evaluate.Polynomial.
            A polynomial with order/degree k has (k+1) coefficients and thus requires at least (k+1) samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearCombination(System.Double[],System.Double[],System.Func{System.Double,System.Double}[])">
            <summary>
            Least-Squares fitting the points (x,y) to an arbitrary linear combination y : x -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearCombinationFunc(System.Double[],System.Double[],System.Func{System.Double,System.Double}[])">
            <summary>
            Least-Squares fitting the points (x,y) to an arbitrary linear combination y : x -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning a function y' for the best fitting combination.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearCombination(System.Double[],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod,System.Func{System.Double,System.Double}[])">
            <summary>
            Least-Squares fitting the points (x,y) to an arbitrary linear combination y : x -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearCombinationFunc(System.Double[],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod,System.Func{System.Double,System.Double}[])">
            <summary>
            Least-Squares fitting the points (x,y) to an arbitrary linear combination y : x -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning a function y' for the best fitting combination.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.MultiDim(System.Double[][],System.Double[],System.Boolean,MathNet.Numerics.LinearRegression.DirectRegressionMethod)">
            <summary>
            Least-Squares fitting the points (X,y) = ((x0,x1,..,xk),y) to a linear surface y : X -> p0*x0 + p1*x1 + ... + pk*xk,
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array.
            If an intercept is added, its coefficient will be prepended to the resulting parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.MultiDimFunc(System.Double[][],System.Double[],System.Boolean,MathNet.Numerics.LinearRegression.DirectRegressionMethod)">
            <summary>
            Least-Squares fitting the points (X,y) = ((x0,x1,..,xk),y) to a linear surface y : X -> p0*x0 + p1*x1 + ... + pk*xk,
            returning a function y' for the best fitting combination.
            If an intercept is added, its coefficient will be prepended to the resulting parameters.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.MultiDimWeighted(System.Double[][],System.Double[],System.Double[])">
            <summary>
            Weighted Least-Squares fitting the points (X,y) = ((x0,x1,..,xk),y) and weights w to a linear surface y : X -> p0*x0 + p1*x1 + ... + pk*xk,
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearMultiDim(System.Double[][],System.Double[],System.Func{System.Double[],System.Double}[])">
            <summary>
            Least-Squares fitting the points (X,y) = ((x0,x1,..,xk),y) to an arbitrary linear combination y : X -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearMultiDimFunc(System.Double[][],System.Double[],System.Func{System.Double[],System.Double}[])">
            <summary>
            Least-Squares fitting the points (X,y) = ((x0,x1,..,xk),y) to an arbitrary linear combination y : X -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning a function y' for the best fitting combination.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearMultiDim(System.Double[][],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod,System.Func{System.Double[],System.Double}[])">
            <summary>
            Least-Squares fitting the points (X,y) = ((x0,x1,..,xk),y) to an arbitrary linear combination y : X -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearMultiDimFunc(System.Double[][],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod,System.Func{System.Double[],System.Double}[])">
            <summary>
            Least-Squares fitting the points (X,y) = ((x0,x1,..,xk),y) to an arbitrary linear combination y : X -> p0*f0(x) + p1*f1(x) + ... + pk*fk(x),
            returning a function y' for the best fitting combination.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearGeneric``1(``0[],System.Double[],System.Func{``0,System.Double}[])">
            <summary>
            Least-Squares fitting the points (T,y) = (T,y) to an arbitrary linear combination y : X -> p0*f0(T) + p1*f1(T) + ... + pk*fk(T),
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearGenericFunc``1(``0[],System.Double[],System.Func{``0,System.Double}[])">
            <summary>
            Least-Squares fitting the points (T,y) = (T,y) to an arbitrary linear combination y : X -> p0*f0(T) + p1*f1(T) + ... + pk*fk(T),
            returning a function y' for the best fitting combination.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearGeneric``1(``0[],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod,System.Func{``0,System.Double}[])">
            <summary>
            Least-Squares fitting the points (T,y) = (T,y) to an arbitrary linear combination y : X -> p0*f0(T) + p1*f1(T) + ... + pk*fk(T),
            returning its best fitting parameters as [p0, p1, p2, ..., pk] array.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Fit.LinearGenericFunc``1(``0[],System.Double[],MathNet.Numerics.LinearRegression.DirectRegressionMethod,System.Func{``0,System.Double}[])">
            <summary>
            Least-Squares fitting the points (T,y) = (T,y) to an arbitrary linear combination y : X -> p0*f0(T) + p1*f1(T) + ... + pk*fk(T),
            returning a function y' for the best fitting combination.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.Map``2(``0[],System.Func{``0,``1})">
            <summary>
            Generate samples by sampling a function at the provided points.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.MapSequence``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Generate a sample sequence by sampling a function at the provided point sequence.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.Map2``3(``0[],``1[],System.Func{``0,``1,``2})">
            <summary>
            Generate samples by sampling a function at the provided points.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.Map2Sequence``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Generate a sample sequence by sampling a function at the provided point sequence.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.LinearSpaced(System.Int32,System.Double,System.Double)">
            <summary>
            Generate a linearly spaced sample vector of the given length between the specified values (inclusive).
            Equivalent to MATLAB linspace but with the length as first instead of last argument.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.LinearSpacedMap``1(System.Int32,System.Double,System.Double,System.Func{System.Double,``0})">
            <summary>
            Generate samples by sampling a function at linearly spaced points between the specified values (inclusive).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.LogSpaced(System.Int32,System.Double,System.Double)">
            <summary>
            Generate a base 10 logarithmically spaced sample vector of the given length between the specified decade exponents (inclusive).
            Equivalent to MATLAB logspace but with the length as first instead of last argument.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.LogSpacedMap``1(System.Int32,System.Double,System.Double,System.Func{System.Double,``0})">
            <summary>
            Generate samples by sampling a function at base 10 logarithmically spaced points between the specified decade exponents (inclusive).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.LinearRange(System.Int32,System.Int32)">
            <summary>
            Generate a linearly spaced sample vector within the inclusive interval (start, stop) and step 1.
            Equivalent to MATLAB colon operator (:).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.LinearRangeInt32(System.Int32,System.Int32)">
            <summary>
            Generate a linearly spaced sample vector within the inclusive interval (start, stop) and step 1.
            Equivalent to MATLAB colon operator (:).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.LinearRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate a linearly spaced sample vector within the inclusive interval (start, stop) and the provided step.
            The start value is aways included as first value, but stop is only included if it stop-start is a multiple of step.
            Equivalent to MATLAB double colon operator (::).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.LinearRangeInt32(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generate a linearly spaced sample vector within the inclusive interval (start, stop) and the provided step.
            The start value is aways included as first value, but stop is only included if it stop-start is a multiple of step.
            Equivalent to MATLAB double colon operator (::).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.LinearRange(System.Double,System.Double,System.Double)">
            <summary>
            Generate a linearly spaced sample vector within the inclusive interval (start, stop) and the provide step.
            The start value is aways included as first value, but stop is only included if it stop-start is a multiple of step.
            Equivalent to MATLAB double colon operator (::).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.LinearRangeMap``1(System.Double,System.Double,System.Double,System.Func{System.Double,``0})">
            <summary>
            Generate samples by sampling a function at linearly spaced points within the inclusive interval (start, stop) and the provide step.
            The start value is aways included as first value, but stop is only included if it stop-start is a multiple of step.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.Periodic(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create a periodic wave.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="samplingRate">Samples per time unit (Hz). Must be larger than twice the frequency to satisfy the Nyquist criterion.</param>
            <param name="frequency">Frequency in periods per time unit (Hz).</param>
            <param name="amplitude">The length of the period when sampled at one sample per time unit. This is the interval of the periodic domain, a typical value is 1.0, or 2*Pi for angular functions.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.PeriodicMap``1(System.Int32,System.Func{System.Double,``0},System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create a periodic wave.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="map">The function to apply to each of the values and evaluate the resulting sample.</param>
            <param name="samplingRate">Samples per time unit (Hz). Must be larger than twice the frequency to satisfy the Nyquist criterion.</param>
            <param name="frequency">Frequency in periods per time unit (Hz).</param>
            <param name="amplitude">The length of the period when sampled at one sample per time unit. This is the interval of the periodic domain, a typical value is 1.0, or 2*Pi for angular functions.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.PeriodicSequence(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite periodic wave sequence.
            </summary>
            <param name="samplingRate">Samples per time unit (Hz). Must be larger than twice the frequency to satisfy the Nyquist criterion.</param>
            <param name="frequency">Frequency in periods per time unit (Hz).</param>
            <param name="amplitude">The length of the period when sampled at one sample per time unit. This is the interval of the periodic domain, a typical value is 1.0, or 2*Pi for angular functions.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.PeriodicMapSequence``1(System.Func{System.Double,``0},System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite periodic wave sequence.
            </summary>
            <param name="map">The function to apply to each of the values and evaluate the resulting sample.</param>
            <param name="samplingRate">Samples per time unit (Hz). Must be larger than twice the frequency to satisfy the Nyquist criterion.</param>
            <param name="frequency">Frequency in periods per time unit (Hz).</param>
            <param name="amplitude">The length of the period when sampled at one sample per time unit. This is the interval of the periodic domain, a typical value is 1.0, or 2*Pi for angular functions.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.Sinusoidal(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create a Sine wave.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="samplingRate">Samples per time unit (Hz). Must be larger than twice the frequency to satisfy the Nyquist criterion.</param>
            <param name="frequency">Frequency in periods per time unit (Hz).</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="mean">The mean, or DC part, of the signal.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.SinusoidalSequence(System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite Sine wave sequence.
            </summary>
            <param name="samplingRate">Samples per unit.</param>
            <param name="frequency">Frequency in samples per unit.</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="mean">The mean, or DC part, of the signal.</param>
            <param name="phase">Optional phase offset.</param>
            <param name="delay">Optional delay, relative to the phase.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.Square(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create a periodic square wave, starting with the high phase.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="highDuration">Number of samples of the high phase.</param>
            <param name="lowDuration">Number of samples of the low phase.</param>
            <param name="lowValue">Sample value to be emitted during the low phase.</param>
            <param name="highValue">Sample value to be emitted during the high phase.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.SquareSequence(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite periodic square wave sequence, starting with the high phase.
            </summary>
            <param name="highDuration">Number of samples of the high phase.</param>
            <param name="lowDuration">Number of samples of the low phase.</param>
            <param name="lowValue">Sample value to be emitted during the low phase.</param>
            <param name="highValue">Sample value to be emitted during the high phase.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.Triangle(System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create a periodic triangle wave, starting with the raise phase from the lowest sample.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="raiseDuration">Number of samples of the raise phase.</param>
            <param name="fallDuration">Number of samples of the fall phase.</param>
            <param name="lowValue">Lowest sample value.</param>
            <param name="highValue">Highest sample value.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.TriangleSequence(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite periodic triangle wave sequence, starting with the raise phase from the lowest sample.
            </summary>
            <param name="raiseDuration">Number of samples of the raise phase.</param>
            <param name="fallDuration">Number of samples of the fall phase.</param>
            <param name="lowValue">Lowest sample value.</param>
            <param name="highValue">Highest sample value.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.Sawtooth(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create a periodic sawtooth wave, starting with the lowest sample.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="period">Number of samples a full sawtooth period.</param>
            <param name="lowValue">Lowest sample value.</param>
            <param name="highValue">Highest sample value.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.SawtoothSequence(System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create an infinite periodic sawtooth wave sequence, starting with the lowest sample.
            </summary>
            <param name="period">Number of samples a full sawtooth period.</param>
            <param name="lowValue">Lowest sample value.</param>
            <param name="highValue">Highest sample value.</param>
            <param name="delay">Optional delay.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.Repeat``1(System.Int32,``0)">
            <summary>
            Create an array with each field set to the same value.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="value">The value that each field should be set to.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.RepeatSequence``1(``0)">
            <summary>
            Create an infinite sequence where each element has the same value.
            </summary>
            <param name="value">The value that each element should be set to.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.Step(System.Int32,System.Double,System.Int32)">
            <summary>
            Create a Heaviside Step sample vector.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.StepSequence(System.Double,System.Int32)">
            <summary>
            Create an infinite Heaviside Step sample sequence.
            </summary>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.Impulse(System.Int32,System.Double,System.Int32)">
            <summary>
            Create a Kronecker Delta impulse sample vector.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis. Zero or positive.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.ImpulseSequence(System.Double,System.Int32)">
            <summary>
            Create a Kronecker Delta impulse sample vector.
            </summary>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis, hence the sample index of the impulse.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.PeriodicImpulse(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Create a periodic Kronecker Delta impulse sample vector.
            </summary>
            <param name="length">The number of samples to generate.</param>
            <param name="period">impulse sequence period.</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis. Zero or positive.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.PeriodicImpulseSequence(System.Int32,System.Double,System.Int32)">
            <summary>
            Create a Kronecker Delta impulse sample vector.
            </summary>
            <param name="period">impulse sequence period.</param>
            <param name="amplitude">The maximal reached peak.</param>
            <param name="delay">Offset to the time axis. Zero or positive.</param>
        </member>
        <member name="M:MathNet.Numerics.Generate.Unfold``2(System.Int32,System.Func{``1,System.Tuple{``0,``1}},``1)">
            <summary>
            Generate samples generated by the given computation.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.UnfoldSequence``2(System.Func{``1,System.Tuple{``0,``1}},``1)">
            <summary>
            Generate an infinite sequence generated by the given computation.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.Fibonacci(System.Int32)">
            <summary>
            Generate a Fibonacci sequence, including zero as first value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.FibonacciSequence">
            <summary>
            Generate an infinite Fibonacci sequence, including zero as first value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.Uniform(System.Int32)">
            <summary>
            Create random samples, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.UniformSequence">
            <summary>
            Create an infinite random sample sequence, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.UniformMap``1(System.Int32,System.Func{System.Double,``0})">
            <summary>
            Generate samples by sampling a function at samples from a probability distribution, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.UniformMapSequence``1(System.Func{System.Double,``0})">
            <summary>
            Generate a sample sequence by sampling a function at samples from a probability distribution, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.UniformMap2``1(System.Int32,System.Func{System.Double,System.Double,``0})">
            <summary>
            Generate samples by sampling a function at sample pairs from a probability distribution, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.UniformMap2Sequence``1(System.Func{System.Double,System.Double,``0})">
            <summary>
            Generate a sample sequence by sampling a function at sample pairs from a probability distribution, uniform between 0 and 1.
            Faster than other methods but with reduced guarantees on randomness.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.Standard(System.Int32)">
            <summary>
            Create samples with independent amplitudes of standard distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.StandardSequence">
            <summary>
            Create an infinite sample sequence with independent amplitudes of standard distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.Normal(System.Int32,System.Double,System.Double)">
            <summary>
            Create samples with independent amplitudes of normal distribution and a flat spectral density.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.NormalSequence(System.Double,System.Double)">
            <summary>
            Create an infinite sample sequence with independent amplitudes of normal distribution and a flat spectral density.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.Random(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create random samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.Random(MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create an infinite random sample sequence.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.RandomSingle(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create random samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.RandomSingle(MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create an infinite random sample sequence.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.RandomComplex(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create random samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.RandomComplex(MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create an infinite random sample sequence.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.RandomComplex32(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create random samples.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.RandomComplex32(MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create an infinite random sample sequence.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.RandomMap``1(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution,System.Func{System.Double,``0})">
            <summary>
            Generate samples by sampling a function at samples from a probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.RandomMapSequence``1(MathNet.Numerics.Distributions.IContinuousDistribution,System.Func{System.Double,``0})">
            <summary>
            Generate a sample sequence by sampling a function at samples from a probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.RandomMap2``1(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution,System.Func{System.Double,System.Double,``0})">
            <summary>
            Generate samples by sampling a function at sample pairs from a probability distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Generate.RandomMap2Sequence``1(MathNet.Numerics.Distributions.IContinuousDistribution,System.Func{System.Double,System.Double,``0})">
            <summary>
            Generate a sample sequence by sampling a function at sample pairs from a probability distribution.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.GlobalizationHelper">
            <summary>
            Globalized String Handling Helpers
            </summary>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.GetCultureInfo(System.IFormatProvider)">
            <summary>
            Tries to get a <see cref="T:System.Globalization.CultureInfo"/> from the format provider,
            returning the current culture if it fails.
            </summary>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>A <see cref="T:System.Globalization.CultureInfo"/> instance.</returns>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.GetNumberFormatInfo(System.IFormatProvider)">
            <summary>
            Tries to get a <see cref="T:System.Globalization.NumberFormatInfo"/> from the format
            provider, returning the current culture if it fails.
            </summary>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>A <see cref="T:System.Globalization.NumberFormatInfo"/> instance.</returns>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.GetTextInfo(System.IFormatProvider)">
            <summary>
            Tries to get a <see cref="T:System.Globalization.TextInfo"/> from the format provider, returning the current culture if it fails.
            </summary>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific
            formatting information.
            </param>
            <returns>A <see cref="T:System.Globalization.TextInfo"/> instance.</returns>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.Tokenize(System.Collections.Generic.LinkedListNode{System.String},System.String[],System.Int32)">
            <summary>
            Globalized Parsing: Tokenize a node by splitting it into several nodes.
            </summary>
            <param name="node">Node that contains the trimmed string to be tokenized.</param>
            <param name="keywords">List of keywords to tokenize by.</param>
            <param name="skip">keywords to skip looking for (because they've already been handled).</param>
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.ParseDouble(System.Collections.Generic.LinkedListNode{System.String}@,System.Globalization.CultureInfo)">
            <summary>
            Globalized Parsing: Parse a double number
            </summary>
            <param name="token">First token of the number.</param>
            <param name="culture">Culture Info.</param>
            <returns>The parsed double number using the given culture information.</returns>
            <exception cref="T:System.FormatException" />
        </member>
        <member name="M:MathNet.Numerics.GlobalizationHelper.ParseSingle(System.Collections.Generic.LinkedListNode{System.String}@,System.Globalization.CultureInfo)">
            <summary>
            Globalized Parsing: Parse a float number
            </summary>
            <param name="token">First token of the number.</param>
            <param name="culture">Culture Info.</param>
            <returns>The parsed float number using the given culture information.</returns>
            <exception cref="T:System.FormatException" />
        </member>
        <member name="M:MathNet.Numerics.GoodnessOfFit.RSquared(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates r^2, the square of the sample correlation coefficient between
            the observed outcomes and the observed predictor values.
            Not to be confused with R^2, the coefficient of determination, see <see cref="M:MathNet.Numerics.GoodnessOfFit.CoefficientOfDetermination(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})"/>.
            </summary>
            <param name="modelledValues">The modelled/predicted values</param>
            <param name="observedValues">The observed/actual values</param>
            <returns>Squared Person product-momentum correlation coefficient.</returns>
        </member>
        <member name="M:MathNet.Numerics.GoodnessOfFit.R(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates r, the sample correlation coefficient between the observed outcomes
            and the observed predictor values.
            </summary>
            <param name="modelledValues">The modelled/predicted values</param>
            <param name="observedValues">The observed/actual values</param>
            <returns>Person product-momentum correlation coefficient.</returns>
        </member>
        <member name="M:MathNet.Numerics.GoodnessOfFit.PopulationStandardError(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the Standard Error of the regression, given a sequence of
            modeled/predicted values, and a sequence of actual/observed values
            </summary>
            <param name="modelledValues">The modelled/predicted values</param>
            <param name="observedValues">The observed/actual values</param>
            <returns>The Standard Error of the regression</returns>
        </member>
        <member name="M:MathNet.Numerics.GoodnessOfFit.StandardError(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Calculates the Standard Error of the regression, given a sequence of
            modeled/predicted values, and a sequence of actual/observed values
            </summary>
            <param name="modelledValues">The modelled/predicted values</param>
            <param name="observedValues">The observed/actual values</param>
            <param name="degreesOfFreedom">The degrees of freedom by which the
            number of samples is reduced for performing the Standard Error calculation</param>
            <returns>The Standard Error of the regression</returns>
        </member>
        <member name="M:MathNet.Numerics.GoodnessOfFit.CoefficientOfDetermination(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the R-Squared value, also known as coefficient of determination,
            given some modelled and observed values.
            </summary>
            <param name="modelledValues">The values expected from the model.</param>
            <param name="observedValues">The actual values obtained.</param>
            <returns>Coefficient of determination.</returns>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.Fourier">
            <summary>
            Complex Fast (FFT) Implementation of the Discrete Fourier Transform (DFT).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Forward(MathNet.Numerics.Complex32[])">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Forward(System.Numerics.Complex[])">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Forward(MathNet.Numerics.Complex32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Forward(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Forward(System.Single[],System.Single[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            </summary>
            <param name="real">Real part of the sample vector, where the FFT is evaluated in place.</param>
            <param name="imaginary">Imaginary part of the sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Forward(System.Double[],System.Double[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            </summary>
            <param name="real">Real part of the sample vector, where the FFT is evaluated in place.</param>
            <param name="imaginary">Imaginary part of the sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.ForwardReal(System.Single[],System.Int32,MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Packed Real-Complex forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            Since for real-valued time samples the complex spectrum is conjugate-even (symmetry),
            the spectrum can be fully reconstructed form the positive frequencies only (first half).
            The data array needs to be N+2 (if N is even) or N+1 (if N is odd) long in order to support such a packed spectrum.
            </summary>
            <param name="data">Data array of length N+2 (if N is even) or N+1 (if N is odd).</param>
            <param name="n">The number of samples.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.ForwardReal(System.Double[],System.Int32,MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Packed Real-Complex forward Fast Fourier Transform (FFT) to arbitrary-length sample vectors.
            Since for real-valued time samples the complex spectrum is conjugate-even (symmetry),
            the spectrum can be fully reconstructed form the positive frequencies only (first half).
            The data array needs to be N+2 (if N is even) or N+1 (if N is odd) long in order to support such a packed spectrum.
            </summary>
            <param name="data">Data array of length N+2 (if N is even) or N+1 (if N is odd).</param>
            <param name="n">The number of samples.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.ForwardMultiDim(MathNet.Numerics.Complex32[],System.Int32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to multiple dimensional sample data.
            </summary>
            <param name="samples">Sample data, where the FFT is evaluated in place.</param>
            <param name="dimensions">
            The data size per dimension. The first dimension is the major one.
            For example, with two dimensions "rows" and "columns" the samples are assumed to be organized row by row.
            </param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.ForwardMultiDim(System.Numerics.Complex[],System.Int32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to multiple dimensional sample data.
            </summary>
            <param name="samples">Sample data, where the FFT is evaluated in place.</param>
            <param name="dimensions">
            The data size per dimension. The first dimension is the major one.
            For example, with two dimensions "rows" and "columns" the samples are assumed to be organized row by row.
            </param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Forward2D(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to two dimensional sample data.
            </summary>
            <param name="samplesRowWise">Sample data, organized row by row, where the FFT is evaluated in place</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <remarks>Data available organized column by column instead of row by row can be processed directly by swapping the rows and columns arguments.</remarks>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Forward2D(System.Numerics.Complex[],System.Int32,System.Int32,MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to two dimensional sample data.
            </summary>
            <param name="samplesRowWise">Sample data, organized row by row, where the FFT is evaluated in place</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <remarks>Data available organized column by column instead of row by row can be processed directly by swapping the rows and columns arguments.</remarks>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Forward2D(MathNet.Numerics.LinearAlgebra.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to a two dimensional data in form of a matrix.
            </summary>
            <param name="samples">Sample matrix, where the FFT is evaluated in place</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Forward2D(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the forward Fast Fourier Transform (FFT) to a two dimensional data in form of a matrix.
            </summary>
            <param name="samples">Sample matrix, where the FFT is evaluated in place</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Inverse(MathNet.Numerics.Complex32[])">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            </summary>
            <param name="spectrum">Spectrum data, where the iFFT is evaluated in place.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Inverse(System.Numerics.Complex[])">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            </summary>
            <param name="spectrum">Spectrum data, where the iFFT is evaluated in place.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Inverse(MathNet.Numerics.Complex32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            </summary>
            <param name="spectrum">Spectrum data, where the iFFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Inverse(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            </summary>
            <param name="spectrum">Spectrum data, where the iFFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Inverse(System.Single[],System.Single[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            </summary>
            <param name="real">Real part of the sample vector, where the iFFT is evaluated in place.</param>
            <param name="imaginary">Imaginary part of the sample vector, where the iFFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Inverse(System.Double[],System.Double[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            </summary>
            <param name="real">Real part of the sample vector, where the iFFT is evaluated in place.</param>
            <param name="imaginary">Imaginary part of the sample vector, where the iFFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.InverseReal(System.Single[],System.Int32,MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Packed Real-Complex inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            Since for real-valued time samples the complex spectrum is conjugate-even (symmetry),
            the spectrum can be fully reconstructed form the positive frequencies only (first half).
            The data array needs to be N+2 (if N is even) or N+1 (if N is odd) long in order to support such a packed spectrum.
            </summary>
            <param name="data">Data array of length N+2 (if N is even) or N+1 (if N is odd).</param>
            <param name="n">The number of samples.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.InverseReal(System.Double[],System.Int32,MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Packed Real-Complex inverse Fast Fourier Transform (iFFT) to arbitrary-length sample vectors.
            Since for real-valued time samples the complex spectrum is conjugate-even (symmetry),
            the spectrum can be fully reconstructed form the positive frequencies only (first half).
            The data array needs to be N+2 (if N is even) or N+1 (if N is odd) long in order to support such a packed spectrum.
            </summary>
            <param name="data">Data array of length N+2 (if N is even) or N+1 (if N is odd).</param>
            <param name="n">The number of samples.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.InverseMultiDim(MathNet.Numerics.Complex32[],System.Int32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to multiple dimensional sample data.
            </summary>
            <param name="spectrum">Spectrum data, where the iFFT is evaluated in place.</param>
            <param name="dimensions">
            The data size per dimension. The first dimension is the major one.
            For example, with two dimensions "rows" and "columns" the samples are assumed to be organized row by row.
            </param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.InverseMultiDim(System.Numerics.Complex[],System.Int32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to multiple dimensional sample data.
            </summary>
            <param name="spectrum">Spectrum data, where the iFFT is evaluated in place.</param>
            <param name="dimensions">
            The data size per dimension. The first dimension is the major one.
            For example, with two dimensions "rows" and "columns" the samples are assumed to be organized row by row.
            </param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Inverse2D(MathNet.Numerics.Complex32[],System.Int32,System.Int32,MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to two dimensional sample data.
            </summary>
            <param name="spectrumRowWise">Sample data, organized row by row, where the iFFT is evaluated in place</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <remarks>Data available organized column by column instead of row by row can be processed directly by swapping the rows and columns arguments.</remarks>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Inverse2D(System.Numerics.Complex[],System.Int32,System.Int32,MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to two dimensional sample data.
            </summary>
            <param name="spectrumRowWise">Sample data, organized row by row, where the iFFT is evaluated in place</param>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <remarks>Data available organized column by column instead of row by row can be processed directly by swapping the rows and columns arguments.</remarks>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Inverse2D(MathNet.Numerics.LinearAlgebra.Matrix{MathNet.Numerics.Complex32},MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to a two dimensional data in form of a matrix.
            </summary>
            <param name="spectrum">Sample matrix, where the iFFT is evaluated in place</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Inverse2D(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Applies the inverse Fast Fourier Transform (iFFT) to a two dimensional data in form of a matrix.
            </summary>
            <param name="spectrum">Sample matrix, where the iFFT is evaluated in place</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.NaiveForward(MathNet.Numerics.Complex32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Naive forward DFT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="samples">Time-space sample vector.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.NaiveForward(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Naive forward DFT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="samples">Time-space sample vector.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.NaiveInverse(MathNet.Numerics.Complex32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Naive inverse DFT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="spectrum">Frequency-space sample vector.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <returns>Corresponding time-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.NaiveInverse(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Naive inverse DFT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="spectrum">Frequency-space sample vector.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <returns>Corresponding time-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Radix2Forward(MathNet.Numerics.Complex32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Radix-2 forward FFT for power-of-two sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Radix2Forward(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Radix-2 forward FFT for power-of-two sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Radix2Inverse(MathNet.Numerics.Complex32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Radix-2 inverse FFT for power-of-two sized sample vectors.
            </summary>
            <param name="spectrum">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.Radix2Inverse(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Radix-2 inverse FFT for power-of-two sized sample vectors.
            </summary>
            <param name="spectrum">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.BluesteinForward(MathNet.Numerics.Complex32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Bluestein forward FFT for arbitrary sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.BluesteinForward(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Bluestein forward FFT for arbitrary sized sample vectors.
            </summary>
            <param name="samples">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.BluesteinInverse(MathNet.Numerics.Complex32[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Bluestein inverse FFT for arbitrary sized sample vectors.
            </summary>
            <param name="spectrum">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.BluesteinInverse(System.Numerics.Complex[],MathNet.Numerics.IntegralTransforms.FourierOptions)">
            <summary>
            Bluestein inverse FFT for arbitrary sized sample vectors.
            </summary>
            <param name="spectrum">Sample vector, where the FFT is evaluated in place.</param>
            <param name="options">Fourier Transform Convention Options.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Fourier.FrequencyScale(System.Int32,System.Double)">
            <summary>
            Generate the frequencies corresponding to each index in frequency space.
            The frequency space has a resolution of sampleRate/N.
            Index 0 corresponds to the DC part, the following indices correspond to
            the positive frequencies up to the Nyquist frequency (sampleRate/2),
            followed by the negative frequencies wrapped around.
            </summary>
            <param name="length">Number of samples.</param>
            <param name="sampleRate">The sampling rate of the time-space data.</param>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.FourierOptions">
            <summary>
            Fourier Transform Convention
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.InverseExponent">
            <summary>
            Inverse integrand exponent (forward: positive sign; inverse: negative sign).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.AsymmetricScaling">
            <summary>
            Only scale by 1/N in the inverse direction; No scaling in forward direction.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.NoScaling">
            <summary>
            Don't scale at all (neither on forward nor on inverse transformation).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.Default">
            <summary>
            Universal; Symmetric scaling and common exponent (used in Maple).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.Matlab">
            <summary>
            Only scale by 1/N in the inverse direction; No scaling in forward direction (used in Matlab). [= AsymmetricScaling]
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.FourierOptions.NumericalRecipes">
            <summary>
            Inverse integrand exponent; No scaling at all (used in all Numerical Recipes based implementations). [= InverseExponent | NoScaling]
            </summary>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.Hartley">
            <summary>
            Fast (FHT) Implementation of the Discrete Hartley Transform (DHT).
            </summary>
            <summary>
            Fast (FHT) Implementation of the Discrete Hartley Transform (DHT).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Hartley.NaiveForward(System.Double[],MathNet.Numerics.IntegralTransforms.HartleyOptions)">
            <summary>
            Naive forward DHT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="timeSpace">Time-space sample vector.</param>
            <param name="options">Hartley Transform Convention Options.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Hartley.NaiveInverse(System.Double[],MathNet.Numerics.IntegralTransforms.HartleyOptions)">
            <summary>
            Naive inverse DHT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="frequencySpace">Frequency-space sample vector.</param>
            <param name="options">Hartley Transform Convention Options.</param>
            <returns>Corresponding time-space vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Hartley.ForwardScaleByOptions(MathNet.Numerics.IntegralTransforms.HartleyOptions,System.Double[])">
            <summary>
            Rescale FFT-the resulting vector according to the provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Hartley.InverseScaleByOptions(MathNet.Numerics.IntegralTransforms.HartleyOptions,System.Double[])">
            <summary>
            Rescale the iFFT-resulting vector according to the provided convention options.
            </summary>
            <param name="options">Fourier Transform Convention Options.</param>
            <param name="samples">Sample Vector.</param>
        </member>
        <member name="M:MathNet.Numerics.IntegralTransforms.Hartley.Naive(System.Double[])">
            <summary>
            Naive generic DHT, useful e.g. to verify faster algorithms.
            </summary>
            <param name="samples">Time-space sample vector.</param>
            <returns>Corresponding frequency-space vector.</returns>
        </member>
        <member name="T:MathNet.Numerics.IntegralTransforms.HartleyOptions">
            <summary>
            Hartley Transform Convention
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.HartleyOptions.AsymmetricScaling">
            <summary>
            Only scale by 1/N in the inverse direction; No scaling in forward direction.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.HartleyOptions.NoScaling">
            <summary>
            Don't scale at all (neither on forward nor on inverse transformation).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.IntegralTransforms.HartleyOptions.Default">
            <summary>
            Universal; Symmetric scaling.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Integrate">
            <summary>
            Numerical Integration (Quadrature).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integrate.OnClosedInterval(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Approximation of the definite integral of an analytic smooth function on a closed interval.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="targetAbsoluteError">The expected relative accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integrate.OnClosedInterval(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Approximation of the definite integral of an analytic smooth function on a closed interval.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integrate.OnRectangle(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Approximates a 2-dimensional definite integral using an Nth order Gauss-Legendre rule over the rectangle [a,b] x [c,d].
            </summary>
            <param name="f">The 2-dimensional analytic smooth function to integrate.</param>
            <param name="invervalBeginA">Where the interval starts for the first (inside) integral, exclusive and finite.</param>
            <param name="invervalEndA">Where the interval ends for the first (inside) integral, exclusive and finite.</param>
            <param name="invervalBeginB">Where the interval starts for the second (outside) integral, exclusive and finite.</param>
            /// <param name="invervalEndB">Where the interval ends for the second (outside) integral, exclusive and finite.</param>
            <param name="order">Defines an Nth order Gauss-Legendre rule. The order also defines the number of abscissas and weights for the rule. Precomputed Gauss-Legendre abscissas/weights for orders 2-20, 32, 64, 96, 100, 128, 256, 512, 1024 are used, otherwise they're calculated on the fly.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integrate.OnRectangle(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Approximates a 2-dimensional definite integral using an Nth order Gauss-Legendre rule over the rectangle [a,b] x [c,d].
            </summary>
            <param name="f">The 2-dimensional analytic smooth function to integrate.</param>
            <param name="invervalBeginA">Where the interval starts for the first (inside) integral, exclusive and finite.</param>
            <param name="invervalEndA">Where the interval ends for the first (inside) integral, exclusive and finite.</param>
            <param name="invervalBeginB">Where the interval starts for the second (outside) integral, exclusive and finite.</param>
            /// <param name="invervalEndB">Where the interval ends for the second (outside) integral, exclusive and finite.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="T:MathNet.Numerics.Integration.DoubleExponentialTransformation">
            <summary>
            Analytic integration algorithm for smooth functions with no discontinuities
            or derivative discontinuities and no poles inside the interval.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.DoubleExponentialTransformation.NumberOfMaximumLevels">
            <summary>
            Maximum number of iterations, until the asked
            maximum error is (likely to be) satisfied.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.DoubleExponentialTransformation.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Approximate the integral by the double exponential transformation
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="targetRelativeError">The expected relative accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.DoubleExponentialTransformation.EvaluateAbcissas(System.Int32)">
            <summary>
            Compute the abscissa vector for a single level.
            </summary>
            <param name="level">The level to evaluate the abscissa vector for.</param>
            <returns>Abscissa Vector.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.DoubleExponentialTransformation.EvaluateWeights(System.Int32)">
            <summary>
            Compute the weight vector for a single level.
            </summary>
            <param name="level">The level to evaluate the weight vector for.</param>
            <returns>Weight Vector.</returns>
        </member>
        <member name="F:MathNet.Numerics.Integration.DoubleExponentialTransformation.PrecomputedAbscissas">
            <summary>
            Precomputed abscissa vector per level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.DoubleExponentialTransformation.PrecomputedWeights">
            <summary>
            Precomputed weight vector per level.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Integration.GaussLegendreRule">
            <summary>
            Approximates a definite integral using an Nth order Gauss-Legendre rule. Precomputed Gauss-Legendre abscissas/weights for orders 2-20, 32, 64, 96, 100, 128, 256, 512, 1024 are used, otherwise they're calculated on the fly.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.GaussLegendreRule.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.Integration.GaussLegendreRule"/> class.
            </summary>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="order">Defines an Nth order Gauss-Legendre rule. The order also defines the number of abscissas and weights for the rule. Precomputed Gauss-Legendre abscissas/weights for orders 2-20, 32, 64, 96, 100, 128, 256, 512, 1024 are used, otherwise they're calculated on the fly.</param>
        </member>
        <member name="M:MathNet.Numerics.Integration.GaussLegendreRule.GetAbscissa(System.Int32)">
            <summary>
            Gettter for the ith abscissa.
            </summary>
            <param name="index">Index of the ith abscissa.</param>
            <returns>The ith abscissa.</returns>
        </member>
        <member name="P:MathNet.Numerics.Integration.GaussLegendreRule.Abscissas">
            <summary>
            Getter that returns a clone of the array containing the abscissas.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.GaussLegendreRule.GetWeight(System.Int32)">
            <summary>
            Getter for the ith weight.
            </summary>
            <param name="index">Index of the ith weight.</param>
            <returns>The ith weight.</returns>
        </member>
        <member name="P:MathNet.Numerics.Integration.GaussLegendreRule.Weights">
            <summary>
            Getter that returns a clone of the array containing the weights.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Integration.GaussLegendreRule.Order">
            <summary>
            Getter for the order.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Integration.GaussLegendreRule.IntervalBegin">
            <summary>
            Getter for the InvervalBegin.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Integration.GaussLegendreRule.IntervalEnd">
            <summary>
            Getter for the InvervalEnd.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.GaussLegendreRule.Integrate(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Approximates a definite integral using an Nth order Gauss-Legendre rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="invervalBegin">Where the interval starts, exclusive and finite.</param>
            <param name="invervalEnd">Where the interval ends, exclusive and finite.</param>
            <param name="order">Defines an Nth order Gauss-Legendre rule. The order also defines the number of abscissas and weights for the rule. Precomputed Gauss-Legendre abscissas/weights for orders 2-20, 32, 64, 96, 100, 128, 256, 512, 1024 are used, otherwise they're calculated on the fly.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.GaussLegendreRule.Integrate(System.Func{System.Double,System.Double,System.Double},System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Approximates a 2-dimensional definite integral using an Nth order Gauss-Legendre rule over the rectangle [a,b] x [c,d].
            </summary>
            <param name="f">The 2-dimensional analytic smooth function to integrate.</param>
            <param name="invervalBeginA">Where the interval starts for the first (inside) integral, exclusive and finite.</param>
            <param name="invervalEndA">Where the interval ends for the first (inside) integral, exclusive and finite.</param>
            <param name="invervalBeginB">Where the interval starts for the second (outside) integral, exclusive and finite.</param>
            /// <param name="invervalEndB">Where the interval ends for the second (outside) integral, exclusive and finite.</param>
            <param name="order">Defines an Nth order Gauss-Legendre rule. The order also defines the number of abscissas and weights for the rule. Precomputed Gauss-Legendre abscissas/weights for orders 2-20, 32, 64, 96, 100, 128, 256, 512, 1024 are used, otherwise they're calculated on the fly.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="T:MathNet.Numerics.Integration.GaussRule.GaussLegendrePoint">
            <summary>
            Contains a method to compute the Gauss-Legendre abscissas/weights and precomputed abscissas/weights for orders 2-20, 32, 64, 96, 100, 128, 256, 512, 1024.
            </summary>
            <summary>
            Contains a method to compute the Gauss-Legendre abscissas/weights and precomputed abscissas/weights for orders 2-20, 32, 64, 96, 100, 128, 256, 512, 1024.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Integration.GaussRule.GaussLegendrePoint.PreComputed">
            <summary>
            Precomputed abscissas/weights for orders 2-20, 32, 64, 96, 100, 128, 256, 512, 1024.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.GaussRule.GaussLegendrePoint.Generate(System.Int32,System.Double)">
            <summary>
            Computes the Gauss-Legendre abscissas/weights.
            See <see href="http://www.holoborodko.com/pavel/numerical-methods/numerical-integration/" >Pavel Holoborodko</see> for a description of the algorithm.
            </summary>
            <param name="order">Defines an Nth order Gauss-Legendre rule. The order also defines the number of abscissas and weights for the rule.</param>
            <param name="eps">Required precision to compute the abscissas/weights. 1e-10 is usually fine.</param>
            <returns>Object containing the non-negative abscissas/weights, order, and intervalBegin/intervalEnd. The non-negative abscissas/weights are generated over the interval [-1,1] for the given order.</returns>
        </member>
        <member name="T:MathNet.Numerics.Integration.GaussRule.GaussLegendrePointFactory">
            <summary>
            Creates and maps a Gauss-Legendre point.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.GaussRule.GaussLegendrePointFactory.GetGaussPoint(System.Int32)">
            <summary>
            Getter for the GaussPoint.
            </summary>
            <param name="order">Defines an Nth order Gauss-Legendre rule. Precomputed Gauss-Legendre abscissas/weights for orders 2-20, 32, 64, 96, 100, 128, 256, 512, 1024 are used, otherwise they're calculated on the fly.</param>
            <returns>Object containing the non-negative abscissas/weights, order, and intervalBegin/intervalEnd. The non-negative abscissas/weights are generated over the interval [-1,1] for the given order.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.GaussRule.GaussLegendrePointFactory.GetGaussPoint(System.Double,System.Double,System.Int32)">
            <summary>
            Getter for the GaussPoint.
            </summary>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="order">Defines an Nth order Gauss-Legendre rule. Precomputed Gauss-Legendre abscissas/weights for orders 2-20, 32, 64, 96, 100, 128, 256, 512, 1024 are used, otherwise they're calculated on the fly.</param>
            <returns>Object containing the abscissas/weights, order, and intervalBegin/intervalEnd.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.GaussRule.GaussLegendrePointFactory.Map(System.Double,System.Double,MathNet.Numerics.Integration.GaussRule.GaussPoint)">
            <summary>
            Maps the non-negative abscissas/weights from the interval [-1, 1] to the interval [intervalBegin, intervalEnd].
            </summary>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="gaussPoint">Object containing the non-negative abscissas/weights, order, and intervalBegin/intervalEnd. The non-negative abscissas/weights are generated over the interval [-1,1] for the given order.</param>
            <returns>Object containing the abscissas/weights, order, and intervalBegin/intervalEnd.</returns>
        </member>
        <member name="T:MathNet.Numerics.Integration.GaussRule.GaussPoint">
            <summary>
            Contains the abscissas/weights, order, and intervalBegin/intervalEnd.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Integration.NewtonCotesTrapeziumRule">
            <summary>
            Approximation algorithm for definite integrals by the Trapezium rule of the Newton-Cotes family.
            </summary>
            <remarks>
            <a href="http://en.wikipedia.org/wiki/Trapezium_rule">Wikipedia - Trapezium Rule</a>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Integration.NewtonCotesTrapeziumRule.IntegrateTwoPoint(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Direct 2-point approximation of the definite integral in the provided interval by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.NewtonCotesTrapeziumRule.IntegrateComposite(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Composite N-point approximation of the definite integral in the provided interval by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="numberOfPartitions">Number of composite subdivision partitions.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.NewtonCotesTrapeziumRule.IntegrateAdaptive(System.Func{System.Double,System.Double},System.Double,System.Double,System.Double)">
            <summary>
            Adaptive approximation of the definite integral in the provided interval by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="targetError">The expected accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.NewtonCotesTrapeziumRule.IntegrateAdaptiveTransformedOdd(System.Func{System.Double,System.Double},System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Double[]},System.Collections.Generic.IEnumerable{System.Double[]},System.Double,System.Double)">
            <summary>
            Adaptive approximation of the definite integral by the trapezium rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="levelAbscissas">Abscissa vector per level provider.</param>
            <param name="levelWeights">Weight vector per level provider.</param>
            <param name="levelOneStep">First Level Step</param>
            <param name="targetRelativeError">The expected relative accuracy of the approximation.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="T:MathNet.Numerics.Integration.SimpsonRule">
            <summary>
            Approximation algorithm for definite integrals by Simpson's rule.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Integration.SimpsonRule.IntegrateThreePoint(System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Direct 3-point approximation of the definite integral in the provided interval by Simpson's rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="M:MathNet.Numerics.Integration.SimpsonRule.IntegrateComposite(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)">
            <summary>
            Composite N-point approximation of the definite integral in the provided interval by Simpson's rule.
            </summary>
            <param name="f">The analytic smooth function to integrate.</param>
            <param name="intervalBegin">Where the interval starts, inclusive and finite.</param>
            <param name="intervalEnd">Where the interval stops, inclusive and finite.</param>
            <param name="numberOfPartitions">Even number of composite subdivision partitions.</param>
            <returns>Approximation of the finite integral in the given interval.</returns>
        </member>
        <member name="T:MathNet.Numerics.Interpolate">
            <summary>
            Interpolation Factory.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolate.Common(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Creates an interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t.</param>
            <param name="values">The sample point values x(t).</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
            <remarks>
            if your data is already sorted in arrays, consider to use
            MathNet.Numerics.Interpolation.Barycentric.InterpolateRationalFloaterHormannSorted
            instead, which is more efficient.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolate.RationalWithoutPoles(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a Floater-Hormann rational pole-free interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t.</param>
            <param name="values">The sample point values x(t).</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
            <remarks>
            if your data is already sorted in arrays, consider to use
            MathNet.Numerics.Interpolation.Barycentric.InterpolateRationalFloaterHormannSorted
            instead, which is more efficient.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolate.RationalWithPoles(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a Bulirsch Stoer rational interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t.</param>
            <param name="values">The sample point values x(t).</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
            <remarks>
            if your data is already sorted in arrays, consider to use
            MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.InterpolateSorted
            instead, which is more efficient.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolate.PolynomialEquidistant(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a barycentric polynomial interpolation where the given sample points are equidistant.
            </summary>
            <param name="points">The sample points t, must be equidistant.</param>
            <param name="values">The sample point values x(t).</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
            <remarks>
            if your data is already sorted in arrays, consider to use
            MathNet.Numerics.Interpolation.Barycentric.InterpolatePolynomialEquidistantSorted
            instead, which is more efficient.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolate.Polynomial(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a Neville polynomial interpolation based on arbitrary points.
            If the points happen to be equidistant, consider to use the much more robust PolynomialEquidistant instead.
            Otherwise, consider whether RationalWithoutPoles would not be a more robust alternative.
            </summary>
            <param name="points">The sample points t.</param>
            <param name="values">The sample point values x(t).</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
            <remarks>
            if your data is already sorted in arrays, consider to use
            MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.InterpolateSorted
            instead, which is more efficient.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolate.Linear(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a piecewise linear interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t.</param>
            <param name="values">The sample point values x(t).</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
            <remarks>
            if your data is already sorted in arrays, consider to use
            MathNet.Numerics.Interpolation.LinearSpline.InterpolateSorted
            instead, which is more efficient.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolate.LogLinear(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create piecewise log-linear interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t.</param>
            <param name="values">The sample point values x(t).</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
            <remarks>
            if your data is already sorted in arrays, consider to use
            MathNet.Numerics.Interpolation.LogLinear.InterpolateSorted
            instead, which is more efficient.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolate.CubicSpline(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an piecewise natural cubic spline interpolation based on arbitrary points,
            with zero secondary derivatives at the boundaries.
            </summary>
            <param name="points">The sample points t.</param>
            <param name="values">The sample point values x(t).</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
            <remarks>
            if your data is already sorted in arrays, consider to use
            MathNet.Numerics.Interpolation.CubicSpline.InterpolateNaturalSorted
            instead, which is more efficient.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolate.CubicSplineRobust(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an piecewise cubic Akima spline interpolation based on arbitrary points.
            Akima splines are robust to outliers.
            </summary>
            <param name="points">The sample points t.</param>
            <param name="values">The sample point values x(t).</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
            <remarks>
            if your data is already sorted in arrays, consider to use
            MathNet.Numerics.Interpolation.CubicSpline.InterpolateAkimaSorted
            instead, which is more efficient.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolate.CubicSplineWithDerivatives(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a piecewise cubic Hermite spline interpolation based on arbitrary points
            and their slopes/first derivative.
            </summary>
            <param name="points">The sample points t.</param>
            <param name="values">The sample point values x(t).</param>
            <param name="firstDerivatives">The slope at the sample points. Optimized for arrays.</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
            <remarks>
            if your data is already sorted in arrays, consider to use
            MathNet.Numerics.Interpolation.CubicSpline.InterpolateHermiteSorted
            instead, which is more efficient.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolate.Step(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a step-interpolation based on arbitrary points.
            </summary>
            <param name="points">The sample points t.</param>
            <param name="values">The sample point values x(t).</param>
            <returns>
            An interpolation scheme optimized for the given sample points and values,
            which can then be used to compute interpolations and extrapolations
            on arbitrary points.
            </returns>
            <remarks>
            if your data is already sorted in arrays, consider to use
            MathNet.Numerics.Interpolation.StepInterpolation.InterpolateSorted
            instead, which is more efficient.
            </remarks>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.Barycentric">
            <summary>
            Barycentric Interpolation Algorithm.
            </summary>
            <remarks>Supports neither differentiation nor integration.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.#ctor(System.Double[],System.Double[],System.Double[])">
            <param name="x">Sample points (N), sorted ascendingly.</param>
            <param name="y">Sample values (N), sorted ascendingly by x.</param>
            <param name="w">Barycentric weights (N), sorted ascendingly by x.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.InterpolatePolynomialEquidistantSorted(System.Double[],System.Double[])">
            <summary>
            Create a barycentric polynomial interpolation from a set of (x,y) value pairs with equidistant x, sorted ascendingly by x.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.InterpolatePolynomialEquidistantInplace(System.Double[],System.Double[])">
            <summary>
            Create a barycentric polynomial interpolation from an unordered set of (x,y) value pairs with equidistant x.
            WARNING: Works in-place and can thus causes the data array to be reordered.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.InterpolatePolynomialEquidistant(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a barycentric polynomial interpolation from an unsorted set of (x,y) value pairs with equidistant x.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.InterpolatePolynomialEquidistant(System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a barycentric polynomial interpolation from a set of values related to linearly/equidistant spaced points within an interval.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.InterpolateRationalFloaterHormannSorted(System.Double[],System.Double[],System.Int32)">
            <summary>
            Create a barycentric rational interpolation without poles, using Mike Floater and Kai Hormann's Algorithm.
            The values are assumed to be sorted ascendingly by x.
            </summary>
            <param name="x">Sample points (N), sorted ascendingly.</param>
            <param name="y">Sample values (N), sorted ascendingly by x.</param>
            <param name="order">
            Order of the interpolation scheme, 0 &lt;= order &lt;= N.
            In most cases a value between 3 and 8 gives good results.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.InterpolateRationalFloaterHormannInplace(System.Double[],System.Double[],System.Int32)">
            <summary>
            Create a barycentric rational interpolation without poles, using Mike Floater and Kai Hormann's Algorithm.
            WARNING: Works in-place and can thus causes the data array to be reordered.
            </summary>
            <param name="x">Sample points (N), no sorting assumed.</param>
            <param name="y">Sample values (N).</param>
            <param name="order">
            Order of the interpolation scheme, 0 &lt;= order &lt;= N.
            In most cases a value between 3 and 8 gives good results.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.InterpolateRationalFloaterHormann(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Create a barycentric rational interpolation without poles, using Mike Floater and Kai Hormann's Algorithm.
            </summary>
            <param name="x">Sample points (N), no sorting assumed.</param>
            <param name="y">Sample values (N).</param>
            <param name="order">
            Order of the interpolation scheme, 0 &lt;= order &lt;= N.
            In most cases a value between 3 and 8 gives good results.
            </param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.InterpolateRationalFloaterHormannSorted(System.Double[],System.Double[])">
            <summary>
            Create a barycentric rational interpolation without poles, using Mike Floater and Kai Hormann's Algorithm.
            The values are assumed to be sorted ascendingly by x.
            </summary>
            <param name="x">Sample points (N), sorted ascendingly.</param>
            <param name="y">Sample values (N), sorted ascendingly by x.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.InterpolateRationalFloaterHormannInplace(System.Double[],System.Double[])">
            <summary>
            Create a barycentric rational interpolation without poles, using Mike Floater and Kai Hormann's Algorithm.
            WARNING: Works in-place and can thus causes the data array to be reordered.
            </summary>
            <param name="x">Sample points (N), no sorting assumed.</param>
            <param name="y">Sample values (N).</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.InterpolateRationalFloaterHormann(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a barycentric rational interpolation without poles, using Mike Floater and Kai Hormann's Algorithm.
            </summary>
            <param name="x">Sample points (N), no sorting assumed.</param>
            <param name="y">Sample values (N).</param>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Barycentric.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.Barycentric.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double)">
            <summary>
            Differentiate at point t. NOT SUPPORTED.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.MathNet#Numerics#Interpolation#IInterpolation#Differentiate2(System.Double)">
            <summary>
            Differentiate twice at point t. NOT SUPPORTED.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated second derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Indefinite integral at point t. NOT SUPPORTED.
            </summary>
            <param name="t">Point t to integrate at.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.Barycentric.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double,System.Double)">
            <summary>
            Definite integral between points a and b. NOT SUPPORTED.
            </summary>
            <param name="a">Left bound of the integration interval [a,b].</param>
            <param name="b">Right bound of the integration interval [a,b].</param>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation">
            <summary>
            Rational Interpolation (with poles) using Roland Bulirsch and Josef Stoer's Algorithm.
            </summary>
            <remarks>
            <para>
            This algorithm supports neither differentiation nor integration.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.#ctor(System.Double[],System.Double[])">
            <param name="x">Sample Points t, sorted ascendingly.</param>
            <param name="y">Sample Values x(t), sorted ascendingly by x.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.InterpolateSorted(System.Double[],System.Double[])">
            <summary>
            Create a Bulirsch-Stoer rational interpolation from a set of (x,y) value pairs, sorted ascendingly by x.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.InterpolateInplace(System.Double[],System.Double[])">
            <summary>
            Create a Bulirsch-Stoer rational interpolation from an unsorted set of (x,y) value pairs.
            WARNING: Works in-place and can thus causes the data array to be reordered.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.Interpolate(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a Bulirsch-Stoer rational interpolation from an unsorted set of (x,y) value pairs.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double)">
            <summary>
            Differentiate at point t. NOT SUPPORTED.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate2(System.Double)">
            <summary>
            Differentiate twice at point t. NOT SUPPORTED.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated second derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Indefinite integral at point t. NOT SUPPORTED.
            </summary>
            <param name="t">Point t to integrate at.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.BulirschStoerRationalInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double,System.Double)">
            <summary>
            Definite integral between points a and b. NOT SUPPORTED.
            </summary>
            <param name="a">Left bound of the integration interval [a,b].</param>
            <param name="b">Right bound of the integration interval [a,b].</param>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.CubicSpline">
            <summary>
            Cubic Spline Interpolation.
            </summary>
            <remarks>Supports both differentiation and integration.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.#ctor(System.Double[],System.Double[],System.Double[],System.Double[],System.Double[])">
            <param name="x">sample points (N+1), sorted ascending</param>
            <param name="c0">Zero order spline coefficients (N)</param>
            <param name="c1">First order spline coefficients (N)</param>
            <param name="c2">second order spline coefficients (N)</param>
            <param name="c3">third order spline coefficients (N)</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateHermiteSorted(System.Double[],System.Double[],System.Double[])">
            <summary>
            Create a Hermite cubic spline interpolation from a set of (x,y) value pairs and their slope (first derivative), sorted ascendingly by x.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateHermiteInplace(System.Double[],System.Double[],System.Double[])">
            <summary>
            Create a Hermite cubic spline interpolation from an unsorted set of (x,y) value pairs and their slope (first derivative).
            WARNING: Works in-place and can thus causes the data array to be reordered.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateHermite(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a Hermite cubic spline interpolation from an unsorted set of (x,y) value pairs and their slope (first derivative).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateAkimaSorted(System.Double[],System.Double[])">
            <summary>
            Create an Akima cubic spline interpolation from a set of (x,y) value pairs, sorted ascendingly by x.
            Akima splines are robust to outliers.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateAkimaInplace(System.Double[],System.Double[])">
            <summary>
            Create an Akima cubic spline interpolation from an unsorted set of (x,y) value pairs.
            Akima splines are robust to outliers.
            WARNING: Works in-place and can thus causes the data array to be reordered.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateAkima(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an Akima cubic spline interpolation from an unsorted set of (x,y) value pairs.
            Akima splines are robust to outliers.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateBoundariesSorted(System.Double[],System.Double[],MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Create a cubic spline interpolation from a set of (x,y) value pairs, sorted ascendingly by x,
            and custom boundary/termination conditions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateBoundariesInplace(System.Double[],System.Double[],MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Create a cubic spline interpolation from an unsorted set of (x,y) value pairs and custom boundary/termination conditions.
            WARNING: Works in-place and can thus causes the data array to be reordered.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateBoundaries(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double,MathNet.Numerics.Interpolation.SplineBoundaryCondition,System.Double)">
            <summary>
            Create a cubic spline interpolation from an unsorted set of (x,y) value pairs and custom boundary/termination conditions.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateNaturalSorted(System.Double[],System.Double[])">
            <summary>
            Create a natural cubic spline interpolation from a set of (x,y) value pairs
            and zero second derivatives at the two boundaries, sorted ascendingly by x.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateNaturalInplace(System.Double[],System.Double[])">
            <summary>
            Create a natural cubic spline interpolation from an unsorted set of (x,y) value pairs
            and zero second derivatives at the two boundaries.
            WARNING: Works in-place and can thus causes the data array to be reordered.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.InterpolateNatural(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a natural cubic spline interpolation from an unsorted set of (x,y) value pairs
            and zero second derivatives at the two boundaries.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.DifferentiateThreePoint(System.Double[],System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Three-Point Differentiation Helper.
            </summary>
            <param name="xx">Sample Points t.</param>
            <param name="yy">Sample Values x(t).</param>
            <param name="indexT">Index of the point of the differentiation.</param>
            <param name="index0">Index of the first sample.</param>
            <param name="index1">Index of the second sample.</param>
            <param name="index2">Index of the third sample.</param>
            <returns>The derivative approximation.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.SolveTridiagonal(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Tridiagonal Solve Helper.
            </summary>
            <param name="a">The a-vector[n].</param>
            <param name="b">The b-vector[n], will be modified by this function.</param>
            <param name="c">The c-vector[n].</param>
            <param name="d">The d-vector[n], will be modified by this function.</param>
            <returns>The x-vector[n]</returns>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.CubicSpline.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.CubicSpline.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.Differentiate2(System.Double)">
            <summary>
            Differentiate twice at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated second derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.Integrate(System.Double)">
            <summary>
            Indefinite integral at point t.
            </summary>
            <param name="t">Point t to integrate at.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.Integrate(System.Double,System.Double)">
            <summary>
            Definite integral between points a and b.
            </summary>
            <param name="a">Left bound of the integration interval [a,b].</param>
            <param name="b">Right bound of the integration interval [a,b].</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.CubicSpline.LeftSegmentIndex(System.Double)">
            <summary>
            Find the index of the greatest sample point smaller than t,
            or the left index of the closest segment for extrapolation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.IInterpolation">
            <summary>
            Interpolation within the range of a discrete set of known data points.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.IInterpolation.SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Differentiate2(System.Double)">
            <summary>
            Differentiate twice at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated second derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double)">
            <summary>
            Indefinite integral at point t.
            </summary>
            <param name="t">Point t to integrate at.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.IInterpolation.Integrate(System.Double,System.Double)">
            <summary>
            Definite integral between points a and b.
            </summary>
            <param name="a">Left bound of the integration interval [a,b].</param>
            <param name="b">Right bound of the integration interval [a,b].</param>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.LinearSpline">
            <summary>
            Piece-wise Linear Interpolation.
            </summary>
            <remarks>Supports both differentiation and integration.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LinearSpline.#ctor(System.Double[],System.Double[],System.Double[])">
            <param name="x">Sample points (N+1), sorted ascending</param>
            <param name="c0">Sample values (N or N+1) at the corresponding points; intercept, zero order coefficients</param>
            <param name="c1">Slopes (N) at the sample points (first order coefficients): N</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LinearSpline.InterpolateSorted(System.Double[],System.Double[])">
            <summary>
            Create a linear spline interpolation from a set of (x,y) value pairs, sorted ascendingly by x.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LinearSpline.InterpolateInplace(System.Double[],System.Double[])">
            <summary>
            Create a linear spline interpolation from an unsorted set of (x,y) value pairs.
            WARNING: Works in-place and can thus causes the data array to be reordered.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LinearSpline.Interpolate(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a linear spline interpolation from an unsorted set of (x,y) value pairs.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.LinearSpline.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.LinearSpline.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LinearSpline.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LinearSpline.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LinearSpline.Differentiate2(System.Double)">
            <summary>
            Differentiate twice at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated second derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LinearSpline.Integrate(System.Double)">
            <summary>
            Indefinite integral at point t.
            </summary>
            <param name="t">Point t to integrate at.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LinearSpline.Integrate(System.Double,System.Double)">
            <summary>
            Definite integral between points a and b.
            </summary>
            <param name="a">Left bound of the integration interval [a,b].</param>
            <param name="b">Right bound of the integration interval [a,b].</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LinearSpline.LeftSegmentIndex(System.Double)">
            <summary>
            Find the index of the greatest sample point smaller than t,
            or the left index of the closest segment for extrapolation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.LogLinear">
            <summary>
            Piece-wise Log-Linear Interpolation
            </summary>
            <remarks>This algorithm supports differentiation, not integration.</remarks>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.LogLinear._spline">
            <summary>
            Internal Spline Interpolation
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LogLinear.#ctor(System.Double[],System.Double[])">
            <param name="x">Sample points (N), sorted ascending</param>
            <param name="logy">Natural logarithm of the sample values (N) at the corresponding points</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LogLinear.InterpolateSorted(System.Double[],System.Double[])">
            <summary>
            Create a piecewise log-linear interpolation from a set of (x,y) value pairs, sorted ascendingly by x.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LogLinear.InterpolateInplace(System.Double[],System.Double[])">
            <summary>
            Create a piecewise log-linear interpolation from an unsorted set of (x,y) value pairs.
            WARNING: Works in-place and can thus causes the data array to be reordered and modified.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LogLinear.Interpolate(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a piecewise log-linear interpolation from an unsorted set of (x,y) value pairs.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.LogLinear.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.LogLinear.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LogLinear.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LogLinear.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LogLinear.Differentiate2(System.Double)">
            <summary>
            Differentiate twice at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated second derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LogLinear.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Indefinite integral at point t.
            </summary>
            <param name="t">Point t to integrate at.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.LogLinear.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double,System.Double)">
            <summary>
            Definite integral between points a and b.
            </summary>
            <param name="a">Left bound of the integration interval [a,b].</param>
            <param name="b">Right bound of the integration interval [a,b].</param>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation">
            <summary>
            Lagrange Polynomial Interpolation using Neville's Algorithm.
            </summary>
            <remarks>
            <para>
            This algorithm supports differentiation, but doesn't support integration.
            </para>
            <para>
            When working with equidistant or Chebyshev sample points it is
            recommended to use the barycentric algorithms specialized for
            these cases instead of this arbitrary Neville algorithm.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.#ctor(System.Double[],System.Double[])">
            <param name="x">Sample Points t, sorted ascendingly.</param>
            <param name="y">Sample Values x(t), sorted ascendingly by x.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.InterpolateSorted(System.Double[],System.Double[])">
            <summary>
            Create a Neville polynomial interpolation from a set of (x,y) value pairs, sorted ascendingly by x.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.InterpolateInplace(System.Double[],System.Double[])">
            <summary>
            Create a Neville polynomial interpolation from an unsorted set of (x,y) value pairs.
            WARNING: Works in-place and can thus causes the data array to be reordered.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.Interpolate(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a Neville polynomial interpolation from an unsorted set of (x,y) value pairs.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.Differentiate2(System.Double)">
            <summary>
            Differentiate twice at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated second derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Indefinite integral at point t. NOT SUPPORTED.
            </summary>
            <param name="t">Point t to integrate at.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.NevillePolynomialInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double,System.Double)">
            <summary>
            Definite integral between points a and b. NOT SUPPORTED.
            </summary>
            <param name="a">Left bound of the integration interval [a,b].</param>
            <param name="b">Right bound of the integration interval [a,b].</param>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.QuadraticSpline">
            <summary>
            Quadratic Spline Interpolation.
            </summary>
            <remarks>Supports both differentiation and integration.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.QuadraticSpline.#ctor(System.Double[],System.Double[],System.Double[],System.Double[])">
            <param name="x">sample points (N+1), sorted ascending</param>
            <param name="c0">Zero order spline coefficients (N)</param>
            <param name="c1">First order spline coefficients (N)</param>
            <param name="c2">second order spline coefficients (N)</param>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.QuadraticSpline.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.QuadraticSpline.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.QuadraticSpline.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.QuadraticSpline.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.QuadraticSpline.Differentiate2(System.Double)">
            <summary>
            Differentiate twice at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated second derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.QuadraticSpline.Integrate(System.Double)">
            <summary>
            Indefinite integral at point t.
            </summary>
            <param name="t">Point t to integrate at.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.QuadraticSpline.Integrate(System.Double,System.Double)">
            <summary>
            Definite integral between points a and b.
            </summary>
            <param name="a">Left bound of the integration interval [a,b].</param>
            <param name="b">Right bound of the integration interval [a,b].</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.QuadraticSpline.LeftSegmentIndex(System.Double)">
            <summary>
            Find the index of the greatest sample point smaller than t,
            or the left index of the closest segment for extrapolation.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.SplineBoundaryCondition">
            <summary>
            Left and right boundary conditions.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.Natural">
            <summary>
            Natural Boundary (Zero second derivative).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.ParabolicallyTerminated">
            <summary>
            Parabolically Terminated boundary.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.FirstDerivative">
            <summary>
            Fixed first derivative at the boundary.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.Interpolation.SplineBoundaryCondition.SecondDerivative">
            <summary>
            Fixed second derivative at the boundary.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.StepInterpolation">
            <summary>
            A step function where the start of each segment is included, and the last segment is open-ended.
            Segment i is [x_i, x_i+1) for i &lt; N, or [x_i, infinity] for i = N.
            The domain of the function is all real numbers, such that y = 0 where x &lt;.
            </summary>
            <remarks>Supports both differentiation and integration.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.StepInterpolation.#ctor(System.Double[],System.Double[])">
            <param name="x">Sample points (N), sorted ascending</param>
            <param name="sy">Samples values (N) of each segment starting at the corresponding sample point.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.StepInterpolation.InterpolateSorted(System.Double[],System.Double[])">
            <summary>
            Create a linear spline interpolation from a set of (x,y) value pairs, sorted ascendingly by x.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.StepInterpolation.InterpolateInplace(System.Double[],System.Double[])">
            <summary>
            Create a linear spline interpolation from an unsorted set of (x,y) value pairs.
            WARNING: Works in-place and can thus causes the data array to be reordered.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.StepInterpolation.Interpolate(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a linear spline interpolation from an unsorted set of (x,y) value pairs.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.StepInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.StepInterpolation.Differentiate(System.Double)">
            <summary>
            Differentiate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.StepInterpolation.Differentiate2(System.Double)">
            <summary>
            Differentiate twice at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated second derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.StepInterpolation.Integrate(System.Double)">
            <summary>
            Indefinite integral at point t.
            </summary>
            <param name="t">Point t to integrate at.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.StepInterpolation.Integrate(System.Double,System.Double)">
            <summary>
            Definite integral between points a and b.
            </summary>
            <param name="a">Left bound of the integration interval [a,b].</param>
            <param name="b">Right bound of the integration interval [a,b].</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.StepInterpolation.LeftBracketIndex(System.Double)">
            <summary>
            Find the index of the greatest sample point smaller than t.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.Interpolation.TransformedInterpolation">
            <summary>
            Wraps an interpolation with a transformation of the interpolated values.
            </summary>
            <remarks>Neither differentiation nor integration is supported.</remarks>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.TransformedInterpolation.InterpolateSorted(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double[],System.Double[])">
            <summary>
            Create a linear spline interpolation from a set of (x,y) value pairs, sorted ascendingly by x.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.TransformedInterpolation.InterpolateInplace(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double[],System.Double[])">
            <summary>
            Create a linear spline interpolation from an unsorted set of (x,y) value pairs.
            WARNING: Works in-place and can thus causes the data array to be reordered and modified.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.TransformedInterpolation.Interpolate(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a linear spline interpolation from an unsorted set of (x,y) value pairs.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.TransformedInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsDifferentiation">
            <summary>
            Gets a value indicating whether the algorithm supports differentiation (interpolated derivative).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.Interpolation.TransformedInterpolation.MathNet#Numerics#Interpolation#IInterpolation#SupportsIntegration">
            <summary>
            Gets a value indicating whether the algorithm supports integration (interpolated quadrature).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.TransformedInterpolation.Interpolate(System.Double)">
            <summary>
            Interpolate at point t.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated value x(t).</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.TransformedInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate(System.Double)">
            <summary>
            Differentiate at point t. NOT SUPPORTED.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated first derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.TransformedInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Differentiate2(System.Double)">
            <summary>
            Differentiate twice at point t. NOT SUPPORTED.
            </summary>
            <param name="t">Point t to interpolate at.</param>
            <returns>Interpolated second derivative at point t.</returns>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.TransformedInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double)">
            <summary>
            Indefinite integral at point t. NOT SUPPORTED.
            </summary>
            <param name="t">Point t to integrate at.</param>
        </member>
        <member name="M:MathNet.Numerics.Interpolation.TransformedInterpolation.MathNet#Numerics#Interpolation#IInterpolation#Integrate(System.Double,System.Double)">
            <summary>
            Definite integral between points a and b. NOT SUPPORTED.
            </summary>
            <param name="a">Left bound of the integration interval [a,b].</param>
            <param name="b">Right bound of the integration interval [a,b].</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix">
            <summary>
            A Matrix class with dense storage. The underlying storage is a one dimensional array in column-major order (column by column).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix._rowCount">
            <summary>
            Number of rows.
            </summary>
            <remarks>Using this instead of the RowCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix._columnCount">
            <summary>
            Number of columns.
            </summary>
            <remarks>Using this instead of the ColumnCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix._values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage{System.Double})">
            <summary>
            Create a new dense matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Create a new dense matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to be in column-major order (column by column) and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfArray(System.Double[0:,0:])">
            <summary>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Double}})">
            <summary>
            Create a new dense matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable.
            The enumerable is assumed to be in column-major order (column by column).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumns(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumnArrays(System.Double[][])">
            <summary>
            Create a new dense matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumnArrays(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Create a new dense matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumnVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Double}[])">
            <summary>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfColumnVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Double}})">
            <summary>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfRows(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfRowArrays(System.Double[][])">
            <summary>
            Create a new dense matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfRowArrays(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Create a new dense matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfRowVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Double}[])">
            <summary>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfRowVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Double}})">
            <summary>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfDiagonalVector(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfDiagonalVector(System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfDiagonalArray(System.Double[])">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.OfDiagonalArray(System.Int32,System.Int32,System.Double[])">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.Create(System.Int32,System.Int32,System.Double)">
            <summary>
            Create a new dense matrix and initialize each value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Double})">
            <summary>
            Create a new dense matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Double)">
            <summary>
            Create a new diagonal dense matrix and initialize each diagonal value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Create a new diagonal dense matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.CreateIdentity(System.Int32)">
            <summary>
            Create a new square sparse identity matrix where each diagonal value is set to One.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense matrix with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.Values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.L1Norm">
            <summary>Calculates the induced L1 norm of this matrix.</summary>
            <returns>The maximum absolute column sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.FrobeniusNorm">
            <summary>Calculates the entry-wise Frobenius norm of this matrix.</summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoAdd(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Add a scalar to each element of the matrix and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The matrix to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of add</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoSubtract(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Subtracts a scalar from each element of the matrix and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoDivide(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="divisor">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoPointwisePower(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise raise this matrix to an exponent and store the result into the result matrix.
            </summary>
            <param name="exponent">The exponent to raise this matrix values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoModulusByThis(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoRemainder(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.DoRemainderByThis(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix.IsSymmetric">
            <summary>
            Evaluates whether this matrix is symmetric.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.DenseVector">
            <summary>
            A vector using dense storage.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DenseVector._length">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DenseVector._values">
            <summary>
            Gets the vector's data.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage{System.Double})">
            <summary>
            Create a new dense vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(System.Int32)">
            <summary>
            Create a new dense vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.#ctor(System.Double[])">
            <summary>
            Create a new dense vector directly binding to a raw array.
            The array is used directly without copying.
            Very efficient, but changes to the array and the vector will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new dense vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.OfArray(System.Double[])">
            <summary>
            Create a new dense vector as a copy of the given array.
            This new vector will be independent from the array.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new dense vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Double}})">
            <summary>
            Create a new dense vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Create(System.Int32,System.Double)">
            <summary>
            Create a new dense vector and initialize each value using the provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Create(System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Create a new dense vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.CreateRandom(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense vector with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Values">
            <summary>
            Gets the vector's data.
            </summary>
            <value>The vector's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Explicit(MathNet.Numerics.LinearAlgebra.Double.DenseVector)~System.Double[]">
            <summary>
            Returns a reference to the internal data structure.
            </summary>
            <param name="vector">The <c>DenseVector</c> whose internal data we are
            returning.</param>
            <returns>
            A reference to the internal date of the given vector.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Implicit(System.Double[])~MathNet.Numerics.LinearAlgebra.Double.DenseVector">
            <summary>
            Returns a vector bound directly to a reference of the provided array.
            </summary>
            <param name="array">The array to bind to the <c>DenseVector</c> object.</param>
            <returns>
            A <c>DenseVector</c> whose values are bound to the given array.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoAdd(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoSubtract(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="result">The vector to store the result of the multiplication.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>The sum of a[i]*b[i] for all i.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseVector,System.Double)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The scalar value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.DenseVector,MathNet.Numerics.LinearAlgebra.Double.DenseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Division(MathNet.Numerics.LinearAlgebra.Double.DenseVector,System.Double)">
            <summary>
            Divides a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoRemainder(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The divisor to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.op_Modulus(MathNet.Numerics.LinearAlgebra.Double.DenseVector,System.Double)">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            of each element of the vector of the given divisor.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the remainder of.</param>
            <param name="rightSide">The divisor to use,</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.MaximumIndex">
            <summary>
            Returns the index of the maximum element.
            </summary>
            <returns>The index of maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.L1Norm">
            <summary>
            Calculates the L1 norm of the vector, also known as Manhattan norm.
            </summary>
            <returns>The sum of the absolute values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.L2Norm">
            <summary>
            Calculates the L2 norm of the vector, also known as Euclidean norm.
            </summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.InfinityNorm">
            <summary>
            Calculates the infinity norm of the vector.
            </summary>
            <returns>The maximum absolute value.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = ( ∑|this[i]|^p )^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="divisor">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.DoPointwisePower(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise raise this vector to an exponent vector and store the result into the result vector.
            </summary>
            <param name="exponent">The exponent vector to raise this vector values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a double dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a double.
            </summary>
            <returns>
            A double dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Double.DenseVector@)">
            <summary>
            Converts the string representation of a real dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DenseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Double.DenseVector@)">
            <summary>
            Converts the string representation of a real dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix">
            <summary>
            A matrix type for diagonal matrices.
            </summary>
            <remarks>
            Diagonal matrices can be non-square matrices but the diagonal always starts
            at element 0,0. A diagonal matrix will throw an exception if non diagonal
            entries are set. The exception to this is when the off diagonal elements are
            0.0 or NaN; these settings will cause no change to the diagonal matrix.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix._data">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage{System.Double})">
            <summary>
            Create a new diagonal matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All diagonal cells of the matrix will be initialized to the provided value, all non-diagonal ones to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to contain the diagonal elements only and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Create a new diagonal matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            The matrix to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.OfArray(System.Double[0:,0:])">
            <summary>
            Create a new diagonal matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            The array to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.OfIndexedDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Double}})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.OfDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided enumerable.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.CreateIdentity(System.Int32)">
            <summary>
            Create a new square sparse identity matrix where each diagonal value is set to One.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new diagonal matrix with diagonal values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoDivide(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="divisor">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoDivideByThis(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Divides a scalar by each element of the matrix and stores the result in the result matrix.
            </summary>
            <param name="dividend">The scalar to add.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Determinant">
            <summary>
            Computes the determinant of this matrix.
            </summary>
            <returns>The determinant of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Diagonal">
            <summary>
            Returns the elements of the diagonal in a <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseVector"/>.
            </summary>
            <returns>The elements of the diagonal.</returns>
            <remarks>For non-square matrices, the method returns Min(Rows, Columns) elements where
            i == j (i is the row index, and j is the column index).</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.SetDiagonal(System.Double[])">
            <summary>
            Copies the values of the given array to the diagonal.
            </summary>
            <param name="source">The array to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.SetDiagonal(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Copies the values of the given <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/> to the diagonal.
            </summary>
            <param name="source">The vector to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.L1Norm">
            <summary>Calculates the induced L1 norm of this matrix.</summary>
            <returns>The maximum absolute column sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.L2Norm">
            <summary>Calculates the induced L2 norm of the matrix.</summary>
            <returns>The largest singular value of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.FrobeniusNorm">
            <summary>Calculates the entry-wise Frobenius norm of this matrix.</summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.ConditionNumber">
            <summary>Calculates the condition number of this matrix.</summary>
            <returns>The condition number of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.Inverse">
            <summary>Computes the inverse of this matrix.</summary>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix"/> is singular.</exception>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowCount">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnCount">The number of columns to copy. Must be positive.</param>
            <returns>The requested sub-matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowCount"/> or <paramref name="columnCount"/>
            is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.PermuteColumns(MathNet.Numerics.Permutation)">
            <summary>
            Permute the columns of a matrix according to a permutation.
            </summary>
            <param name="p">The column permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.PermuteRows(MathNet.Numerics.Permutation)">
            <summary>
            Permute the rows of a matrix according to a permutation.
            </summary>
            <param name="p">The row permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.IsSymmetric">
            <summary>
            Evaluates whether this matrix is symmetric.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoModulusByThis(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoRemainder(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.DiagonalMatrix.DoRemainderByThis(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.Cholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Cholesky.Determinant">
            <summary>
            Gets the determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Cholesky.DeterminantLn">
            <summary>
            Gets the log determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for dense matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky.Create(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseCholesky.Factorize(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Calculates the Cholesky factorization of the input matrix.
            </summary>
            <param name="matrix">The matrix to be factorized<see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="matrix"/> does not have the same dimensions as the existing factor.</exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.Create(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,MathNet.Numerics.LinearAlgebra.Symmetricity)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="symmetricity">If it is known whether the matrix is symmetric or not the routine can skip checking it itself.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.SymmetricTridiagonalize(System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tred2 by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.SymmetricDiagonalize(System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.NonsymmetricReduceToHessenberg(System.Double[],System.Double[],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.NonsymmetricReduceHessenberToRealSchur(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.Cdiv(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Complex scalar division X/Y.
            </summary>
            <param name="xreal">Real part of X</param>
            <param name="ximag">Imaginary part of X</param>
            <param name="yreal">Real part of Y</param>
            <param name="yimag">Imaginary part of Y</param>
            <returns>Division result as a <see cref="T:System.Numerics.Complex"/> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt"/> class. This object creates an orthogonal matrix
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt.Factorize(System.Double[],System.Int32,System.Int32,System.Double[])">
            <summary>
            Factorize matrix using the modified Gram-Schmidt method.
            </summary>
            <param name="q">Initial matrix. On exit is replaced by <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> Q.</param>
            <param name="rowsQ">Number of rows in <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> Q.</param>
            <param name="columnsQ">Number of columns in <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> Q.</param>
            <param name="r">On exit is filled by <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> R.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU.Create(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR.Tau">
            <summary>
             Gets or sets Tau vector. Contains additional information on Q - used for native solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR.Create(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,MathNet.Numerics.LinearAlgebra.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The type of QR factorization to perform.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Double.DenseMatrix"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers.
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix;
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd.Create(MathNet.Numerics.LinearAlgebra.Double.DenseMatrix,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If SVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.Evd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            Matrix V is encoded in the property EigenVectors in the way that:
             - column corresponding to real eigenvalue represents real eigenvector,
             - columns corresponding to the pair of complex conjugate eigenvalues
               lambda[i] and lambda[i+1] encode real and imaginary parts of eigenvectors.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Evd.Determinant">
            <summary>
            Gets the absolute value of determinant of the square matrix for which the EVD was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Evd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Evd.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.GramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.GramSchmidt.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.GramSchmidt.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.LU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            <para>In the Math.Net implementation we also store a set of pivot elements for increased
            numerical stability. The pivot elements encode a permutation matrix P such that P*A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.LU.Determinant">
            <summary>
            Gets the determinant of the matrix for which the LU factorization was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.QR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A (m x n) may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Factorization.QRMethod.Full"/> factorization is performed, the resulting Q matrix is an m x m matrix
            and the R matrix is an m x n matrix. If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Factorization.QRMethod.Thin"/> factorization is performed, the
            resulting Q matrix is an m x n matrix and the R matrix is an n x n matrix.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.QR.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.QR.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD).</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers.
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix;
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd.L2Norm">
            <summary>
            Gets the two norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.
            </summary>
            <returns>The 2-norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd.ConditionNumber">
            <summary>
            Gets the condition number <b>max(S) / min(S)</b>
            </summary>
            <returns>The condition number.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Factorization.Svd.Determinant">
            <summary>
            Gets the determinant of the square matrix for which the SVD was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for user matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky.DoCholesky(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the Cholesky factorization in-place.
            </summary>
            <param name="factor">On entry, the matrix to factor. On exit, the Cholesky factor matrix</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="factor"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="factor"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="factor"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky.Factorize(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Calculates the Cholesky factorization of the input matrix.
            </summary>
            <param name="matrix">The matrix to be factorized<see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="matrix"/> does not have the same dimensions as the existing factor.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky.DoCholeskyStep(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Int32,System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Calculate Cholesky step
            </summary>
            <param name="data">Factor matrix</param>
            <param name="rowDim">Number of rows</param>
            <param name="firstCol">Column start</param>
            <param name="colLimit">Total columns</param>
            <param name="multipliers">Multipliers calculated previously</param>
            <param name="availableCores">Number of available processors</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Symmetricity)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="symmetricity">If it is known whether the matrix is symmetric or not the routine can skip checking it itself.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.SymmetricTridiagonalize(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tred2 by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.SymmetricDiagonalize(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.NonsymmetricReduceToHessenberg(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Double[0:,0:],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.NonsymmetricReduceHessenberToRealSchur(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Double[0:,0:],System.Double[],System.Double[],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.Cdiv(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Complex scalar division X/Y.
            </summary>
            <param name="xreal">Real part of X</param>
            <param name="ximag">Imaginary part of X</param>
            <param name="yreal">Real part of Y</param>
            <param name="yimag">Imaginary part of Y</param>
            <returns>Division result as a <see cref="T:System.Numerics.Complex"/> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserGramSchmidt.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserGramSchmidt"/> class. This object creates an orthogonal matrix
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The QR factorization method to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR.GenerateColumn(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Int32,System.Int32)">
            <summary>
            Generate column from initial matrix to work array
            </summary>
            <param name="a">Initial matrix</param>
            <param name="row">The first row</param>
            <param name="column">Column index</param>
            <returns>Generated vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR.ComputeQR(System.Double[],MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform calculation of Q or R
            </summary>
            <param name="u">Work array</param>
            <param name="a">Q or R matrices</param>
            <param name="rowStart">The first row</param>
            <param name="rowDim">The last row</param>
            <param name="columnStart">The first column</param>
            <param name="columnDim">The last column</param>
            <param name="availableCores">Number of available CPUs</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers.
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix;
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dsign(System.Double,System.Double)">
            <summary>
            Calculates absolute value of <paramref name="z1"/> multiplied on signum function of <paramref name="z2"/>
            </summary>
            <param name="z1">Double value z1</param>
            <param name="z2">Double value z2</param>
            <returns>Result multiplication of signum function and absolute value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dswap(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Int32,System.Int32,System.Int32)">
            <summary>
            Swap column  <paramref name="columnA"/>  and  <paramref name="columnB"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Column A index to swap</param>
            <param name="columnB">Column B index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.DscalColumn(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Scale column <paramref name="column"/> by <paramref name="z"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/> </param>
            <param name="column">Column to scale</param>
            <param name="rowStart">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.DscalVector(System.Double[],System.Int32,System.Double)">
            <summary>
            Scale vector <paramref name="a"/> by <paramref name="z"/> starting from index <paramref name="start"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="start">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drotg(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Given the Cartesian coordinates (da, db) of a point p, these function return the parameters da, db, c, and s
            associated with the Givens rotation that zeros the y-coordinate of the point.
            </summary>
            <param name="da">Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens rotation</param>
            <param name="db">Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens rotation</param>
            <param name="c">Contains the parameter c associated with the Givens rotation</param>
            <param name="s">Contains the parameter s associated with the Givens rotation</param>
            <remarks>This is equivalent to the DROTG LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dnrm2Column(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate Norm 2 of the column <paramref name="column"/> in matrix <paramref name="a"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="column">Column index</param>
            <param name="rowStart">Start row index</param>
            <returns>Norm2 (Euclidean norm) of the column</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Dnrm2Vector(System.Double[],System.Int32)">
            <summary>
            Calculate Norm 2 of the vector <paramref name="a"/> starting from index <paramref name="rowStart"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="rowStart">Start index</param>
            <returns>Norm2 (Euclidean norm) of the vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Ddot(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate dot product of <paramref name="columnA"/> and <paramref name="columnB"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="rowStart">Starting row index</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Drot(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Performs rotation of points in the plane. Given two vectors x <paramref name="columnA"/> and y <paramref name="columnB"/>,
            each vector element of these vectors is replaced as follows: x(i) = c*x(i) + s*y(i); y(i) = c*y(i) - s*x(i)
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="c">Scalar "c" value</param>
            <param name="s">Scalar "s" value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Matrix">
            <summary>
            <c>double</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage{System.Double})">
            <summary>
            Initializes a new instance of the Matrix class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.CoerceZero(System.Double)">
            <summary>
            Set all values whose absolute value is smaller than the threshold to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.ConjugateTranspose">
            <summary>
            Returns the conjugate transpose of this matrix.
            </summary>
            <returns>The conjugate transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.ConjugateTranspose(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the conjugate transpose of this matrix into the result matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoConjugate(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Complex conjugates each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the conjugation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoAdd(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Add a scalar to each element of the matrix and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The matrix to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoSubtract(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoDivide(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="divisor">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoDivideByThis(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Divides a scalar by each element of the matrix and stores the result in the result matrix.
            </summary>
            <param name="dividend">The scalar to divide by each element of the matrix.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoConjugateTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with the conjugate transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoConjugateTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoConjugateTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Multiplies the conjugate transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoModulusByThis(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoRemainder(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoRemainderByThis(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoPointwisePower(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise raise this matrix to an exponent and store the result into the result matrix.
            </summary>
            <param name="exponent">The exponent to raise this matrix values to.</param>
            <param name="result">The matrix to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoPointwisePower(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise raise this matrix to an exponent and store the result into the result matrix.
            </summary>
            <param name="exponent">The exponent to raise this matrix values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoPointwiseModulus(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise canonical modulus, where the result has the sign of the divisor,
            of this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The pointwise denominator matrix to use</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoPointwiseRemainder(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise remainder (% operator), where the result has the sign of the dividend,
            of this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The pointwise denominator matrix to use</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoPointwiseExp(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise applies the exponential function to each value and stores the result into the result matrix.
            </summary>
            <param name="result">The matrix to store the result.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.DoPointwiseLog(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise applies the natural logarithm function to each value and stores the result into the result matrix.
            </summary>
            <param name="result">The matrix to store the result.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.PseudoInverse">
            <summary>
            Computes the Moore-Penrose Pseudo-Inverse of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.L1Norm">
            <summary>Calculates the induced L1 norm of this matrix.</summary>
            <returns>The maximum absolute column sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.FrobeniusNorm">
            <summary>Calculates the entry-wise Frobenius norm of this matrix.</summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.RowNorms(System.Double)">
            <summary>
            Calculates the p-norms of all row vectors.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.ColumnNorms(System.Double)">
            <summary>
            Calculates the p-norms of all column vectors.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.NormalizeRows(System.Double)">
            <summary>
            Normalizes all row vectors to a unit p-norm.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.NormalizeColumns(System.Double)">
            <summary>
            Normalizes all column vectors to a unit p-norm.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.RowSums">
            <summary>
            Calculates the value sum of each row vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.RowAbsoluteSums">
            <summary>
            Calculates the absolute value sum of each row vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.ColumnSums">
            <summary>
            Calculates the value sum of each column vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.ColumnAbsoluteSums">
            <summary>
            Calculates the absolute value sum of each column vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Matrix.IsHermitian">
            <summary>
            Evaluates whether this matrix is Hermitian (conjugate symmetric).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.BiCgStab">
            <summary>
            A Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Bi-Conjugate Gradient Stabilized (BiCGStab) solver is an 'improvement'
            of the standard Conjugate Gradient (CG) solver. Unlike the CG solver the
            BiCGStab can be used on non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The Bi-CGSTAB algorithm was taken from: <br/>
            Templates for the solution of linear systems: Building blocks
            for iterative methods
            <br/>
            Richard Barrett, Michael Berry, Tony F. Chan, James Demmel,
            June M. Donato, Jack Dongarra, Victor Eijkhout, Roldan Pozo,
            Charles Romine and Henk van der Vorst
            <br/>
            Url: <a href="http://www.netlib.org/templates/Templates.html">http://www.netlib.org/templates/Templates.html</a>
            <br/>
            Algorithm is described in Chapter 2, section 2.3.8, page 27
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.BiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Double},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Double})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>, <c>b</c>.</param>
            <param name="result">The result <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>, <c>x</c>.</param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.CompositeSolver">
            <summary>
            A composite matrix solver. The actual solver is made by a sequence of
            matrix solvers.
            </summary>
            <remarks>
            <para>
            Solver based on:<br />
            Faster PDE-based simulations using robust composite linear solvers<br />
            S. Bhowmicka, P. Raghavan a,*, L. McInnes b, B. Norris<br />
            Future Generation Computer Systems, Vol 20, 2004, pp 373–387<br />
            </para>
            <para>
            Note that if an iterator is passed to this solver it will be used for all the sub-solvers.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.CompositeSolver._solvers">
            <summary>
            The collection of solvers that will be used
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Double},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Double})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.DiagonalPreconditioner">
            <summary>
            A diagonal preconditioner. The preconditioner uses the inverse
            of the matrix diagonal as preconditioning values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.DiagonalPreconditioner._inverseDiagonals">
            <summary>
            The inverse of the matrix diagonal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.DiagonalPreconditioner.DiagonalEntries">
            <summary>
            Returns the decomposed matrix diagonal.
            </summary>
            <returns>The matrix diagonal.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.DiagonalPreconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> upon which this preconditioner is based.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null" />. </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.DiagonalPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.GpBiCg">
            <summary>
            A Generalized Product Bi-Conjugate Gradient iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Generalized Product Bi-Conjugate Gradient (GPBiCG) solver is an
            alternative version of the Bi-Conjugate Gradient stabilized (CG) solver.
            Unlike the CG solver the GPBiCG solver can be used on
            non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The GPBiCG algorithm was taken from: <br/>
            GPBiCG(m,l): A hybrid of BiCGSTAB and GPBiCG methods with
            efficiency and robustness
            <br/>
            S. Fujino
            <br/>
            Applied Numerical Mathematics, Volume 41, 2002, pp 107 - 117
            <br/>
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.GpBiCg._numberOfBiCgStabSteps">
            <summary>
            Indicates the number of <c>BiCGStab</c> steps should be taken
            before switching.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.GpBiCg._numberOfGpbiCgSteps">
            <summary>
            Indicates the number of <c>GPBiCG</c> steps should be taken
            before switching.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.GpBiCg.NumberOfBiCgStabSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>BiCgStab</c> algorithm
            before switching over to the <c>GPBiCG</c> algorithm.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.GpBiCg.NumberOfGpBiCgSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>GPBiCG</c> algorithm
            before switching over to the <c>BiCgStab</c> algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.GpBiCg.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Calculates the true residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.GpBiCg.ShouldRunBiCgStabSteps(System.Int32)">
            <summary>
            Decide if to do steps with BiCgStab
            </summary>
            <param name="iterationNumber">Number of iteration</param>
            <returns><c>true</c> if yes, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Double},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Double})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILU0Preconditioner">
            <summary>
            An incomplete, level 0, LU factorization preconditioner.
            </summary>
            <remarks>
            The ILU(0) algorithm was taken from: <br/>
            Iterative methods for sparse linear systems <br/>
            Yousef Saad <br/>
            Algorithm is described in Chapter 10, section 10.3.2, page 275 <br/>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILU0Preconditioner._decompositionLU">
            <summary>
            The matrix holding the lower (L) and upper (U) matrices. The
            decomposition matrices are combined to reduce storage.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILU0Preconditioner.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILU0Preconditioner.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILU0Preconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix upon which the preconditioner is based. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILU0Preconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner">
            <summary>
            This class performs an Incomplete LU factorization with drop tolerance
            and partial pivoting. The drop tolerance indicates which additional entries
            will be dropped from the factorized LU matrices.
            </summary>
            <remarks>
            The ILUTP-Mem algorithm was taken from: <br/>
            ILUTP_Mem: a Space-Efficient Incomplete LU Preconditioner
            <br/>
            Tzu-Yi Chen, Department of Mathematics and Computer Science, <br/>
            Pomona College, Claremont CA 91711, USA <br/>
            Published in: <br/>
            Lecture Notes in Computer Science <br/>
            Volume 3046 / 2004 <br/>
            pp. 20 - 28 <br/>
            Algorithm is described in Section 2, page 22
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.DefaultFillLevel">
            <summary>
            The default fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.DefaultDropTolerance">
            <summary>
            The default drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner._upper">
            <summary>
            The decomposed upper triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner._lower">
            <summary>
            The decomposed lower triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner._pivots">
            <summary>
            The array containing the pivot values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner._fillLevel">
            <summary>
            The fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner._dropTolerance">
            <summary>
            The drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner._pivotTolerance">
            <summary>
            The pivot tolerance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner"/> class with the default settings.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner"/> class with the specified settings.
            </summary>
            <param name="fillLevel">
            The amount of fill that is allowed in the matrix. The value is a fraction of
            the number of non-zero entries in the original matrix. Values should be positive.
            </param>
            <param name="dropTolerance">
            The absolute drop tolerance which indicates below what absolute value an entry
            will be dropped from the matrix. A drop tolerance of 0.0 means that no values
            will be dropped. Values should always be positive.
            </param>
            <param name="pivotTolerance">
            The pivot tolerance which indicates at what level pivoting will take place. A
            value of 0.0 means that no pivoting will take place.
            </param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.FillLevel">
            <summary>
            Gets or sets the amount of fill that is allowed in the matrix. The
            value is a fraction of the number of non-zero entries in the original
            matrix. The standard value is 200.
            </summary>
            <remarks>
            <para>
            Values should always be positive and can be higher than 1.0. A value lower
            than 1.0 means that the eventual preconditioner matrix will have fewer
            non-zero entries as the original matrix. A value higher than 1.0 means that
            the eventual preconditioner can have more non-zero values than the original
            matrix.
            </para>
            <para>
            Note that any changes to the <b>FillLevel</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.DropTolerance">
            <summary>
            Gets or sets the absolute drop tolerance which indicates below what absolute value
            an entry will be dropped from the matrix. The standard value is 0.0001.
            </summary>
            <remarks>
            <para>
            The values should always be positive and can be larger than 1.0. A low value will
            keep more small numbers in the preconditioner matrix. A high value will remove
            more small numbers from the preconditioner matrix.
            </para>
            <para>
            Note that any changes to the <b>DropTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.PivotTolerance">
            <summary>
            Gets or sets the pivot tolerance which indicates at what level pivoting will
            take place. The standard value is 0.0 which means pivoting will never take place.
            </summary>
            <remarks>
            <para>
            The pivot tolerance is used to calculate if pivoting is necessary. Pivoting
            will take place if any of the values in a row is bigger than the
            diagonal value of that row divided by the pivot tolerance, i.e. pivoting
            will take place if <b>row(i,j) > row(i,i) / PivotTolerance</b> for
            any <b>j</b> that is not equal to <b>i</b>.
            </para>
            <para>
            Note that any changes to the <b>PivotTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.Pivots">
            <summary>
            Returns the pivot array. This array is not needed for normal use because
            the preconditioner will return the solution vector values in the proper order.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>The pivot array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> upon which this preconditioner is based. Note that the
            method takes a general matrix type. However internally the data is stored
            as a sparse matrix. Therefore it is not recommended to pass a dense matrix.
            </param>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="matrix"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.PivotRow(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pivot elements in the <paramref name="row"/> according to internal pivot array
            </summary>
            <param name="row">Row <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> to pivot in</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.PivotMapFound(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Was pivoting already performed
            </summary>
            <param name="knownPivots">Pivots already done</param>
            <param name="currentItem">Current item to pivot</param>
            <returns><c>true</c> if performed, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.SwapColumns(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.Int32,System.Int32)">
            <summary>
            Swap columns in the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>.</param>
            <param name="firstColumn">First column index to swap</param>
            <param name="secondColumn">Second column index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.FindLargestItems(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Sort vector descending, not changing vector but placing sorted indices to <paramref name="sortedIndices"/>
            </summary>
            <param name="lowerBound">Start sort form</param>
            <param name="upperBound">Sort till upper bound</param>
            <param name="sortedIndices">Array with sorted vector indices</param>
            <param name="values">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner.Pivot(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pivot elements in <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> according to internal pivot array
            </summary>
            <param name="vector">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> after pivoting.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPElementSorter">
            <summary>
            An element sort algorithm for the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPPreconditioner"/> class.
            </summary>
            <remarks>
            This sort algorithm is used to sort the columns in a sparse matrix based on
            the value of the element on the diagonal of the matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPElementSorter.SortDoubleIndicesDecreasing(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPElementSorter.HeapSortDoublesIndices(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion using heap sort algorithm. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPElementSorter.BuildDoubleIndexHeap(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Build heap for double indices
            </summary>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
            <param name="sortedIndices">Indices of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPElementSorter.SiftDoubleIndices(System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Double},System.Int32,System.Int32)">
            <summary>
            Sift double indices
            </summary>
            <param name="sortedIndices">Indices of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/></param>
            <param name="begin">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPElementSorter.SortIntegersDecreasing(System.Int32[])">
            <summary>
            Sorts the given integers in a decreasing fashion.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPElementSorter.HeapSortIntegers(System.Int32[],System.Int32)">
            <summary>
            Sort the given integers in a decreasing fashion using heapsort algorithm
            </summary>
            <param name="values">Array of values to sort</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPElementSorter.BuildHeap(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Build heap
            </summary>
            <param name="values">Target values array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPElementSorter.Sift(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sift values
            </summary>
            <param name="values">Target value array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.ILUTPElementSorter.Exchange(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Exchange values in array
            </summary>
            <param name="values">Target values array</param>
            <param name="first">First value to exchange</param>
            <param name="second">Second value to exchange</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.MILU0Preconditioner">
            <summary>
            A simple milu(0) preconditioner.
            </summary>
            <remarks>
            Original Fortran code by Yousef Saad (07 January 2004)
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.MILU0Preconditioner.#ctor(System.Boolean)">
            <param name="modified">Use modified or standard ILU(0)</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.MILU0Preconditioner.UseModified">
            <summary>
            Gets or sets a value indicating whether to use modified or standard ILU(0).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.MILU0Preconditioner.IsInitialized">
            <summary>
            Gets a value indicating whether the preconditioner is initialized.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.MILU0Preconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix upon which the preconditioner is based. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square or is not an
            instance of SparseCompressedRowMatrixStorage.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.MILU0Preconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector b.</param>
            <param name="result">The left hand side vector x.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.MILU0Preconditioner.Compute(System.Int32,System.Double[],System.Int32[],System.Int32[],System.Double[],System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            MILU0 is a simple milu(0) preconditioner.
            </summary>
            <param name="n">Order of the matrix.</param>
            <param name="a">Matrix values in CSR format (input).</param>
            <param name="ja">Column indices (input).</param>
            <param name="ia">Row pointers (input).</param>
            <param name="alu">Matrix values in MSR format (output).</param>
            <param name="jlu">Row pointers and column indices (output).</param>
            <param name="ju">Pointer to diagonal elements (output).</param>
            <param name="modified">True if the modified/MILU algorithm should be used (recommended)</param>
            <returns>Returns 0 on success or k > 0 if a zero pivot was encountered at step k.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab">
            <summary>
            A Multiple-Lanczos Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Multiple-Lanczos Bi-Conjugate Gradient stabilized (ML(k)-BiCGStab) solver is an 'improvement'
            of the standard BiCgStab solver.
            </para>
            <para>
            The algorithm was taken from: <br/>
            ML(k)BiCGSTAB: A BiCGSTAB variant based on multiple Lanczos starting vectors
            <br/>
            Man-Chung Yeung and Tony F. Chan
            <br/>
            SIAM Journal of Scientific Computing
            <br/>
            Volume 21, Number 4, pp. 1263 - 1290
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab.DefaultNumberOfStartingVectors">
            <summary>
            The default number of starting vectors.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab._startingVectors">
            <summary>
            The collection of starting vectors which are used as the basis for the Krylov sub-space.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab._numberOfStartingVectors">
            <summary>
            The number of starting vectors used by the algorithm
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab.NumberOfStartingVectors">
            <summary>
            Gets or sets the number of starting vectors.
            </summary>
            <remarks>
            Must be larger than 1 and smaller than the number of variables in the matrix that
            for which this solver will be used.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab.ResetNumberOfStartingVectors">
            <summary>
            Resets the number of starting vectors to the default value.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab.StartingVectors">
            <summary>
            Gets or sets a series of orthonormal vectors which will be used as basis for the
            Krylov sub-space.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab.NumberOfStartingVectorsToCreate(System.Int32,System.Int32)">
            <summary>
            Gets the number of starting vectors to create
            </summary>
            <param name="maximumNumberOfStartingVectors">Maximum number</param>
            <param name="numberOfVariables">Number of variables</param>
            <returns>Number of starting vectors to create</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab.CreateStartingVectors(System.Int32,System.Int32)">
            <summary>
            Returns an array of starting vectors.
            </summary>
            <param name="maximumNumberOfStartingVectors">The maximum number of starting vectors that should be created.</param>
            <param name="numberOfVariables">The number of variables.</param>
            <returns>
             An array with starting vectors. The array will never be larger than the
             <paramref name="maximumNumberOfStartingVectors"/> but it may be smaller if
             the <paramref name="numberOfVariables"/> is smaller than
             the <paramref name="maximumNumberOfStartingVectors"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab.CreateVectorArray(System.Int32,System.Int32)">
            <summary>
            Create random vectors array
            </summary>
            <param name="arraySize">Number of vectors</param>
            <param name="vectorSize">Size of each vector</param>
            <returns>Array of random vectors</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Calculates the true residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/>A.</param>
            <param name="residual">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> data.</param>
            <param name="x">x <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> data.</param>
            <param name="b">b <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> data.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Double},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Double})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Solvers.TFQMR">
            <summary>
            A Transpose Free Quasi-Minimal Residual (TFQMR) iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The TFQMR algorithm was taken from: <br/>
            Iterative methods for sparse linear systems.
            <br/>
            Yousef Saad
            <br/>
            Algorithm is described in Chapter 7, section 7.4.3, page 219
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.TFQMR.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Double.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.TFQMR.IsEven(System.Int32)">
            <summary>
            Is <paramref name="number"/> even?
            </summary>
            <param name="number">Number to check</param>
            <returns><c>true</c> if <paramref name="number"/> even, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Solvers.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Double},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Double})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix">
            <summary>
            A Matrix with sparse storage, intended for very large matrices where most of the cells are zero.
            The underlying storage scheme is 3-array compressed-sparse-row (CSR) Format.
            <a href="http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29">Wikipedia - CSR</a>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the matrix.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage{System.Double})">
            <summary>
            Create a new sparse matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfArray(System.Double[0:,0:])">
            <summary>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Double}})">
            <summary>
            Create a new sparse matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfRowMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable.
            The enumerable is assumed to be in row-major order (row by row).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Double})">
            <summary>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfColumns(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfColumnArrays(System.Double[][])">
            <summary>
            Create a new sparse matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfColumnArrays(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Create a new sparse matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfColumnVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Double}[])">
            <summary>
            Create a new sparse matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfColumnVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Double}})">
            <summary>
            Create a new sparse matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfRows(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Double}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfRowArrays(System.Double[][])">
            <summary>
            Create a new sparse matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfRowArrays(System.Collections.Generic.IEnumerable{System.Double[]})">
            <summary>
            Create a new sparse matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfRowVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Double}[])">
            <summary>
            Create a new sparse matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfRowVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Double}})">
            <summary>
            Create a new sparse matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfDiagonalVector(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfDiagonalVector(System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfDiagonalArray(System.Double[])">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.OfDiagonalArray(System.Int32,System.Int32,System.Double[])">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.Create(System.Int32,System.Int32,System.Double)">
            <summary>
            Create a new sparse matrix and initialize each value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Double})">
            <summary>
            Create a new sparse matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Double)">
            <summary>
            Create a new diagonal sparse matrix and initialize each diagonal value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Create a new diagonal sparse matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.CreateIdentity(System.Int32)">
            <summary>
            Create a new square sparse identity matrix where each diagonal value is set to One.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.LowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.UpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyLowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.StrictlyUpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.FrobeniusNorm">
            <summary>Calculates the entry-wise Frobenius norm of this matrix.</summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.DoRemainder(System.Double,MathNet.Numerics.LinearAlgebra.Matrix{System.Double})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.IsSymmetric">
            <summary>
            Evaluates whether this matrix is symmetric.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseVector,MathNet.Numerics.LinearAlgebra.Double.SparseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Double.SparseMatrix,System.Double)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.SparseVector">
            <summary>
            A vector with sparse storage, intended for very large vectors where most of the cells are zero.
            </summary>
            <remarks>The sparse vector is not thread safe.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Double.SparseVector.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the vector.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage{System.Double})">
            <summary>
            Create a new sparse vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.#ctor(System.Int32)">
            <summary>
            Create a new sparse vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Create a new sparse vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create a new sparse vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Double}})">
            <summary>
            Create a new sparse vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.Create(System.Int32,System.Double)">
            <summary>
            Create a new sparse vector and initialize each value using the provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.Create(System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Create a new sparse vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoAdd(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            Warning, the new 'sparse vector' with a non-zero scalar added to it will be a 100% filled
            sparse vector and very inefficient. Would be better to work with a dense vector instead.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoSubtract(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>The sum of a[i]*b[i] for all i.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoRemainder(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Double.SparseVector,MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Double.SparseVector,MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseVector,System.Double)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Multiply(System.Double,MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The scalar value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Double.SparseVector,MathNet.Numerics.LinearAlgebra.Double.SparseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Division(MathNet.Numerics.LinearAlgebra.Double.SparseVector,System.Double)">
            <summary>
            Divides a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.op_Modulus(MathNet.Numerics.LinearAlgebra.Double.SparseVector,System.Double)">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            of each element of the vector of the given divisor.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the modulus of.</param>
            <param name="rightSide">The divisor to use,</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.MaximumIndex">
            <summary>
            Returns the index of the maximum element.
            </summary>
            <returns>The index of maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.L1Norm">
            <summary>
            Calculates the L1 norm of the vector, also known as Manhattan norm.
            </summary>
            <returns>The sum of the absolute values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.InfinityNorm">
            <summary>
            Calculates the infinity norm of the vector.
            </summary>
            <returns>The maximum absolute value.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = ( ∑|this[i]|^p )^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a double sparse vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a double.
            </summary>
            <returns>
            A double sparse vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Double.SparseVector@)">
            <summary>
            Converts the string representation of a real sparse vector to double-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.SparseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Double.SparseVector@)">
            <summary>
            Converts the string representation of a real sparse vector to double-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Double.Vector">
            <summary>
            <c>double</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage{System.Double})">
            <summary>
            Initializes a new instance of the Vector class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.CoerceZero(System.Double)">
            <summary>
            Set all values whose absolute value is smaller than the threshold to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoConjugate(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoNegate(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoAdd(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoAdd(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoSubtract(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoSubtract(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoMultiply(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoDivide(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Divides each element of the vector by a scalar and stores the result in the result vector.
            </summary>
            <param name="divisor">
            The scalar to divide with.
            </param>
            <param name="result">
            The vector to store the result of the division.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoDivideByThis(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Divides a scalar by each element of the vector and stores the result in the result vector.
            </summary>
            <param name="dividend">The scalar to divide.</param>
            <param name="result">The vector to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="divisor">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoPointwisePower(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise raise this vector to an exponent and store the result into the result vector.
            </summary>
            <param name="exponent">The exponent to raise this vector values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoPointwisePower(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise raise this vector to an exponent vector and store the result into the result vector.
            </summary>
            <param name="exponent">The exponent vector to raise this vector values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoPointwiseModulus(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise canonical modulus, where the result has the sign of the divisor,
            of this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="divisor">The pointwise denominator vector to use.</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoPointwiseRemainder(MathNet.Numerics.LinearAlgebra.Vector{System.Double},MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise remainder (% operator), where the result has the sign of the dividend,
            of this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="divisor">The pointwise denominator vector to use.</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoPointwiseExp(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise applies the exponential function to each value and stores the result into the result vector.
            </summary>
            <param name="result">The vector to store the result.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoPointwiseLog(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Pointwise applies the natural logarithm function to each value and stores the result into the result vector.
            </summary>
            <param name="result">The vector to store the result.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>The sum of a[i]*b[i] for all i.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoConjugateDotProduct(MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the dot product between the conjugate of this vector and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>The sum of conj(a[i])*b[i] for all i.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoModulus(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoModulusByThis(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given dividend for each element of the vector.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoRemainder(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.DoRemainderByThis(System.Double,MathNet.Numerics.LinearAlgebra.Vector{System.Double})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given dividend for each element of the vector.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.L1Norm">
            <summary>
            Calculates the L1 norm of the vector, also known as Manhattan norm.
            </summary>
            <returns>The sum of the absolute values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.L2Norm">
            <summary>
            Calculates the L2 norm of the vector, also known as Euclidean norm.
            </summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.InfinityNorm">
            <summary>
            Calculates the infinity norm of the vector.
            </summary>
            <returns>The maximum absolute value.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            <c>Scalar ret = ( ∑|At(i)|^p )^(1/p)</c>
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.MaximumIndex">
            <summary>
            Returns the index of the maximum element.
            </summary>
            <returns>The index of maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Double.Vector.Normalize(System.Double)">
            <summary>
            Normalizes this vector to a unit vector with respect to the p-norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            This vector normalized to a unit vector with respect to the p-norm.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix">
            <summary>
            A Matrix class with dense storage. The underlying storage is a one dimensional array in column-major order (column by column).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix._rowCount">
            <summary>
            Number of rows.
            </summary>
            <remarks>Using this instead of the RowCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix._columnCount">
            <summary>
            Number of columns.
            </summary>
            <remarks>Using this instead of the ColumnCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix._values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage{System.Single})">
            <summary>
            Create a new dense matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.#ctor(System.Int32,System.Int32,System.Single[])">
            <summary>
            Create a new dense matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to be in column-major order (column by column) and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfArray(System.Single[0:,0:])">
            <summary>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Single}})">
            <summary>
            Create a new dense matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable.
            The enumerable is assumed to be in column-major order (column by column).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfColumns(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfColumnArrays(System.Single[][])">
            <summary>
            Create a new dense matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfColumnArrays(System.Collections.Generic.IEnumerable{System.Single[]})">
            <summary>
            Create a new dense matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfColumnVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Single}[])">
            <summary>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfColumnVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Single}})">
            <summary>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfRows(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfRowArrays(System.Single[][])">
            <summary>
            Create a new dense matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfRowArrays(System.Collections.Generic.IEnumerable{System.Single[]})">
            <summary>
            Create a new dense matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfRowVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Single}[])">
            <summary>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfRowVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Single}})">
            <summary>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfDiagonalVector(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfDiagonalVector(System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfDiagonalArray(System.Single[])">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.OfDiagonalArray(System.Int32,System.Int32,System.Single[])">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.Create(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a new dense matrix and initialize each value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Single})">
            <summary>
            Create a new dense matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a new diagonal dense matrix and initialize each diagonal value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Func{System.Int32,System.Single})">
            <summary>
            Create a new diagonal dense matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.CreateIdentity(System.Int32)">
            <summary>
            Create a new square sparse identity matrix where each diagonal value is set to One.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense matrix with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.Values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.L1Norm">
            <summary>Calculates the induced L1 norm of this matrix.</summary>
            <returns>The maximum absolute column sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.FrobeniusNorm">
            <summary>Calculates the entry-wise Frobenius norm of this matrix.</summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoAdd(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Add a scalar to each element of the matrix and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The matrix to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of add</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoSubtract(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Subtracts a scalar from each element of the matrix and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoDivide(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="divisor">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoPointwisePower(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise raise this matrix to an exponent and store the result into the result matrix.
            </summary>
            <param name="exponent">The exponent to raise this matrix values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoModulusByThis(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoRemainder(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.DoRemainderByThis(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,System.Single)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Multiply(System.Single,MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseVector,MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,System.Single)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix.IsSymmetric">
            <summary>
            Evaluates whether this matrix is symmetric.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.DenseVector">
            <summary>
            A vector using dense storage.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DenseVector._length">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DenseVector._values">
            <summary>
            Gets the vector's data.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage{System.Single})">
            <summary>
            Create a new dense vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.#ctor(System.Int32)">
            <summary>
            Create a new dense vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.#ctor(System.Single[])">
            <summary>
            Create a new dense vector directly binding to a raw array.
            The array is used directly without copying.
            Very efficient, but changes to the array and the vector will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Create a new dense vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.OfArray(System.Single[])">
            <summary>
            Create a new dense vector as a copy of the given array.
            This new vector will be independent from the array.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new dense vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Single}})">
            <summary>
            Create a new dense vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Create(System.Int32,System.Single)">
            <summary>
            Create a new dense vector and initialize each value using the provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Create(System.Int32,System.Func{System.Int32,System.Single})">
            <summary>
            Create a new dense vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.CreateRandom(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense vector with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Values">
            <summary>
            Gets the vector's data.
            </summary>
            <value>The vector's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Explicit(MathNet.Numerics.LinearAlgebra.Single.DenseVector)~System.Single[]">
            <summary>
            Returns a reference to the internal data structure.
            </summary>
            <param name="vector">The <c>DenseVector</c> whose internal data we are
            returning.</param>
            <returns>
            A reference to the internal date of the given vector.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Implicit(System.Single[])~MathNet.Numerics.LinearAlgebra.Single.DenseVector">
            <summary>
            Returns a vector bound directly to a reference of the provided array.
            </summary>
            <param name="array">The array to bind to the <c>DenseVector</c> object.</param>
            <returns>
            A <c>DenseVector</c> whose values are bound to the given array.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoAdd(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Single.DenseVector,MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoSubtract(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Subtracts another vector from this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Single.DenseVector,MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="result">The vector to store the result of the multiplication.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>The sum of a[i]*b[i] for all i.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseVector,System.Single)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Multiply(System.Single,MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The scalar value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.DenseVector,MathNet.Numerics.LinearAlgebra.Single.DenseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Division(MathNet.Numerics.LinearAlgebra.Single.DenseVector,System.Single)">
            <summary>
            Divides a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoRemainder(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.op_Modulus(MathNet.Numerics.LinearAlgebra.Single.DenseVector,System.Single)">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            of each element of the vector of the given divisor.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the modulus of.</param>
            <param name="rightSide">The divisor to use,</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.MaximumIndex">
            <summary>
            Returns the index of the maximum element.
            </summary>
            <returns>The index of maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.L1Norm">
            <summary>
            Calculates the L1 norm of the vector, also known as Manhattan norm.
            </summary>
            <returns>The sum of the absolute values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.L2Norm">
            <summary>
            Calculates the L2 norm of the vector, also known as Euclidean norm.
            </summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.InfinityNorm">
            <summary>
            Calculates the infinity norm of the vector.
            </summary>
            <returns>The maximum absolute value.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = ( ∑|this[i]|^p )^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise multiply this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply this one by.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="divisor">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.DoPointwisePower(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise raise this vector to an exponent vector and store the result into the result vector.
            </summary>
            <param name="exponent">The exponent vector to raise this vector values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a float dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a float.
            </summary>
            <returns>
            A float dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Single.DenseVector@)">
            <summary>
            Converts the string representation of a real dense vector to float-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DenseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Single.DenseVector@)">
            <summary>
            Converts the string representation of a real dense vector to float-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix">
            <summary>
            A matrix type for diagonal matrices.
            </summary>
            <remarks>
            Diagonal matrices can be non-square matrices but the diagonal always starts
            at element 0,0. A diagonal matrix will throw an exception if non diagonal
            entries are set. The exception to this is when the off diagonal elements are
            0.0 or NaN; these settings will cause no change to the diagonal matrix.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix._data">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage{System.Single})">
            <summary>
            Create a new diagonal matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All diagonal cells of the matrix will be initialized to the provided value, all non-diagonal ones to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Single[])">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to contain the diagonal elements only and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Create a new diagonal matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            The matrix to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.OfArray(System.Single[0:,0:])">
            <summary>
            Create a new diagonal matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            The array to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.OfIndexedDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Single}})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.OfDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided enumerable.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Single})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.CreateIdentity(System.Int32)">
            <summary>
            Create a new square sparse identity matrix where each diagonal value is set to One.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new diagonal matrix with diagonal values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoDivide(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="divisor">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoDivideByThis(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Divides a scalar by each element of the matrix and stores the result in the result matrix.
            </summary>
            <param name="dividend">The scalar to add.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Determinant">
            <summary>
            Computes the determinant of this matrix.
            </summary>
            <returns>The determinant of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Diagonal">
            <summary>
            Returns the elements of the diagonal in a <see cref="T:MathNet.Numerics.LinearAlgebra.Single.DenseVector"/>.
            </summary>
            <returns>The elements of the diagonal.</returns>
            <remarks>For non-square matrices, the method returns Min(Rows, Columns) elements where
            i == j (i is the row index, and j is the column index).</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.SetDiagonal(System.Single[])">
            <summary>
            Copies the values of the given array to the diagonal.
            </summary>
            <param name="source">The array to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.SetDiagonal(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Copies the values of the given <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/> to the diagonal.
            </summary>
            <param name="source">The vector to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.L1Norm">
            <summary>Calculates the induced L1 norm of this matrix.</summary>
            <returns>The maximum absolute column sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.L2Norm">
            <summary>Calculates the induced L2 norm of the matrix.</summary>
            <returns>The largest singular value of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.FrobeniusNorm">
            <summary>Calculates the entry-wise Frobenius norm of this matrix.</summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.ConditionNumber">
            <summary>Calculates the condition number of this matrix.</summary>
            <returns>The condition number of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.Inverse">
            <summary>Computes the inverse of this matrix.</summary>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix"/> is singular.</exception>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowCount">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnCount">The number of columns to copy. Must be positive.</param>
            <returns>The requested sub-matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowCount"/> or <paramref name="columnCount"/>
            is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.PermuteColumns(MathNet.Numerics.Permutation)">
            <summary>
            Permute the columns of a matrix according to a permutation.
            </summary>
            <param name="p">The column permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.PermuteRows(MathNet.Numerics.Permutation)">
            <summary>
            Permute the rows of a matrix according to a permutation.
            </summary>
            <param name="p">The row permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.IsSymmetric">
            <summary>
            Evaluates whether this matrix is symmetric.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoModulusByThis(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoRemainder(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.DiagonalMatrix.DoRemainderByThis(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.Cholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Cholesky.Determinant">
            <summary>
            Gets the determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Cholesky.DeterminantLn">
            <summary>
            Gets the log determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for dense matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky.Create(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseCholesky.Factorize(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Calculates the Cholesky factorization of the input matrix.
            </summary>
            <param name="matrix">The matrix to be factorized<see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="matrix"/> does not have the same dimensions as the existing factor.</exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.Create(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,MathNet.Numerics.LinearAlgebra.Symmetricity)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="symmetricity">If it is known whether the matrix is symmetric or not the routine can skip checking it itself.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.SymmetricTridiagonalize(System.Single[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tred2 by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.SymmetricDiagonalize(System.Single[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.NonsymmetricReduceToHessenberg(System.Single[],System.Single[],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.NonsymmetricReduceHessenberToRealSchur(System.Single[],System.Single[],System.Single[],System.Single[],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="a">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.Cdiv(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Complex scalar division X/Y.
            </summary>
            <param name="xreal">Real part of X</param>
            <param name="ximag">Imaginary part of X</param>
            <param name="yreal">Real part of Y</param>
            <param name="yimag">Imaginary part of Y</param>
            <returns>Division result as a <see cref="T:System.Numerics.Complex"/> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt"/> class. This object creates an orthogonal matrix
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt.Factorize(System.Single[],System.Int32,System.Int32,System.Single[])">
            <summary>
            Factorize matrix using the modified Gram-Schmidt method.
            </summary>
            <param name="q">Initial matrix. On exit is replaced by <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> Q.</param>
            <param name="rowsQ">Number of rows in <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> Q.</param>
            <param name="columnsQ">Number of columns in <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> Q.</param>
            <param name="r">On exit is filled by <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> R.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU.Create(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR.Tau">
            <summary>
             Gets or sets Tau vector. Contains additional information on Q - used for native solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR.Create(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,MathNet.Numerics.LinearAlgebra.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The QR factorization method to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Single.DenseMatrix"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers.
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix;
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseSvd.Create(MathNet.Numerics.LinearAlgebra.Single.DenseMatrix,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If SVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.Evd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Evd.Determinant">
            <summary>
            Gets the absolute value of determinant of the square matrix for which the EVD was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Evd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Evd.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.GramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.GramSchmidt.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.GramSchmidt.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.LU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            <para>In the Math.Net implementation we also store a set of pivot elements for increased
            numerical stability. The pivot elements encode a permutation matrix P such that P*A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.LU.Determinant">
            <summary>
            Gets the determinant of the matrix for which the LU factorization was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.QR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A (m x n) may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Factorization.QRMethod.Full"/> factorization is performed, the resulting Q matrix is an m x m matrix
            and the R matrix is an m x n matrix. If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Factorization.QRMethod.Thin"/> factorization is performed, the
            resulting Q matrix is an m x n matrix and the R matrix is an n x n matrix.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.QR.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.QR.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.Svd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD).</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers.
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix;
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Svd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Svd.L2Norm">
            <summary>
            Gets the two norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.
            </summary>
            <returns>The 2-norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Svd.ConditionNumber">
            <summary>
            Gets the condition number <b>max(S) / min(S)</b>
            </summary>
            <returns>The condition number.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Factorization.Svd.Determinant">
            <summary>
            Gets the determinant of the square matrix for which the SVD was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for user matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky.DoCholesky(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the Cholesky factorization in-place.
            </summary>
            <param name="factor">On entry, the matrix to factor. On exit, the Cholesky factor matrix</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="factor"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="factor"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="factor"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky.Factorize(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Calculates the Cholesky factorization of the input matrix.
            </summary>
            <param name="matrix">The matrix to be factorized<see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="matrix"/> does not have the same dimensions as the existing factor.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky.DoCholeskyStep(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Int32,System.Int32,System.Int32,System.Single[],System.Int32)">
            <summary>
            Calculate Cholesky step
            </summary>
            <param name="data">Factor matrix</param>
            <param name="rowDim">Number of rows</param>
            <param name="firstCol">Column start</param>
            <param name="colLimit">Total columns</param>
            <param name="multipliers">Multipliers calculated previously</param>
            <param name="availableCores">Number of available processors</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Symmetricity)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="symmetricity">If it is known whether the matrix is symmetric or not the routine can skip checking it itself.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.SymmetricTridiagonalize(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Single[],System.Single[],System.Int32)">
            <summary>
            Symmetric Householder reduction to tridiagonal form.
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tred2 by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.SymmetricDiagonalize(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Single[],System.Single[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.NonsymmetricReduceToHessenberg(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Single[0:,0:],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.NonsymmetricReduceHessenberToRealSchur(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Single[0:,0:],System.Single[],System.Single[],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.Cdiv(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Complex scalar division X/Y.
            </summary>
            <param name="xreal">Real part of X</param>
            <param name="ximag">Imaginary part of X</param>
            <param name="yreal">Real part of Y</param>
            <param name="yimag">Imaginary part of Y</param>
            <returns>Division result as a <see cref="T:System.Numerics.Complex"/> number.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserGramSchmidt.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserGramSchmidt"/> class. This object creates an orthogonal matrix
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The QR factorization method to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR.GenerateColumn(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Int32,System.Int32)">
            <summary>
            Generate column from initial matrix to work array
            </summary>
            <param name="a">Initial matrix</param>
            <param name="row">The first row</param>
            <param name="column">Column index</param>
            <returns>Generated vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR.ComputeQR(System.Single[],MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform calculation of Q or R
            </summary>
            <param name="u">Work array</param>
            <param name="a">Q or R matrices</param>
            <param name="rowStart">The first row</param>
            <param name="rowDim">The last row</param>
            <param name="columnStart">The first column</param>
            <param name="columnDim">The last column</param>
            <param name="availableCores">Number of available CPUs</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers.
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix;
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Dsign(System.Single,System.Single)">
            <summary>
            Calculates absolute value of <paramref name="z1"/> multiplied on signum function of <paramref name="z2"/>
            </summary>
            <param name="z1">Double value z1</param>
            <param name="z2">Double value z2</param>
            <returns>Result multiplication of signum function and absolute value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Dswap(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Int32,System.Int32,System.Int32)">
            <summary>
            Swap column  <paramref name="columnA"/>  and  <paramref name="columnB"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Column A index to swap</param>
            <param name="columnB">Column B index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.DscalColumn(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            Scale column <paramref name="column"/> by <paramref name="z"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/> </param>
            <param name="column">Column to scale</param>
            <param name="rowStart">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.DscalVector(System.Single[],System.Int32,System.Single)">
            <summary>
            Scale vector <paramref name="a"/> by <paramref name="z"/> starting from index <paramref name="start"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="start">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Drotg(System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Given the Cartesian coordinates (da, db) of a point p, these function return the parameters da, db, c, and s
            associated with the Givens rotation that zeros the y-coordinate of the point.
            </summary>
            <param name="da">Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens rotation</param>
            <param name="db">Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens rotation</param>
            <param name="c">Contains the parameter c associated with the Givens rotation</param>
            <param name="s">Contains the parameter s associated with the Givens rotation</param>
            <remarks>This is equivalent to the DROTG LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Dnrm2Column(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate Norm 2 of the column <paramref name="column"/> in matrix <paramref name="a"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="column">Column index</param>
            <param name="rowStart">Start row index</param>
            <returns>Norm2 (Euclidean norm) of the column</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Dnrm2Vector(System.Single[],System.Int32)">
            <summary>
            Calculate Norm 2 of the vector <paramref name="a"/> starting from index <paramref name="rowStart"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="rowStart">Start index</param>
            <returns>Norm2 (Euclidean norm) of the vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Ddot(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate dot product of <paramref name="columnA"/> and <paramref name="columnB"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="rowStart">Starting row index</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Drot(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Performs rotation of points in the plane. Given two vectors x <paramref name="columnA"/> and y <paramref name="columnB"/>,
            each vector element of these vectors is replaced as follows: x(i) = c*x(i) + s*y(i); y(i) = c*y(i) - s*x(i)
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="c">Scalar "c" value</param>
            <param name="s">Scalar "s" value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Matrix">
            <summary>
            <c>float</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage{System.Single})">
            <summary>
            Initializes a new instance of the Matrix class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.CoerceZero(System.Double)">
            <summary>
            Set all values whose absolute value is smaller than the threshold to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.ConjugateTranspose">
            <summary>
            Returns the conjugate transpose of this matrix.
            </summary>
            <returns>The conjugate transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.ConjugateTranspose(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the conjugate transpose of this matrix into the result matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoConjugate(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Complex conjugates each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the conjugation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoAdd(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Add a scalar to each element of the matrix and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The matrix to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoSubtract(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoDivide(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="divisor">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoDivideByThis(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Divides a scalar by each element of the matrix and stores the result in the result matrix.
            </summary>
            <param name="dividend">The scalar to divide by each element of the matrix.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoConjugateTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with the conjugate transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoConjugateTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoConjugateTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Multiplies the conjugate transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoModulusByThis(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoRemainder(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoRemainderByThis(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoPointwisePower(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise raise this matrix to an exponent and store the result into the result matrix.
            </summary>
            <param name="exponent">The exponent to raise this matrix values to.</param>
            <param name="result">The matrix to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoPointwisePower(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise raise this matrix to an exponent and store the result into the result matrix.
            </summary>
            <param name="exponent">The exponent to raise this matrix values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoPointwiseModulus(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise canonical modulus, where the result has the sign of the divisor,
            of this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The pointwise denominator matrix to use</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoPointwiseRemainder(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise remainder (% operator), where the result has the sign of the dividend,
            of this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The pointwise denominator matrix to use</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoPointwiseExp(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise applies the exponential function to each value and stores the result into the result matrix.
            </summary>
            <param name="result">The matrix to store the result.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.DoPointwiseLog(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise applies the natural logarithm function to each value and stores the result into the result matrix.
            </summary>
            <param name="result">The matrix to store the result.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.PseudoInverse">
            <summary>
            Computes the Moore-Penrose Pseudo-Inverse of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.L1Norm">
            <summary>Calculates the induced L1 norm of this matrix.</summary>
            <returns>The maximum absolute column sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.FrobeniusNorm">
            <summary>Calculates the entry-wise Frobenius norm of this matrix.</summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.RowNorms(System.Double)">
            <summary>
            Calculates the p-norms of all row vectors.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.ColumnNorms(System.Double)">
            <summary>
            Calculates the p-norms of all column vectors.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.NormalizeRows(System.Double)">
            <summary>
            Normalizes all row vectors to a unit p-norm.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.NormalizeColumns(System.Double)">
            <summary>
            Normalizes all column vectors to a unit p-norm.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.RowSums">
            <summary>
            Calculates the value sum of each row vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.RowAbsoluteSums">
            <summary>
            Calculates the absolute value sum of each row vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.ColumnSums">
            <summary>
            Calculates the value sum of each column vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.ColumnAbsoluteSums">
            <summary>
            Calculates the absolute value sum of each column vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Matrix.IsHermitian">
            <summary>
            Evaluates whether this matrix is Hermitian (conjugate symmetric).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.BiCgStab">
            <summary>
            A Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Bi-Conjugate Gradient Stabilized (BiCGStab) solver is an 'improvement'
            of the standard Conjugate Gradient (CG) solver. Unlike the CG solver the
            BiCGStab can be used on non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The Bi-CGSTAB algorithm was taken from: <br/>
            Templates for the solution of linear systems: Building blocks
            for iterative methods
            <br/>
            Richard Barrett, Michael Berry, Tony F. Chan, James Demmel,
            June M. Donato, Jack Dongarra, Victor Eijkhout, Roldan Pozo,
            Charles Romine and Henk van der Vorst
            <br/>
            Url: <a href="http://www.netlib.org/templates/Templates.html">http://www.netlib.org/templates/Templates.html</a>
            <br/>
            Algorithm is described in Chapter 2, section 2.3.8, page 27
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.BiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Single},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Single})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>, <c>b</c>.</param>
            <param name="result">The result <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>, <c>x</c>.</param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.CompositeSolver">
            <summary>
            A composite matrix solver. The actual solver is made by a sequence of
            matrix solvers.
            </summary>
            <remarks>
            <para>
            Solver based on:<br />
            Faster PDE-based simulations using robust composite linear solvers<br />
            S. Bhowmicka, P. Raghavan a,*, L. McInnes b, B. Norris<br />
            Future Generation Computer Systems, Vol 20, 2004, pp 373–387<br />
            </para>
            <para>
            Note that if an iterator is passed to this solver it will be used for all the sub-solvers.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.CompositeSolver._solvers">
            <summary>
            The collection of solvers that will be used
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Single},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Single})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.DiagonalPreconditioner">
            <summary>
            A diagonal preconditioner. The preconditioner uses the inverse
            of the matrix diagonal as preconditioning values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.DiagonalPreconditioner._inverseDiagonals">
            <summary>
            The inverse of the matrix diagonal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.DiagonalPreconditioner.DiagonalEntries">
            <summary>
            Returns the decomposed matrix diagonal.
            </summary>
            <returns>The matrix diagonal.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.DiagonalPreconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/> upon which this preconditioner is based.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null" />. </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.DiagonalPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.GpBiCg">
            <summary>
            A Generalized Product Bi-Conjugate Gradient iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Generalized Product Bi-Conjugate Gradient (GPBiCG) solver is an
            alternative version of the Bi-Conjugate Gradient stabilized (CG) solver.
            Unlike the CG solver the GPBiCG solver can be used on
            non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The GPBiCG algorithm was taken from: <br/>
            GPBiCG(m,l): A hybrid of BiCGSTAB and GPBiCG methods with
            efficiency and robustness
            <br/>
            S. Fujino
            <br/>
            Applied Numerical Mathematics, Volume 41, 2002, pp 107 - 117
            <br/>
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.GpBiCg._numberOfBiCgStabSteps">
            <summary>
            Indicates the number of <c>BiCGStab</c> steps should be taken
            before switching.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.GpBiCg._numberOfGpbiCgSteps">
            <summary>
            Indicates the number of <c>GPBiCG</c> steps should be taken
            before switching.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.GpBiCg.NumberOfBiCgStabSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>BiCgStab</c> algorithm
            before switching over to the <c>GPBiCG</c> algorithm.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.GpBiCg.NumberOfGpBiCgSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>GPBiCG</c> algorithm
            before switching over to the <c>BiCgStab</c> algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.GpBiCg.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.GpBiCg.ShouldRunBiCgStabSteps(System.Int32)">
            <summary>
            Decide if to do steps with BiCgStab
            </summary>
            <param name="iterationNumber">Number of iteration</param>
            <returns><c>true</c> if yes, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Single},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Single})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILU0Preconditioner">
            <summary>
            An incomplete, level 0, LU factorization preconditioner.
            </summary>
            <remarks>
            The ILU(0) algorithm was taken from: <br/>
            Iterative methods for sparse linear systems <br/>
            Yousef Saad <br/>
            Algorithm is described in Chapter 10, section 10.3.2, page 275 <br/>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILU0Preconditioner._decompositionLU">
            <summary>
            The matrix holding the lower (L) and upper (U) matrices. The
            decomposition matrices are combined to reduce storage.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILU0Preconditioner.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILU0Preconditioner.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILU0Preconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix upon which the preconditioner is based. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILU0Preconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner">
            <summary>
            This class performs an Incomplete LU factorization with drop tolerance
            and partial pivoting. The drop tolerance indicates which additional entries
            will be dropped from the factorized LU matrices.
            </summary>
            <remarks>
            The ILUTP-Mem algorithm was taken from: <br/>
            ILUTP_Mem: a Space-Efficient Incomplete LU Preconditioner
            <br/>
            Tzu-Yi Chen, Department of Mathematics and Computer Science, <br/>
            Pomona College, Claremont CA 91711, USA <br/>
            Published in: <br/>
            Lecture Notes in Computer Science <br/>
            Volume 3046 / 2004 <br/>
            pp. 20 - 28 <br/>
            Algorithm is described in Section 2, page 22
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.DefaultFillLevel">
            <summary>
            The default fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.DefaultDropTolerance">
            <summary>
            The default drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner._upper">
            <summary>
            The decomposed upper triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner._lower">
            <summary>
            The decomposed lower triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner._pivots">
            <summary>
            The array containing the pivot values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner._fillLevel">
            <summary>
            The fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner._dropTolerance">
            <summary>
            The drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner._pivotTolerance">
            <summary>
            The pivot tolerance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner"/> class with the default settings.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner"/> class with the specified settings.
            </summary>
            <param name="fillLevel">
            The amount of fill that is allowed in the matrix. The value is a fraction of
            the number of non-zero entries in the original matrix. Values should be positive.
            </param>
            <param name="dropTolerance">
            The absolute drop tolerance which indicates below what absolute value an entry
            will be dropped from the matrix. A drop tolerance of 0.0 means that no values
            will be dropped. Values should always be positive.
            </param>
            <param name="pivotTolerance">
            The pivot tolerance which indicates at what level pivoting will take place. A
            value of 0.0 means that no pivoting will take place.
            </param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.FillLevel">
            <summary>
            Gets or sets the amount of fill that is allowed in the matrix. The
            value is a fraction of the number of non-zero entries in the original
            matrix. The standard value is 200.
            </summary>
            <remarks>
            <para>
            Values should always be positive and can be higher than 1.0. A value lower
            than 1.0 means that the eventual preconditioner matrix will have fewer
            non-zero entries as the original matrix. A value higher than 1.0 means that
            the eventual preconditioner can have more non-zero values than the original
            matrix.
            </para>
            <para>
            Note that any changes to the <b>FillLevel</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.DropTolerance">
            <summary>
            Gets or sets the absolute drop tolerance which indicates below what absolute value
            an entry will be dropped from the matrix. The standard value is 0.0001.
            </summary>
            <remarks>
            <para>
            The values should always be positive and can be larger than 1.0. A low value will
            keep more small numbers in the preconditioner matrix. A high value will remove
            more small numbers from the preconditioner matrix.
            </para>
            <para>
            Note that any changes to the <b>DropTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.PivotTolerance">
            <summary>
            Gets or sets the pivot tolerance which indicates at what level pivoting will
            take place. The standard value is 0.0 which means pivoting will never take place.
            </summary>
            <remarks>
            <para>
            The pivot tolerance is used to calculate if pivoting is necessary. Pivoting
            will take place if any of the values in a row is bigger than the
            diagonal value of that row divided by the pivot tolerance, i.e. pivoting
            will take place if <b>row(i,j) > row(i,i) / PivotTolerance</b> for
            any <b>j</b> that is not equal to <b>i</b>.
            </para>
            <para>
            Note that any changes to the <b>PivotTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.Pivots">
            <summary>
            Returns the pivot array. This array is not needed for normal use because
            the preconditioner will return the solution vector values in the proper order.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>The pivot array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/> upon which this preconditioner is based. Note that the
            method takes a general matrix type. However internally the data is stored
            as a sparse matrix. Therefore it is not recommended to pass a dense matrix.
            </param>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="matrix"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.PivotRow(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pivot elements in the <paramref name="row"/> according to internal pivot array
            </summary>
            <param name="row">Row <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> to pivot in</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.PivotMapFound(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Was pivoting already performed
            </summary>
            <param name="knownPivots">Pivots already done</param>
            <param name="currentItem">Current item to pivot</param>
            <returns><c>true</c> if performed, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.SwapColumns(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},System.Int32,System.Int32)">
            <summary>
            Swap columns in the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>.</param>
            <param name="firstColumn">First column index to swap</param>
            <param name="secondColumn">Second column index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.FindLargestItems(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Sort vector descending, not changing vector but placing sorted indices to <paramref name="sortedIndices"/>
            </summary>
            <param name="lowerBound">Start sort form</param>
            <param name="upperBound">Sort till upper bound</param>
            <param name="sortedIndices">Array with sorted vector indices</param>
            <param name="values">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner.Pivot(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pivot elements in <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> according to internal pivot array
            </summary>
            <param name="vector">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> after pivoting.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPElementSorter">
            <summary>
            An element sort algorithm for the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPPreconditioner"/> class.
            </summary>
            <remarks>
            This sort algorithm is used to sort the columns in a sparse matrix based on
            the value of the element on the diagonal of the matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPElementSorter.SortDoubleIndicesDecreasing(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPElementSorter.HeapSortDoublesIndices(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion using heap sort algorithm. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPElementSorter.BuildDoubleIndexHeap(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Build heap for double indices
            </summary>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
            <param name="sortedIndices">Indices of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPElementSorter.SiftDoubleIndices(System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Single},System.Int32,System.Int32)">
            <summary>
            Sift double indices
            </summary>
            <param name="sortedIndices">Indices of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/></param>
            <param name="begin">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPElementSorter.SortIntegersDecreasing(System.Int32[])">
            <summary>
            Sorts the given integers in a decreasing fashion.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPElementSorter.HeapSortIntegers(System.Int32[],System.Int32)">
            <summary>
            Sort the given integers in a decreasing fashion using heapsort algorithm
            </summary>
            <param name="values">Array of values to sort</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPElementSorter.BuildHeap(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Build heap
            </summary>
            <param name="values">Target values array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPElementSorter.Sift(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sift values
            </summary>
            <param name="values">Target value array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.ILUTPElementSorter.Exchange(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Exchange values in array
            </summary>
            <param name="values">Target values array</param>
            <param name="first">First value to exchange</param>
            <param name="second">Second value to exchange</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.MILU0Preconditioner">
            <summary>
            A simple milu(0) preconditioner.
            </summary>
            <remarks>
            Original Fortran code by Yousef Saad (07 January 2004)
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.MILU0Preconditioner.#ctor(System.Boolean)">
            <param name="modified">Use modified or standard ILU(0)</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.MILU0Preconditioner.UseModified">
            <summary>
            Gets or sets a value indicating whether to use modified or standard ILU(0).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.MILU0Preconditioner.IsInitialized">
            <summary>
            Gets a value indicating whether the preconditioner is initialized.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.MILU0Preconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix upon which the preconditioner is based. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square or is not an
            instance of SparseCompressedRowMatrixStorage.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.MILU0Preconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector b.</param>
            <param name="result">The left hand side vector x.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.MILU0Preconditioner.Compute(System.Int32,System.Single[],System.Int32[],System.Int32[],System.Single[],System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            MILU0 is a simple milu(0) preconditioner.
            </summary>
            <param name="n">Order of the matrix.</param>
            <param name="a">Matrix values in CSR format (input).</param>
            <param name="ja">Column indices (input).</param>
            <param name="ia">Row pointers (input).</param>
            <param name="alu">Matrix values in MSR format (output).</param>
            <param name="jlu">Row pointers and column indices (output).</param>
            <param name="ju">Pointer to diagonal elements (output).</param>
            <param name="modified">True if the modified/MILU algorithm should be used (recommended)</param>
            <returns>Returns 0 on success or k > 0 if a zero pivot was encountered at step k.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab">
            <summary>
            A Multiple-Lanczos Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Multiple-Lanczos Bi-Conjugate Gradient stabilized (ML(k)-BiCGStab) solver is an 'improvement'
            of the standard BiCgStab solver.
            </para>
            <para>
            The algorithm was taken from: <br/>
            ML(k)BiCGSTAB: A BiCGSTAB variant based on multiple Lanczos starting vectors
            <br/>
            Man-Chung Yeung and Tony F. Chan
            <br/>
            SIAM Journal of Scientific Computing
            <br/>
            Volume 21, Number 4, pp. 1263 - 1290
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab.DefaultNumberOfStartingVectors">
            <summary>
            The default number of starting vectors.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab._startingVectors">
            <summary>
            The collection of starting vectors which are used as the basis for the Krylov sub-space.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab._numberOfStartingVectors">
            <summary>
            The number of starting vectors used by the algorithm
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab.NumberOfStartingVectors">
            <summary>
            Gets or sets the number of starting vectors.
            </summary>
            <remarks>
            Must be larger than 1 and smaller than the number of variables in the matrix that
            for which this solver will be used.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab.ResetNumberOfStartingVectors">
            <summary>
            Resets the number of starting vectors to the default value.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab.StartingVectors">
            <summary>
            Gets or sets a series of orthonormal vectors which will be used as basis for the
            Krylov sub-space.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab.NumberOfStartingVectorsToCreate(System.Int32,System.Int32)">
            <summary>
            Gets the number of starting vectors to create
            </summary>
            <param name="maximumNumberOfStartingVectors">Maximum number</param>
            <param name="numberOfVariables">Number of variables</param>
            <returns>Number of starting vectors to create</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab.CreateStartingVectors(System.Int32,System.Int32)">
            <summary>
            Returns an array of starting vectors.
            </summary>
            <param name="maximumNumberOfStartingVectors">The maximum number of starting vectors that should be created.</param>
            <param name="numberOfVariables">The number of variables.</param>
            <returns>
             An array with starting vectors. The array will never be larger than the
             <paramref name="maximumNumberOfStartingVectors"/> but it may be smaller if
             the <paramref name="numberOfVariables"/> is smaller than
             the <paramref name="maximumNumberOfStartingVectors"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab.CreateVectorArray(System.Int32,System.Int32)">
            <summary>
            Create random vectors array
            </summary>
            <param name="arraySize">Number of vectors</param>
            <param name="vectorSize">Size of each vector</param>
            <returns>Array of random vectors</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/>A.</param>
            <param name="residual">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> data.</param>
            <param name="x">x <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> data.</param>
            <param name="b">b <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> data.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Single},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Single})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Solvers.TFQMR">
            <summary>
            A Transpose Free Quasi-Minimal Residual (TFQMR) iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The TFQMR algorithm was taken from: <br/>
            Iterative methods for sparse linear systems.
            <br/>
            Yousef Saad
            <br/>
            Algorithm is described in Chapter 7, section 7.4.3, page 219
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.TFQMR.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Single.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.TFQMR.IsEven(System.Int32)">
            <summary>
            Is <paramref name="number"/> even?
            </summary>
            <param name="number">Number to check</param>
            <returns><c>true</c> if <paramref name="number"/> even, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Solvers.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Single},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Single})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix">
            <summary>
            A Matrix with sparse storage, intended for very large matrices where most of the cells are zero.
            The underlying storage scheme is 3-array compressed-sparse-row (CSR) Format.
            <a href="http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29">Wikipedia - CSR</a>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the matrix.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage{System.Single})">
            <summary>
            Create a new sparse matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfArray(System.Single[0:,0:])">
            <summary>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Single}})">
            <summary>
            Create a new sparse matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfRowMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable.
            The enumerable is assumed to be in row-major order (row by row).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Single})">
            <summary>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfColumns(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfColumnArrays(System.Single[][])">
            <summary>
            Create a new sparse matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfColumnArrays(System.Collections.Generic.IEnumerable{System.Single[]})">
            <summary>
            Create a new sparse matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfColumnVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Single}[])">
            <summary>
            Create a new sparse matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfColumnVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Single}})">
            <summary>
            Create a new sparse matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfRows(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Single}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfRowArrays(System.Single[][])">
            <summary>
            Create a new sparse matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfRowArrays(System.Collections.Generic.IEnumerable{System.Single[]})">
            <summary>
            Create a new sparse matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfRowVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Single}[])">
            <summary>
            Create a new sparse matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfRowVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Single}})">
            <summary>
            Create a new sparse matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfDiagonalVector(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfDiagonalVector(System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfDiagonalArray(System.Single[])">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.OfDiagonalArray(System.Int32,System.Int32,System.Single[])">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.Create(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a new sparse matrix and initialize each value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Single})">
            <summary>
            Create a new sparse matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Single)">
            <summary>
            Create a new diagonal sparse matrix and initialize each diagonal value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Func{System.Int32,System.Single})">
            <summary>
            Create a new diagonal sparse matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.CreateIdentity(System.Int32)">
            <summary>
            Create a new square sparse identity matrix where each diagonal value is set to One.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.LowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.UpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyLowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.StrictlyUpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.FrobeniusNorm">
            <summary>Calculates the entry-wise Frobenius norm of this matrix.</summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Matrix{System.Single},MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.DoRemainder(System.Single,MathNet.Numerics.LinearAlgebra.Matrix{System.Single})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.IsSymmetric">
            <summary>
            Evaluates whether this matrix is symmetric.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,System.Single)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Multiply(System.Single,MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseVector,MathNet.Numerics.LinearAlgebra.Single.SparseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Single.SparseMatrix,System.Single)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.SparseVector">
            <summary>
            A vector with sparse storage, intended for very large vectors where most of the cells are zero.
            </summary>
            <remarks>The sparse vector is not thread safe.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Single.SparseVector.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the vector.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage{System.Single})">
            <summary>
            Create a new sparse vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.#ctor(System.Int32)">
            <summary>
            Create a new sparse vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Create a new sparse vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Create a new sparse vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Single}})">
            <summary>
            Create a new sparse vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.Create(System.Int32,System.Single)">
            <summary>
            Create a new sparse vector and initialize each value using the provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.Create(System.Int32,System.Func{System.Int32,System.Single})">
            <summary>
            Create a new sparse vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoAdd(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            Warning, the new 'sparse vector' with a non-zero scalar added to it will be a 100% filled
            sparse vector and very inefficient. Would be better to work with a dense vector instead.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoSubtract(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>The sum of a[i]*b[i] for all i.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoRemainder(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Single.SparseVector,MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Single.SparseVector,MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseVector,System.Single)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Multiply(System.Single,MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Multiplies a vector with a scalar.
            </summary>
            <param name="leftSide">The scalar value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Single.SparseVector,MathNet.Numerics.LinearAlgebra.Single.SparseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Division(MathNet.Numerics.LinearAlgebra.Single.SparseVector,System.Single)">
            <summary>
            Divides a vector with a scalar.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The scalar value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.op_Modulus(MathNet.Numerics.LinearAlgebra.Single.SparseVector,System.Single)">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            of each element of the vector of the given divisor.
            </summary>
            <param name="leftSide">The vector whose elements we want to compute the modulus of.</param>
            <param name="rightSide">The divisor to use,</param>
            <returns>The result of the calculation</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.MaximumIndex">
            <summary>
            Returns the index of the maximum element.
            </summary>
            <returns>The index of maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.L1Norm">
            <summary>
            Calculates the L1 norm of the vector, also known as Manhattan norm.
            </summary>
            <returns>The sum of the absolute values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.InfinityNorm">
            <summary>
            Calculates the infinity norm of the vector.
            </summary>
            <returns>The maximum absolute value.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = ( ∑|this[i]|^p )^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a float sparse vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n,n,..', '(n,n,..)', '[n,n,...]', where n is a float.
            </summary>
            <returns>
            A float sparse vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Single.SparseVector@)">
            <summary>
            Converts the string representation of a real sparse vector to float-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.SparseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Single.SparseVector@)">
            <summary>
            Converts the string representation of a real sparse vector to float-precision sparse vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a real vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Single.Vector">
            <summary>
            <c>float</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.VectorStorage{System.Single})">
            <summary>
            Initializes a new instance of the Vector class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.CoerceZero(System.Double)">
            <summary>
            Set all values whose absolute value is smaller than the threshold to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoConjugate(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoNegate(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoAdd(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoAdd(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to add to this one.
            </param>
            <param name="result">
            The vector to store the result of the addition.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoSubtract(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to subtract.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoSubtract(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Subtracts another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">
            The vector to subtract from this one.
            </param>
            <param name="result">
            The vector to store the result of the subtraction.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoMultiply(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">
            The scalar to multiply.
            </param>
            <param name="result">
            The vector to store the result of the multiplication.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoDivide(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Divides each element of the vector by a scalar and stores the result in the result vector.
            </summary>
            <param name="divisor">
            The scalar to divide with.
            </param>
            <param name="result">
            The vector to store the result of the division.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoDivideByThis(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Divides a scalar by each element of the vector and stores the result in the result vector.
            </summary>
            <param name="dividend">The scalar to divide.</param>
            <param name="result">The vector to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <param name="result">The vector to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="divisor">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoPointwisePower(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise raise this vector to an exponent and store the result into the result vector.
            </summary>
            <param name="exponent">The exponent to raise this vector values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoPointwisePower(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise raise this vector to an exponent vector and store the result into the result vector.
            </summary>
            <param name="exponent">The exponent vector to raise this vector values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoPointwiseModulus(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise canonical modulus, where the result has the sign of the divisor,
            of this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="divisor">The pointwise denominator vector to use.</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoPointwiseRemainder(MathNet.Numerics.LinearAlgebra.Vector{System.Single},MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise remainder (% operator), where the result has the sign of the dividend,
            of this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="divisor">The pointwise denominator vector to use.</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoPointwiseExp(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise applies the exponential function to each value and stores the result into the result vector.
            </summary>
            <param name="result">The vector to store the result.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoPointwiseLog(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Pointwise applies the natural logarithm function to each value and stores the result into the result vector.
            </summary>
            <param name="result">The vector to store the result.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>The sum of a[i]*b[i] for all i.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoConjugateDotProduct(MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the dot product between the conjugate of this vector and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>The sum of conj(a[i])*b[i] for all i.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoModulus(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoModulusByThis(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given dividend for each element of the vector.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoRemainder(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for each element of the vector for the given divisor.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.DoRemainderByThis(System.Single,MathNet.Numerics.LinearAlgebra.Vector{System.Single})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given dividend for each element of the vector.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.AbsoluteMinimum">
            <summary>
            Returns the value of the absolute minimum element.
            </summary>
            <returns>The value of the absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.AbsoluteMaximum">
            <summary>
            Returns the value of the absolute maximum element.
            </summary>
            <returns>The value of the absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.L1Norm">
            <summary>
            Calculates the L1 norm of the vector, also known as Manhattan norm.
            </summary>
            <returns>The sum of the absolute values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.L2Norm">
            <summary>
            Calculates the L2 norm of the vector, also known as Euclidean norm.
            </summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.InfinityNorm">
            <summary>
            Calculates the infinity norm of the vector.
            </summary>
            <returns>The maximum absolute value.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            <c>Scalar ret = ( ∑|At(i)|^p )^(1/p)</c>
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.MaximumIndex">
            <summary>
            Returns the index of the maximum element.
            </summary>
            <returns>The index of maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.MinimumIndex">
            <summary>
            Returns the index of the minimum element.
            </summary>
            <returns>The index of minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Single.Vector.Normalize(System.Double)">
            <summary>
            Normalizes this vector to a unit vector with respect to the p-norm.
            </summary>
            <param name="p">
            The p value.
            </param>
            <returns>
            This vector normalized to a unit vector with respect to the p-norm.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix">
            <summary>
            A Matrix class with dense storage. The underlying storage is a one dimensional array in column-major order (column by column).
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix._rowCount">
            <summary>
            Number of rows.
            </summary>
            <remarks>Using this instead of the RowCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix._columnCount">
            <summary>
            Number of columns.
            </summary>
            <remarks>Using this instead of the ColumnCount property to speed up calculating
            a matrix index in the data array.</remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix._values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseColumnMajorMatrixStorage{System.Numerics.Complex})">
            <summary>
            Create a new dense matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new dense matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.#ctor(System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Create a new dense matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to be in column-major order (column by column) and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Create a new dense matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfArray(System.Numerics.Complex[0:,0:])">
            <summary>
            Create a new dense matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Numerics.Complex}})">
            <summary>
            Create a new dense matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable.
            The enumerable is assumed to be in column-major order (column by column).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfColumns(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfColumnArrays(System.Numerics.Complex[][])">
            <summary>
            Create a new dense matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfColumnArrays(System.Collections.Generic.IEnumerable{System.Numerics.Complex[]})">
            <summary>
            Create a new dense matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfColumnVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex}[])">
            <summary>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfColumnVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex}})">
            <summary>
            Create a new dense matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfRows(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new dense matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfRowArrays(System.Numerics.Complex[][])">
            <summary>
            Create a new dense matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfRowArrays(System.Collections.Generic.IEnumerable{System.Numerics.Complex[]})">
            <summary>
            Create a new dense matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfRowVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex}[])">
            <summary>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfRowVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex}})">
            <summary>
            Create a new dense matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfDiagonalVector(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfDiagonalVector(System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfDiagonalArray(System.Numerics.Complex[])">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.OfDiagonalArray(System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Create a new dense matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.Create(System.Int32,System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new dense matrix and initialize each value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new dense matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new diagonal dense matrix and initialize each diagonal value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Func{System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new diagonal dense matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.CreateIdentity(System.Int32)">
            <summary>
            Create a new square sparse identity matrix where each diagonal value is set to One.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense matrix with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.Values">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.L1Norm">
            <summary>Calculates the induced L1 norm of this matrix.</summary>
            <returns>The maximum absolute column sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.FrobeniusNorm">
            <summary>Calculates the entry-wise Frobenius norm of this matrix.</summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoConjugate(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Complex conjugates each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the conjugation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoAdd(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Add a scalar to each element of the matrix and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The matrix to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of add</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoSubtract(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Subtracts a scalar from each element of the matrix and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoConjugateTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with the conjugate transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoConjugateTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies the conjugate transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoConjugateTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoDivide(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="divisor">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.DoPointwisePower(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise raise this matrix to an exponent and store the result into the result matrix.
            </summary>
            <param name="exponent">The exponent to raise this matrix values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,System.Numerics.Complex)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Multiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,System.Numerics.Complex)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.IsSymmetric">
            <summary>
            Evaluates whether this matrix is symmetric.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix.IsHermitian">
            <summary>
            Evaluates whether this matrix is Hermitian (conjugate symmetric).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.DenseVector">
            <summary>
            A vector using dense storage.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DenseVector._length">
            <summary>
            Number of elements
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DenseVector._values">
            <summary>
            Gets the vector's data.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DenseVectorStorage{System.Numerics.Complex})">
            <summary>
            Create a new dense vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.#ctor(System.Int32)">
            <summary>
            Create a new dense vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.#ctor(System.Numerics.Complex[])">
            <summary>
            Create a new dense vector directly binding to a raw array.
            The array is used directly without copying.
            Very efficient, but changes to the array and the vector will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Create a new dense vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.OfArray(System.Numerics.Complex[])">
            <summary>
            Create a new dense vector as a copy of the given array.
            This new vector will be independent from the array.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new dense vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Numerics.Complex}})">
            <summary>
            Create a new dense vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Create(System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new dense vector and initialize each value using the provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Create(System.Int32,System.Func{System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new dense vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.CreateRandom(System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new dense vector with values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Values">
            <summary>
            Gets the vector's data.
            </summary>
            <value>The vector's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Explicit(MathNet.Numerics.LinearAlgebra.Complex.DenseVector)~System.Numerics.Complex[]">
            <summary>
            Returns a reference to the internal data structure.
            </summary>
            <param name="vector">The <c>DenseVector</c> whose internal data we are
            returning.</param>
            <returns>
            A reference to the internal date of the given vector.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Implicit(System.Numerics.Complex[])~MathNet.Numerics.LinearAlgebra.Complex.DenseVector">
            <summary>
            Returns a vector bound directly to a reference of the provided array.
            </summary>
            <param name="array">The array to bind to the <c>DenseVector</c> object.</param>
            <returns>
            A <c>DenseVector</c> whose values are bound to the given array.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoAdd(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoAdd(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Adds another vector to this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to add to this one.</param>
            <param name="result">The vector to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Addition(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Adds two <strong>Vectors</strong> together and returns the results.
            </summary>
            <param name="leftSide">One of the vectors to add.</param>
            <param name="rightSide">The other vector to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoSubtract(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoSubtract(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Subtracts another vector from this vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to subtract from this one.</param>
            <param name="result">The vector to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Returns a <strong>Vector</strong> containing the negated values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The vector to get the values from.</param>
            <returns>A vector containing the negated values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Subtraction(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Subtracts two <strong>Vectors</strong> and returns the results.
            </summary>
            <param name="leftSide">The vector to subtract from.</param>
            <param name="rightSide">The vector to subtract.</param>
            <returns>The result of the subtraction.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoNegate(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Negates vector and saves result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoConjugate(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Conjugates vector and save result to <paramref name="result"/>
            </summary>
            <param name="result">Target vector</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies a scalar to each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to multiply.</param>
            <param name="result">The vector to store the result of the multiplication.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoDotProduct(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Computes the dot product between this vector and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>The sum of a[i]*b[i] for all i.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoConjugateDotProduct(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Computes the dot product between the conjugate of this vector and another vector.
            </summary>
            <param name="other">The other vector.</param>
            <returns>The sum of conj(a[i])*b[i] for all i.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,System.Numerics.Complex)">
            <summary>
            Multiplies a vector with a complex.
            </summary>
            <param name="leftSide">The vector to scale.</param>
            <param name="rightSide">The Complex value.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Multiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Multiplies a vector with a complex.
            </summary>
            <param name="leftSide">The Complex value.</param>
            <param name="rightSide">The vector to scale.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,MathNet.Numerics.LinearAlgebra.Complex.DenseVector)">
            <summary>
            Computes the dot product between two <strong>Vectors</strong>.
            </summary>
            <param name="leftSide">The left row vector.</param>
            <param name="rightSide">The right column vector.</param>
            <returns>The dot product between the two vectors.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> are not the same size.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.op_Division(MathNet.Numerics.LinearAlgebra.Complex.DenseVector,System.Numerics.Complex)">
            <summary>
            Divides a vector with a complex.
            </summary>
            <param name="leftSide">The vector to divide.</param>
            <param name="rightSide">The Complex value.</param>
            <returns>The result of the division.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.AbsoluteMinimumIndex">
            <summary>
            Returns the index of the absolute minimum element.
            </summary>
            <returns>The index of absolute minimum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.AbsoluteMaximumIndex">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Sum">
            <summary>
            Computes the sum of the vector's elements.
            </summary>
            <returns>The sum of the vector's elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.L1Norm">
            <summary>
            Calculates the L1 norm of the vector, also known as Manhattan norm.
            </summary>
            <returns>The sum of the absolute values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.L2Norm">
            <summary>
            Calculates the L2 norm of the vector, also known as Euclidean norm.
            </summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.InfinityNorm">
            <summary>
            Calculates the infinity norm of the vector.
            </summary>
            <returns>The maximum absolute value.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Norm(System.Double)">
            <summary>
            Computes the p-Norm.
            </summary>
            <param name="p">The p value.</param>
            <returns>Scalar <c>ret = ( ∑|this[i]|^p )^(1/p)</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="other">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Pointwise divide this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="divisor">The vector to pointwise divide this one by.</param>
            <param name="result">The vector to store the result of the pointwise division.</param>
            <remarks></remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.DoPointwisePower(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Pointwise raise this vector to an exponent vector and store the result into the result vector.
            </summary>
            <param name="exponent">The exponent vector to raise this vector values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates a Complex dense vector based on a string. The string can be in the following formats (without the
            quotes): 'n', 'n;n;..', '(n;n;..)', '[n;n;...]', where n is a double.
            </summary>
            <returns>
            A Complex dense vector containing the values specified by the given string.
            </returns>
            <param name="value">
            the string to parse.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information.
            </param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.TryParse(System.String,MathNet.Numerics.LinearAlgebra.Complex.DenseVector@)">
            <summary>
            Converts the string representation of a complex dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex vector to convert.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DenseVector.TryParse(System.String,System.IFormatProvider,MathNet.Numerics.LinearAlgebra.Complex.DenseVector@)">
            <summary>
            Converts the string representation of a complex dense vector to double-precision dense vector equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">
            A string containing a complex vector to convert.
            </param>
            <param name="formatProvider">
            An <see cref="T:System.IFormatProvider"/> that supplies culture-specific formatting information about value.
            </param>
            <param name="result">
            The parsed value.
            </param>
            <returns>
            If the conversion succeeds, the result will contain a complex number equivalent to value.
            Otherwise the result will be <c>null</c>.
            </returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix">
            <summary>
            A matrix type for diagonal matrices.
            </summary>
            <remarks>
            Diagonal matrices can be non-square matrices but the diagonal always starts
            at element 0,0. A diagonal matrix will throw an exception if non diagonal
            entries are set. The exception to this is when the off diagonal elements are
            0.0 or NaN; these settings will cause no change to the diagonal matrix.
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix._data">
            <summary>
            Gets the matrix's data.
            </summary>
            <value>The matrix's data.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.DiagonalMatrixStorage{System.Numerics.Complex})">
            <summary>
            Create a new diagonal matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns.
            All diagonal cells of the matrix will be initialized to the provided value, all non-diagonal ones to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.#ctor(System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Create a new diagonal matrix with the given number of rows and columns directly binding to a raw array.
            The array is assumed to contain the diagonal elements only and is used directly without copying.
            Very efficient, but changes to the array and the matrix will affect each other.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Create a new diagonal matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            The matrix to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.OfArray(System.Numerics.Complex[0:,0:])">
            <summary>
            Create a new diagonal matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            The array to copy from must be diagonal as well.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.OfIndexedDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Numerics.Complex}})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.OfDiagonal(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value from the provided enumerable.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new diagonal matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.CreateIdentity(System.Int32)">
            <summary>
            Create a new square sparse identity matrix where each diagonal value is set to One.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.CreateRandom(System.Int32,System.Int32,MathNet.Numerics.Distributions.IContinuousDistribution)">
            <summary>
            Create a new diagonal matrix with diagonal values sampled from the provided random distribution.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoConjugate(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Complex conjugates each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the conjugation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoConjugateTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with the conjugate transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoConjugateTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoConjugateTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies the conjugate transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoDivide(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="divisor">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.DoDivideByThis(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Divides a scalar by each element of the matrix and stores the result in the result matrix.
            </summary>
            <param name="dividend">The scalar to add.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Determinant">
            <summary>
            Computes the determinant of this matrix.
            </summary>
            <returns>The determinant of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Diagonal">
            <summary>
            Returns the elements of the diagonal in a <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.DenseVector"/>.
            </summary>
            <returns>The elements of the diagonal.</returns>
            <remarks>For non-square matrices, the method returns Min(Rows, Columns) elements where
            i == j (i is the row index, and j is the column index).</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.SetDiagonal(System.Numerics.Complex[])">
            <summary>
            Copies the values of the given array to the diagonal.
            </summary>
            <param name="source">The array to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.SetDiagonal(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Copies the values of the given <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/> to the diagonal.
            </summary>
            <param name="source">The vector to copy the values from. The length of the vector should be
            Min(Rows, Columns).</param>
            <exception cref="T:System.ArgumentException">If the length of <paramref name="source"/> does not
            equal Min(Rows, Columns).</exception>
            <remarks>For non-square matrices, the elements of <paramref name="source"/> are copied to
            this[i,i].</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.L1Norm">
            <summary>Calculates the induced L1 norm of this matrix.</summary>
            <returns>The maximum absolute column sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.L2Norm">
            <summary>Calculates the induced L2 norm of the matrix.</summary>
            <returns>The largest singular value of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.FrobeniusNorm">
            <summary>Calculates the Frobenius norm of this matrix.</summary>
            <returns>The Frobenius norm of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.ConditionNumber">
            <summary>Calculates the condition number of this matrix.</summary>
            <returns>The condition number of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.Inverse">
            <summary>Computes the inverse of this matrix.</summary>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix"/> is singular.</exception>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.SubMatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex">The row to start copying from.</param>
            <param name="rowCount">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex">The column to start copying from.</param>
            <param name="columnCount">The number of columns to copy. Must be positive.</param>
            <returns>The requested sub-matrix.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If: <list><item><paramref name="rowIndex"/> is
            negative, or greater than or equal to the number of rows.</item>
            <item><paramref name="columnIndex"/> is negative, or greater than or equal to the number
            of columns.</item>
            <item><c>(columnIndex + columnLength) &gt;= Columns</c></item>
            <item><c>(rowIndex + rowLength) &gt;= Rows</c></item></list></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="rowCount"/> or <paramref name="columnCount"/>
            is not positive.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.PermuteColumns(MathNet.Numerics.Permutation)">
            <summary>
            Permute the columns of a matrix according to a permutation.
            </summary>
            <param name="p">The column permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.PermuteRows(MathNet.Numerics.Permutation)">
            <summary>
            Permute the rows of a matrix according to a permutation.
            </summary>
            <param name="p">The row permutation to apply to this matrix.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown</exception>
            <remarks>Permutation in diagonal matrix are senseless, because of matrix nature</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.IsSymmetric">
            <summary>
            Evaluates whether this matrix is symmetric.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.DiagonalMatrix.IsHermitian">
            <summary>
            Evaluates whether this matrix is Hermitian (conjugate symmetric).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Cholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Cholesky.Determinant">
            <summary>
            Gets the determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Cholesky.DeterminantLn">
            <summary>
            Gets the log determinant of the matrix for which the Cholesky matrix was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for dense matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky.Create(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseCholesky.Factorize(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Calculates the Cholesky factorization of the input matrix.
            </summary>
            <param name="matrix">The matrix to be factorized<see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="matrix"/> does not have the same dimensions as the existing factor.</exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd">
            <summary>
            Eigenvalues and eigenvectors of a complex matrix.
            </summary>
            <remarks>
            If A is Hermitian, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is Hermitian.
            I.e. A = V*D*V' and V*VH=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.Create(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,MathNet.Numerics.LinearAlgebra.Symmetricity)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="symmetricity">If it is known whether the matrix is symmetric or not the routine can skip checking it itself.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.SymmetricTridiagonalize(System.Numerics.Complex[],System.Double[],System.Double[],System.Numerics.Complex[],System.Int32)">
            <summary>
            Reduces a complex Hermitian matrix to a real symmetric tridiagonal matrix using unitary similarity transformations.
            </summary>
            <param name="matrixA">Source matrix to reduce</param>
            <param name="d">Output: Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Output: Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="tau">Output: Arrays that contains further information about the transformations.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures HTRIDI by
            Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.SymmetricDiagonalize(System.Numerics.Complex[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.SymmetricUntridiagonalize(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[],System.Int32)">
            <summary>
            Determines eigenvectors by undoing the symmetric tridiagonalize transformation
            </summary>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="matrixA">Previously tridiagonalized matrix by <see cref="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.SymmetricTridiagonalize(System.Numerics.Complex[],System.Double[],System.Double[],System.Numerics.Complex[],System.Int32)"/>.</param>
            <param name="tau">Contains further information about the transformations</param>
            <param name="order">Input matrix order</param>
            <remarks>This is derived from the Algol procedures HTRIBK, by
            by Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.NonsymmetricReduceToHessenberg(System.Numerics.Complex[],System.Numerics.Complex[],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.NonsymmetricReduceHessenberToRealSchur(System.Numerics.Complex[],System.Numerics.Complex[],System.Numerics.Complex[],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="vectorV">Data array of the eigenvectors</param>
            <param name="dataEv">Data array of matrix V (eigenvectors)</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseEvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any complex square matrix A may be decomposed as A = QR where Q is an unitary mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt"/> class. This object creates an unitary matrix
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt.Factorize(System.Numerics.Complex[],System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Factorize matrix using the modified Gram-Schmidt method.
            </summary>
            <param name="q">Initial matrix. On exit is replaced by <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> Q.</param>
            <param name="rowsQ">Number of rows in <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> Q.</param>
            <param name="columnsQ">Number of columns in <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> Q.</param>
            <param name="r">On exit is filled by <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> R.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU.Create(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR.Tau">
            <summary>
             Gets or sets Tau vector. Contains additional information on Q - used for native solver.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR.Create(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,MathNet.Numerics.LinearAlgebra.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The type of QR factorization to perform.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseQR.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers.
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix;
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseSvd.Create(MathNet.Numerics.LinearAlgebra.Complex.DenseMatrix,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If SVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.DenseSvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Evd">
            <summary>
            Eigenvalues and eigenvectors of a real matrix.
            </summary>
            <remarks>
            If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is orthogonal.
            I.e. A = V*D*V' and V*VT=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Evd.Determinant">
            <summary>
            Gets the absolute value of determinant of the square matrix for which the EVD was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Evd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Evd.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.GramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.GramSchmidt.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.GramSchmidt.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.LU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            <para>In the Math.Net implementation we also store a set of pivot elements for increased
            numerical stability. The pivot elements encode a permutation matrix P such that P*A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.LU.Determinant">
            <summary>
            Gets the determinant of the matrix for which the LU factorization was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.QR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A (m x n) may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Factorization.QRMethod.Full"/> factorization is performed, the resulting Q matrix is an m x m matrix
            and the R matrix is an m x n matrix. If a <seealso cref="F:MathNet.Numerics.LinearAlgebra.Factorization.QRMethod.Thin"/> factorization is performed, the
            resulting Q matrix is an m x n matrix and the R matrix is an n x n matrix.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.QR.Determinant">
            <summary>
            Gets the absolute determinant value of the matrix for which the QR matrix was computed.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.QR.IsFullRank">
            <summary>
            Gets a value indicating whether the matrix is full rank or not.
            </summary>
            <value><c>true</c> if the matrix is full rank; otherwise <c>false</c>.</value>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Svd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD).</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers.
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix;
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Svd.Rank">
            <summary>
            Gets the effective numerical matrix rank.
            </summary>
            <value>The number of non-negligible singular values.</value>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Svd.L2Norm">
            <summary>
            Gets the two norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.
            </summary>
            <returns>The 2-norm of the <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Svd.ConditionNumber">
            <summary>
            Gets the condition number <b>max(S) / min(S)</b>
            </summary>
            <returns>The condition number.</returns>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Factorization.Svd.Determinant">
            <summary>
            Gets the determinant of the square matrix for which the SVD was computed.
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky">
            <summary>
            <para>A class which encapsulates the functionality of a Cholesky factorization for user matrices.</para>
            <para>For a symmetric, positive definite matrix A, the Cholesky factorization
            is an lower triangular matrix L so that A = L*L'.</para>
            </summary>
            <remarks>
            The computation of the Cholesky factorization is done at construction time. If the matrix is not symmetric
            or positive definite, the constructor will throw an exception.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky.DoCholesky(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Computes the Cholesky factorization in-place.
            </summary>
            <param name="factor">On entry, the matrix to factor. On exit, the Cholesky factor matrix</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="factor"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="factor"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="factor"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky"/> class. This object will compute the
            Cholesky factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky.Factorize(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Calculates the Cholesky factorization of the input matrix.
            </summary>
            <param name="matrix">The matrix to be factorized<see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not positive definite.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="matrix"/> does not have the same dimensions as the existing factor.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky.DoCholeskyStep(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32,System.Numerics.Complex[],System.Int32)">
            <summary>
            Calculate Cholesky step
            </summary>
            <param name="data">Factor matrix</param>
            <param name="rowDim">Number of rows</param>
            <param name="firstCol">Column start</param>
            <param name="colLimit">Total columns</param>
            <param name="multipliers">Multipliers calculated previously</param>
            <param name="availableCores">Number of available processors</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserCholesky.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A Cholesky factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd">
            <summary>
            Eigenvalues and eigenvectors of a complex matrix.
            </summary>
            <remarks>
            If A is Hermitian, then A = V*D*V' where the eigenvalue matrix D is
            diagonal and the eigenvector matrix V is Hermitian.
            I.e. A = V*D*V' and V*VH=I.
            If A is not symmetric, then the eigenvalue matrix D is block diagonal
            with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            lambda + i*mu, in 2-by-2 blocks, [lambda, mu; -mu, lambda].  The
            columns of V represent the eigenvectors in the sense that A*V = V*D,
            i.e. A.Multiply(V) equals V.Multiply(D).  The matrix V may be badly
            conditioned, or even singular, so the validity of the equation
            A = V*D*Inverse(V) depends upon V.Condition().
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Symmetricity)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd"/> class. This object will compute the
            the eigenvalue decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="symmetricity">If it is known whether the matrix is symmetric or not the routine can skip checking it itself.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If EVD algorithm failed to converge with matrix <paramref name="matrix"/>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.SymmetricTridiagonalize(System.Numerics.Complex[0:,0:],System.Double[],System.Double[],System.Numerics.Complex[],System.Int32)">
            <summary>
            Reduces a complex Hermitian matrix to a real symmetric tridiagonal matrix using unitary similarity transformations.
            </summary>
            <param name="matrixA">Source matrix to reduce</param>
            <param name="d">Output: Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Output: Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="tau">Output: Arrays that contains further information about the transformations.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures HTRIDI by
            Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.SymmetricDiagonalize(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Double[],System.Double[],System.Int32)">
            <summary>
            Symmetric tridiagonal QL algorithm.
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="d">Arrays for internal storage of real parts of eigenvalues</param>
            <param name="e">Arrays for internal storage of imaginary parts of eigenvalues</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures tql2, by
            Bowdler, Martin, Reinsch, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.SymmetricUntridiagonalize(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Numerics.Complex[0:,0:],System.Numerics.Complex[],System.Int32)">
            <summary>
            Determines eigenvectors by undoing the symmetric tridiagonalize transformation
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="matrixA">Previously tridiagonalized matrix by <see cref="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.SymmetricTridiagonalize(System.Numerics.Complex[0:,0:],System.Double[],System.Double[],System.Numerics.Complex[],System.Int32)"/>.</param>
            <param name="tau">Contains further information about the transformations</param>
            <param name="order">Input matrix order</param>
            <remarks>This is derived from the Algol procedures HTRIBK, by
            by Smith, Boyle, Dongarra, Garbow, Ikebe, Klema, Moler, and Wilkinson, Handbook for
            Auto. Comp., Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.NonsymmetricReduceToHessenberg(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Numerics.Complex[0:,0:],System.Int32)">
            <summary>
            Nonsymmetric reduction to Hessenberg form.
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedures orthes and ortran,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutines in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.NonsymmetricReduceHessenberToRealSchur(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},System.Numerics.Complex[0:,0:],System.Int32)">
            <summary>
            Nonsymmetric reduction from Hessenberg to real Schur form.
            </summary>
            <param name="eigenVectors">The eigen vectors to work on.</param>
            <param name="eigenValues">The eigen values to work on.</param>
            <param name="matrixH">Array for internal storage of nonsymmetric Hessenberg form.</param>
            <param name="order">Order of initial matrix</param>
            <remarks>This is derived from the Algol procedure hqr2,
            by Martin and Wilkinson, Handbook for Auto. Comp.,
            Vol.ii-Linear Algebra, and the corresponding
            Fortran subroutine in EISPACK.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserEvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A EVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserGramSchmidt">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition Modified Gram-Schmidt Orthogonalization.</para>
            <para>Any complex square matrix A may be decomposed as A = QR where Q is an unitary mxn matrix and R is an nxn upper triangular matrix.</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by modified Gram-Schmidt Orthogonalization.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserGramSchmidt.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserGramSchmidt"/> class. This object creates an unitary matrix
            using the modified Gram-Schmidt method.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> row count is less then column count</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is rank deficient</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserGramSchmidt.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU">
            <summary>
            <para>A class which encapsulates the functionality of an LU factorization.</para>
            <para>For a matrix A, the LU factorization is a pair of lower triangular matrix L and
            upper triangular matrix U so that A = L*U.</para>
            </summary>
            <remarks>
            The computation of the LU factorization is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU"/> class. This object will compute the
            LU factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <c>AX = B</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>B</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>X</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <c>Ax = b</c>, with A LU factorized.
            </summary>
            <param name="input">The right hand side vector, <c>b</c>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <c>x</c>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserLU.Inverse">
            <summary>
            Returns the inverse of this matrix. The inverse is calculated using LU decomposition.
            </summary>
            <returns>The inverse of this matrix.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR">
            <summary>
            <para>A class which encapsulates the functionality of the QR decomposition.</para>
            <para>Any real square matrix A may be decomposed as A = QR where Q is an orthogonal matrix
            (its columns are orthogonal unit vectors meaning QTQ = I) and R is an upper triangular matrix
            (also called right triangular matrix).</para>
            </summary>
            <remarks>
            The computation of the QR decomposition is done at construction time by Householder transformation.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Factorization.QRMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR"/> class. This object will compute the
            QR factorization when the constructor is called and cache it's factorization.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="method">The QR factorization method to use.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR.GenerateColumn(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Int32,System.Int32)">
            <summary>
            Generate column from initial matrix to work array
            </summary>
            <param name="a">Initial matrix</param>
            <param name="row">The first row</param>
            <param name="column">Column index</param>
            <returns>Generated vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR.ComputeQR(System.Numerics.Complex[],MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Perform calculation of Q or R
            </summary>
            <param name="u">Work array</param>
            <param name="a">Q or R matrices</param>
            <param name="rowStart">The first row</param>
            <param name="rowDim">The last row</param>
            <param name="columnStart">The first column</param>
            <param name="columnDim">The last column</param>
            <param name="availableCores">Number of available CPUs</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserQR.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A QR factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd">
            <summary>
            <para>A class which encapsulates the functionality of the singular value decomposition (SVD) for <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>.</para>
            <para>Suppose M is an m-by-n matrix whose entries are real numbers.
            Then there exists a factorization of the form M = UΣVT where:
            - U is an m-by-m unitary matrix;
            - Σ is m-by-n diagonal matrix with nonnegative real numbers on the diagonal;
            - VT denotes transpose of V, an n-by-n unitary matrix;
            Such a factorization is called a singular-value decomposition of M. A common convention is to order the diagonal
            entries Σ(i,i) in descending order. In this case, the diagonal matrix Σ is uniquely determined
            by M (though the matrices U and V are not). The diagonal entries of Σ are known as the singular values of M.</para>
            </summary>
            <remarks>
            The computation of the singular value decomposition is done at construction time.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Create(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd"/> class. This object will compute the
            the singular value decomposition when the constructor is called and cache it's decomposition.
            </summary>
            <param name="matrix">The matrix to factor.</param>
            <param name="computeVectors">Compute the singular U and VT vectors or not.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <c>null</c>.</exception>
            <exception cref="T:MathNet.Numerics.NonConvergenceException"></exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Csign(System.Numerics.Complex,System.Numerics.Complex)">
            <summary>
            Calculates absolute value of <paramref name="z1"/> multiplied on signum function of <paramref name="z2"/>
            </summary>
            <param name="z1">Complex value z1</param>
            <param name="z2">Complex value z2</param>
            <returns>Result multiplication of signum function and absolute value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Swap(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32)">
            <summary>
            Interchanges two vectors  <paramref name="columnA"/>  and  <paramref name="columnB"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Column A index to swap</param>
            <param name="columnB">Column B index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.CscalColumn(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32,System.Numerics.Complex)">
            <summary>
            Scale column <paramref name="column"/> by <paramref name="z"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/> </param>
            <param name="column">Column to scale</param>
            <param name="rowStart">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.CscalVector(System.Numerics.Complex[],System.Int32,System.Numerics.Complex)">
            <summary>
            Scale vector <paramref name="a"/> by <paramref name="z"/> starting from index <paramref name="start"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="start">Row to scale from</param>
            <param name="z">Scale value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Srotg(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Given the Cartesian coordinates (da, db) of a point p, these function return the parameters da, db, c, and s
            associated with the Givens rotation that zeros the y-coordinate of the point.
            </summary>
            <param name="da">Provides the x-coordinate of the point p. On exit contains the parameter r associated with the Givens rotation</param>
            <param name="db">Provides the y-coordinate of the point p. On exit contains the parameter z associated with the Givens rotation</param>
            <param name="c">Contains the parameter c associated with the Givens rotation</param>
            <param name="s">Contains the parameter s associated with the Givens rotation</param>
            <remarks>This is equivalent to the DROTG LAPACK routine.</remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Cnrm2Column(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate Norm 2 of the column <paramref name="column"/> in matrix <paramref name="a"/> starting from row <paramref name="rowStart"/>
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="column">Column index</param>
            <param name="rowStart">Start row index</param>
            <returns>Norm2 (Euclidean norm) of the column</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Cnrm2Vector(System.Numerics.Complex[],System.Int32)">
            <summary>
            Calculate Norm 2 of the vector <paramref name="a"/> starting from index <paramref name="rowStart"/>
            </summary>
            <param name="a">Source vector</param>
            <param name="rowStart">Start index</param>
            <returns>Norm2 (Euclidean norm) of the vector</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Cdotc(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate dot product of <paramref name="columnA"/> and <paramref name="columnB"/> conjugating the first vector.
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="rowStart">Starting row index</param>
            <returns>Dot product value</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Csrot(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Performs rotation of points in the plane. Given two vectors x <paramref name="columnA"/> and y <paramref name="columnB"/>,
            each vector element of these vectors is replaced as follows: x(i) = c*x(i) + s*y(i); y(i) = c*y(i) - s*x(i)
            </summary>
            <param name="a">Source matrix</param>
            <param name="rowCount">The number of rows in <paramref name="a"/></param>
            <param name="columnA">Index of column A</param>
            <param name="columnB">Index of column B</param>
            <param name="c">scalar cos value</param>
            <param name="s">scalar sin value</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>AX = B</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>B</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>X</b>.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Factorization.UserSvd.Solve(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Solves a system of linear equations, <b>Ax = b</b>, with A SVD factorized.
            </summary>
            <param name="input">The right hand side vector, <b>b</b>.</param>
            <param name="result">The left hand side <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/>, <b>x</b>.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix">
            <summary>
            <c>Complex</c> version of the <see cref="T:MathNet.Numerics.LinearAlgebra.Matrix`1"/> class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.MatrixStorage{System.Numerics.Complex})">
            <summary>
            Initializes a new instance of the Matrix class.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.CoerceZero(System.Double)">
            <summary>
            Set all values whose absolute value is smaller than the threshold to zero.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.ConjugateTranspose">
            <summary>
            Returns the conjugate transpose of this matrix.
            </summary>
            <returns>The conjugate transpose of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.ConjugateTranspose(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the conjugate transpose of this matrix into the result matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoConjugate(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Complex conjugates each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the conjugation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoAdd(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Add a scalar to each element of the matrix and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to add.</param>
            <param name="result">The matrix to store the result of the addition.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoSubtract(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Subtracts a scalar from each element of the vector and stores the result in the result vector.
            </summary>
            <param name="scalar">The scalar to subtract.</param>
            <param name="result">The matrix to store the result of the subtraction.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoDivide(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Divides each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="divisor">The scalar to divide the matrix with.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoDivideByThis(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Divides a scalar by each element of the matrix and stores the result in the result matrix.
            </summary>
            <param name="dividend">The scalar to divide by each element of the matrix.</param>
            <param name="result">The matrix to store the result of the division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoConjugateTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with the conjugate transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoConjugateTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies the transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoConjugateTransposeThisAndMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies the conjugate transpose of this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoPointwisePower(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise raise this matrix to an exponent and store the result into the result matrix.
            </summary>
            <param name="exponent">The exponent to raise this matrix values to.</param>
            <param name="result">The matrix to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoPointwisePower(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise raise this matrix to an exponent and store the result into the result matrix.
            </summary>
            <param name="exponent">The exponent to raise this matrix values to.</param>
            <param name="result">The vector to store the result of the pointwise power.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoPointwiseModulus(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise canonical modulus, where the result has the sign of the divisor,
            of this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The pointwise denominator matrix to use</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoPointwiseRemainder(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise remainder (% operator), where the result has the sign of the dividend,
            of this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The pointwise denominator matrix to use</param>
            <param name="result">The result of the modulus.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoModulus(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoModulusByThis(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Computes the canonical modulus, where the result has the sign of the divisor,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoRemainder(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given divisor each element of the matrix.
            </summary>
            <param name="divisor">The scalar denominator to use.</param>
            <param name="result">Matrix to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoRemainderByThis(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Computes the remainder (% operator), where the result has the sign of the dividend,
            for the given dividend for each element of the matrix.
            </summary>
            <param name="dividend">The scalar numerator to use.</param>
            <param name="result">A vector to store the results in.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoPointwiseExp(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise applies the exponential function to each value and stores the result into the result matrix.
            </summary>
            <param name="result">The matrix to store the result.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.DoPointwiseLog(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise applies the natural logarithm function to each value and stores the result into the result matrix.
            </summary>
            <param name="result">The matrix to store the result.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.PseudoInverse">
            <summary>
            Computes the Moore-Penrose Pseudo-Inverse of this matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.Trace">
            <summary>
            Computes the trace of this matrix.
            </summary>
            <returns>The trace of this matrix</returns>
            <exception cref="T:System.ArgumentException">If the matrix is not square</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.L1Norm">
            <summary>Calculates the induced L1 norm of this matrix.</summary>
            <returns>The maximum absolute column sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.FrobeniusNorm">
            <summary>Calculates the entry-wise Frobenius norm of this matrix.</summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.RowNorms(System.Double)">
            <summary>
            Calculates the p-norms of all row vectors.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.ColumnNorms(System.Double)">
            <summary>
            Calculates the p-norms of all column vectors.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.NormalizeRows(System.Double)">
            <summary>
            Normalizes all row vectors to a unit p-norm.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.NormalizeColumns(System.Double)">
            <summary>
            Normalizes all column vectors to a unit p-norm.
            Typical values for p are 1.0 (L1, Manhattan norm), 2.0 (L2, Euclidean norm) and positive infinity (infinity norm)
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.RowSums">
            <summary>
            Calculates the value sum of each row vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.RowAbsoluteSums">
            <summary>
            Calculates the absolute value sum of each row vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.ColumnSums">
            <summary>
            Calculates the value sum of each column vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.ColumnAbsoluteSums">
            <summary>
            Calculates the absolute value sum of each column vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Matrix.IsHermitian">
            <summary>
            Evaluates whether this matrix is Hermitian (conjugate symmetric).
            </summary>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.BiCgStab">
            <summary>
            A Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Bi-Conjugate Gradient Stabilized (BiCGStab) solver is an 'improvement'
            of the standard Conjugate Gradient (CG) solver. Unlike the CG solver the
            BiCGStab can be used on non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The Bi-CGSTAB algorithm was taken from: <br/>
            Templates for the solution of linear systems: Building blocks
            for iterative methods
            <br/>
            Richard Barrett, Michael Berry, Tony F. Chan, James Demmel,
            June M. Donato, Jack Dongarra, Victor Eijkhout, Roldan Pozo,
            Charles Romine and Henk van der Vorst
            <br/>
            Url: <a href="http://www.netlib.org/templates/Templates.html">http://www.netlib.org/templates/Templates.html</a>
            <br/>
            Algorithm is described in Chapter 2, section 2.3.8, page 27
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.BiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.BiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Numerics.Complex})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>, <c>A</c>.</param>
            <param name="input">The solution <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>, <c>b</c>.</param>
            <param name="result">The result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>, <c>x</c>.</param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.CompositeSolver">
            <summary>
            A composite matrix solver. The actual solver is made by a sequence of
            matrix solvers.
            </summary>
            <remarks>
            <para>
            Solver based on:<br />
            Faster PDE-based simulations using robust composite linear solvers<br />
            S. Bhowmicka, P. Raghavan a,*, L. McInnes b, B. Norris<br />
            Future Generation Computer Systems, Vol 20, 2004, pp 373�387<br />
            </para>
            <para>
            Note that if an iterator is passed to this solver it will be used for all the sub-solvers.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.CompositeSolver._solvers">
            <summary>
            The collection of solvers that will be used
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.CompositeSolver.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Numerics.Complex})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.DiagonalPreconditioner">
            <summary>
            A diagonal preconditioner. The preconditioner uses the inverse
            of the matrix diagonal as preconditioning values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.DiagonalPreconditioner._inverseDiagonals">
            <summary>
            The inverse of the matrix diagonal.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.DiagonalPreconditioner.DiagonalEntries">
            <summary>
            Returns the decomposed matrix diagonal.
            </summary>
            <returns>The matrix diagonal.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.DiagonalPreconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/> upon which this preconditioner is based.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null" />. </exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.DiagonalPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.GpBiCg">
            <summary>
            A Generalized Product Bi-Conjugate Gradient iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Generalized Product Bi-Conjugate Gradient (GPBiCG) solver is an
            alternative version of the Bi-Conjugate Gradient stabilized (CG) solver.
            Unlike the CG solver the GPBiCG solver can be used on
            non-symmetric matrices. <br/>
            Note that much of the success of the solver depends on the selection of the
            proper preconditioner.
            </para>
            <para>
            The GPBiCG algorithm was taken from: <br/>
            GPBiCG(m,l): A hybrid of BiCGSTAB and GPBiCG methods with
            efficiency and robustness
            <br/>
            S. Fujino
            <br/>
            Applied Numerical Mathematics, Volume 41, 2002, pp 107 - 117
            <br/>
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.GpBiCg._numberOfBiCgStabSteps">
            <summary>
            Indicates the number of <c>BiCGStab</c> steps should be taken
            before switching.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.GpBiCg._numberOfGpbiCgSteps">
            <summary>
            Indicates the number of <c>GPBiCG</c> steps should be taken
            before switching.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.GpBiCg.NumberOfBiCgStabSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>BiCgStab</c> algorithm
            before switching over to the <c>GPBiCG</c> algorithm.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.GpBiCg.NumberOfGpBiCgSteps">
            <summary>
            Gets or sets the number of steps taken with the <c>GPBiCG</c> algorithm
            before switching over to the <c>BiCgStab</c> algorithm.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.GpBiCg.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.GpBiCg.ShouldRunBiCgStabSteps(System.Int32)">
            <summary>
            Decide if to do steps with BiCgStab
            </summary>
            <param name="iterationNumber">Number of iteration</param>
            <returns><c>true</c> if yes, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.GpBiCg.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Numerics.Complex})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILU0Preconditioner">
            <summary>
            An incomplete, level 0, LU factorization preconditioner.
            </summary>
            <remarks>
            The ILU(0) algorithm was taken from: <br/>
            Iterative methods for sparse linear systems <br/>
            Yousef Saad <br/>
            Algorithm is described in Chapter 10, section 10.3.2, page 275 <br/>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILU0Preconditioner._decompositionLU">
            <summary>
            The matrix holding the lower (L) and upper (U) matrices. The
            decomposition matrices are combined to reduce storage.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILU0Preconditioner.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILU0Preconditioner.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILU0Preconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix upon which the preconditioner is based. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILU0Preconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner">
            <summary>
            This class performs an Incomplete LU factorization with drop tolerance
            and partial pivoting. The drop tolerance indicates which additional entries
            will be dropped from the factorized LU matrices.
            </summary>
            <remarks>
            The ILUTP-Mem algorithm was taken from: <br/>
            ILUTP_Mem: a Space-Efficient Incomplete LU Preconditioner
            <br/>
            Tzu-Yi Chen, Department of Mathematics and Computer Science, <br/>
            Pomona College, Claremont CA 91711, USA <br/>
            Published in: <br/>
            Lecture Notes in Computer Science <br/>
            Volume 3046 / 2004 <br/>
            pp. 20 - 28 <br/>
            Algorithm is described in Section 2, page 22
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.DefaultFillLevel">
            <summary>
            The default fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.DefaultDropTolerance">
            <summary>
            The default drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner._upper">
            <summary>
            The decomposed upper triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner._lower">
            <summary>
            The decomposed lower triangular matrix.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner._pivots">
            <summary>
            The array containing the pivot values.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner._fillLevel">
            <summary>
            The fill level.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner._dropTolerance">
            <summary>
            The drop tolerance.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner._pivotTolerance">
            <summary>
            The pivot tolerance.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner"/> class with the default settings.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner"/> class with the specified settings.
            </summary>
            <param name="fillLevel">
            The amount of fill that is allowed in the matrix. The value is a fraction of
            the number of non-zero entries in the original matrix. Values should be positive.
            </param>
            <param name="dropTolerance">
            The absolute drop tolerance which indicates below what absolute value an entry
            will be dropped from the matrix. A drop tolerance of 0.0 means that no values
            will be dropped. Values should always be positive.
            </param>
            <param name="pivotTolerance">
            The pivot tolerance which indicates at what level pivoting will take place. A
            value of 0.0 means that no pivoting will take place.
            </param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.FillLevel">
            <summary>
            Gets or sets the amount of fill that is allowed in the matrix. The
            value is a fraction of the number of non-zero entries in the original
            matrix. The standard value is 200.
            </summary>
            <remarks>
            <para>
            Values should always be positive and can be higher than 1.0. A value lower
            than 1.0 means that the eventual preconditioner matrix will have fewer
            non-zero entries as the original matrix. A value higher than 1.0 means that
            the eventual preconditioner can have more non-zero values than the original
            matrix.
            </para>
            <para>
            Note that any changes to the <b>FillLevel</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.DropTolerance">
            <summary>
            Gets or sets the absolute drop tolerance which indicates below what absolute value
            an entry will be dropped from the matrix. The standard value is 0.0001.
            </summary>
            <remarks>
            <para>
            The values should always be positive and can be larger than 1.0. A low value will
            keep more small numbers in the preconditioner matrix. A high value will remove
            more small numbers from the preconditioner matrix.
            </para>
            <para>
            Note that any changes to the <b>DropTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.PivotTolerance">
            <summary>
            Gets or sets the pivot tolerance which indicates at what level pivoting will
            take place. The standard value is 0.0 which means pivoting will never take place.
            </summary>
            <remarks>
            <para>
            The pivot tolerance is used to calculate if pivoting is necessary. Pivoting
            will take place if any of the values in a row is bigger than the
            diagonal value of that row divided by the pivot tolerance, i.e. pivoting
            will take place if <b>row(i,j) > row(i,i) / PivotTolerance</b> for
            any <b>j</b> that is not equal to <b>i</b>.
            </para>
            <para>
            Note that any changes to the <b>PivotTolerance</b> after creating the preconditioner
            will invalidate the created preconditioner and will require a re-initialization of
            the preconditioner.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a negative value is provided.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.UpperTriangle">
            <summary>
            Returns the upper triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the upper triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.LowerTriangle">
            <summary>
            Returns the lower triagonal matrix that was created during the LU decomposition.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>A new matrix containing the lower triagonal elements.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.Pivots">
            <summary>
            Returns the pivot array. This array is not needed for normal use because
            the preconditioner will return the solution vector values in the proper order.
            </summary>
            <remarks>
            This method is used for debugging purposes only and should normally not be used.
            </remarks>
            <returns>The pivot array.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">
            The <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/> upon which this preconditioner is based. Note that the
            method takes a general matrix type. However internally the data is stored
            as a sparse matrix. Therefore it is not recommended to pass a dense matrix.
            </param>
            <exception cref="T:System.ArgumentNullException"> If <paramref name="matrix"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.PivotRow(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Pivot elements in the <paramref name="row"/> according to internal pivot array
            </summary>
            <param name="row">Row <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> to pivot in</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.PivotMapFound(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32)">
            <summary>
            Was pivoting already performed
            </summary>
            <param name="knownPivots">Pivots already done</param>
            <param name="currentItem">Current item to pivot</param>
            <returns><c>true</c> if performed, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.SwapColumns(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},System.Int32,System.Int32)">
            <summary>
            Swap columns in the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>.</param>
            <param name="firstColumn">First column index to swap</param>
            <param name="secondColumn">Second column index to swap</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.FindLargestItems(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Sort vector descending, not changing vector but placing sorted indices to <paramref name="sortedIndices"/>
            </summary>
            <param name="lowerBound">Start sort form</param>
            <param name="upperBound">Sort till upper bound</param>
            <param name="sortedIndices">Array with sorted vector indices</param>
            <param name="values">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="rhs">The right hand side vector.</param>
            <param name="lhs">The left hand side vector. Also known as the result vector.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner.Pivot(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Pivot elements in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> according to internal pivot array
            </summary>
            <param name="vector">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="result">Result <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> after pivoting.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPElementSorter">
            <summary>
            An element sort algorithm for the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPPreconditioner"/> class.
            </summary>
            <remarks>
            This sort algorithm is used to sort the columns in a sparse matrix based on
            the value of the element on the diagonal of the matrix.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPElementSorter.SortDoubleIndicesDecreasing(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPElementSorter.HeapSortDoublesIndices(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Sorts the elements of the <paramref name="values"/> vector in decreasing
            fashion using heap sort algorithm. The vector itself is not affected.
            </summary>
            <param name="lowerBound">The starting index.</param>
            <param name="upperBound">The stopping index.</param>
            <param name="sortedIndices">An array that will contain the sorted indices once the algorithm finishes.</param>
            <param name="values">The <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/> that contains the values that need to be sorted.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPElementSorter.BuildDoubleIndexHeap(System.Int32,System.Int32,System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Build heap for double indices
            </summary>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
            <param name="sortedIndices">Indices of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPElementSorter.SiftDoubleIndices(System.Int32[],MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},System.Int32,System.Int32)">
            <summary>
            Sift double indices
            </summary>
            <param name="sortedIndices">Indices of <paramref name="values"/></param>
            <param name="values">Target <see cref="T:MathNet.Numerics.LinearAlgebra.Vector`1"/></param>
            <param name="begin">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPElementSorter.SortIntegersDecreasing(System.Int32[])">
            <summary>
            Sorts the given integers in a decreasing fashion.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPElementSorter.HeapSortIntegers(System.Int32[],System.Int32)">
            <summary>
            Sort the given integers in a decreasing fashion using heapsort algorithm
            </summary>
            <param name="values">Array of values to sort</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPElementSorter.BuildHeap(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Build heap
            </summary>
            <param name="values">Target values array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPElementSorter.Sift(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Sift values
            </summary>
            <param name="values">Target value array</param>
            <param name="start">Root position</param>
            <param name="count">Length of <paramref name="values"/></param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.ILUTPElementSorter.Exchange(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Exchange values in array
            </summary>
            <param name="values">Target values array</param>
            <param name="first">First value to exchange</param>
            <param name="second">Second value to exchange</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MILU0Preconditioner">
            <summary>
            A simple milu(0) preconditioner.
            </summary>
            <remarks>
            Original Fortran code by Yousef Saad (07 January 2004)
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MILU0Preconditioner.#ctor(System.Boolean)">
            <param name="modified">Use modified or standard ILU(0)</param>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MILU0Preconditioner.UseModified">
            <summary>
            Gets or sets a value indicating whether to use modified or standard ILU(0).
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MILU0Preconditioner.IsInitialized">
            <summary>
            Gets a value indicating whether the preconditioner is initialized.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MILU0Preconditioner.Initialize(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Initializes the preconditioner and loads the internal data structures.
            </summary>
            <param name="matrix">The matrix upon which the preconditioner is based. </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="matrix"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="matrix"/> is not a square or is not an
            instance of SparseCompressedRowMatrixStorage.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MILU0Preconditioner.Approximate(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Approximates the solution to the matrix equation <b>Ax = b</b>.
            </summary>
            <param name="input">The right hand side vector b.</param>
            <param name="result">The left hand side vector x.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MILU0Preconditioner.Compute(System.Int32,System.Numerics.Complex[],System.Int32[],System.Int32[],System.Numerics.Complex[],System.Int32[],System.Int32[],System.Boolean)">
            <summary>
            MILU0 is a simple milu(0) preconditioner.
            </summary>
            <param name="n">Order of the matrix.</param>
            <param name="a">Matrix values in CSR format (input).</param>
            <param name="ja">Column indices (input).</param>
            <param name="ia">Row pointers (input).</param>
            <param name="alu">Matrix values in MSR format (output).</param>
            <param name="jlu">Row pointers and column indices (output).</param>
            <param name="ju">Pointer to diagonal elements (output).</param>
            <param name="modified">True if the modified/MILU algorithm should be used (recommended)</param>
            <returns>Returns 0 on success or k > 0 if a zero pivot was encountered at step k.</returns>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab">
            <summary>
            A Multiple-Lanczos Bi-Conjugate Gradient stabilized iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The Multiple-Lanczos Bi-Conjugate Gradient stabilized (ML(k)-BiCGStab) solver is an 'improvement'
            of the standard BiCgStab solver.
            </para>
            <para>
            The algorithm was taken from: <br/>
            ML(k)BiCGSTAB: A BiCGSTAB variant based on multiple Lanczos starting vectors
            <br/>
            Man-Chung Yeung and Tony F. Chan
            <br/>
            SIAM Journal of Scientific Computing
            <br/>
            Volume 21, Number 4, pp. 1263 - 1290
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab.DefaultNumberOfStartingVectors">
            <summary>
            The default number of starting vectors.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab._startingVectors">
            <summary>
            The collection of starting vectors which are used as the basis for the Krylov sub-space.
            </summary>
        </member>
        <member name="F:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab._numberOfStartingVectors">
            <summary>
            The number of starting vectors used by the algorithm
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab.NumberOfStartingVectors">
            <summary>
            Gets or sets the number of starting vectors.
            </summary>
            <remarks>
            Must be larger than 1 and smaller than the number of variables in the matrix that
            for which this solver will be used.
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab.ResetNumberOfStartingVectors">
            <summary>
            Resets the number of starting vectors to the default value.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab.StartingVectors">
            <summary>
            Gets or sets a series of orthonormal vectors which will be used as basis for the
            Krylov sub-space.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab.NumberOfStartingVectorsToCreate(System.Int32,System.Int32)">
            <summary>
            Gets the number of starting vectors to create
            </summary>
            <param name="maximumNumberOfStartingVectors">Maximum number</param>
            <param name="numberOfVariables">Number of variables</param>
            <returns>Number of starting vectors to create</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab.CreateStartingVectors(System.Int32,System.Int32)">
            <summary>
            Returns an array of starting vectors.
            </summary>
            <param name="maximumNumberOfStartingVectors">The maximum number of starting vectors that should be created.</param>
            <param name="numberOfVariables">The number of variables.</param>
            <returns>
             An array with starting vectors. The array will never be larger than the
             <paramref name="maximumNumberOfStartingVectors"/> but it may be smaller if
             the <paramref name="numberOfVariables"/> is smaller than
             the <paramref name="maximumNumberOfStartingVectors"/>.
            </returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab.CreateVectorArray(System.Int32,System.Int32)">
            <summary>
            Create random vectors array
            </summary>
            <param name="arraySize">Number of vectors</param>
            <param name="vectorSize">Size of each vector</param>
            <returns>Array of random vectors</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Source <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/>A.</param>
            <param name="residual">Residual <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> data.</param>
            <param name="x">x <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> data.</param>
            <param name="b">b <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> data.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.MlkBiCgStab.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Numerics.Complex})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.Solvers.TFQMR">
            <summary>
            A Transpose Free Quasi-Minimal Residual (TFQMR) iterative matrix solver.
            </summary>
            <remarks>
            <para>
            The TFQMR algorithm was taken from: <br/>
            Iterative methods for sparse linear systems.
            <br/>
            Yousef Saad
            <br/>
            Algorithm is described in Chapter 7, section 7.4.3, page 219
            </para>
            <para>
            The example code below provides an indication of the possible use of the
            solver.
            </para>
            </remarks>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.TFQMR.CalculateTrueResidual(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Calculates the <c>true</c> residual of the matrix equation Ax = b according to: residual = b - Ax
            </summary>
            <param name="matrix">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Matrix"/> A.</param>
            <param name="residual">Residual values in <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/>.</param>
            <param name="x">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> x.</param>
            <param name="b">Instance of the <see cref="T:MathNet.Numerics.LinearAlgebra.Complex.Vector"/> b.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.TFQMR.IsEven(System.Int32)">
            <summary>
            Is <paramref name="number"/> even?
            </summary>
            <param name="number">Number to check</param>
            <returns><c>true</c> if <paramref name="number"/> even, otherwise <c>false</c></returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.Solvers.TFQMR.Solve(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Solvers.Iterator{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Solvers.IPreconditioner{System.Numerics.Complex})">
            <summary>
            Solves the matrix equation Ax = b, where A is the coefficient matrix, b is the
            solution vector and x is the unknown vector.
            </summary>
            <param name="matrix">The coefficient matrix, <c>A</c>.</param>
            <param name="input">The solution vector, <c>b</c></param>
            <param name="result">The result vector, <c>x</c></param>
            <param name="iterator">The iterator to use to control when to stop iterating.</param>
            <param name="preconditioner">The preconditioner to use for approximations.</param>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix">
            <summary>
            A Matrix with sparse storage, intended for very large matrices where most of the cells are zero.
            The underlying storage scheme is 3-array compressed-sparse-row (CSR) Format.
            <a href="http://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_row_.28CSR_or_CRS.29">Wikipedia - CSR</a>.
            </summary>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the matrix.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseCompressedRowMatrixStorage{System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix straight from an initialized matrix storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.#ctor(System.Int32)">
            <summary>
            Create a new square sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the order is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new sparse matrix with the given number of rows and columns.
            All cells of the matrix will be initialized to zero.
            Zero-length matrices are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If the row or column count is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix as a copy of the given other matrix.
            This new matrix will be independent from the other matrix.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfArray(System.Numerics.Complex[0:,0:])">
            <summary>
            Create a new sparse matrix as a copy of the given two-dimensional array.
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfIndexed(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Int32,System.Numerics.Complex}})">
            <summary>
            Create a new sparse matrix as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfRowMajor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable.
            The enumerable is assumed to be in row-major order (row by row).
            This new matrix will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfColumnMajor(System.Int32,System.Int32,System.Collections.Generic.IList{System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix with the given number of rows and columns as a copy of the given array.
            The array is assumed to be in column-major order (column by column).
            This new matrix will be independent from the provided array.
            A new memory block will be allocated for storing the matrix.
            </summary>
            <seealso href="http://en.wikipedia.org/wiki/Row-major_order"/>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfColumns(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfColumns(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable columns.
            Each enumerable in the master enumerable specifies a column.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfColumnArrays(System.Numerics.Complex[][])">
            <summary>
            Create a new sparse matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfColumnArrays(System.Collections.Generic.IEnumerable{System.Numerics.Complex[]})">
            <summary>
            Create a new sparse matrix as a copy of the given column arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfColumnVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex}[])">
            <summary>
            Create a new sparse matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfColumnVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex}})">
            <summary>
            Create a new sparse matrix as a copy of the given column vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfRows(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfRows(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Numerics.Complex}})">
            <summary>
            Create a new sparse matrix as a copy of the given enumerable of enumerable rows.
            Each enumerable in the master enumerable specifies a row.
            This new matrix will be independent from the enumerables.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfRowArrays(System.Numerics.Complex[][])">
            <summary>
            Create a new sparse matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfRowArrays(System.Collections.Generic.IEnumerable{System.Numerics.Complex[]})">
            <summary>
            Create a new sparse matrix as a copy of the given row arrays.
            This new matrix will be independent from the arrays.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfRowVectors(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex}[])">
            <summary>
            Create a new sparse matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfRowVectors(System.Collections.Generic.IEnumerable{MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex}})">
            <summary>
            Create a new sparse matrix as a copy of the given row vectors.
            This new matrix will be independent from the vectors.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfDiagonalVector(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfDiagonalVector(System.Int32,System.Int32,MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given vector.
            This new matrix will be independent from the vector.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfDiagonalArray(System.Numerics.Complex[])">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.OfDiagonalArray(System.Int32,System.Int32,System.Numerics.Complex[])">
            <summary>
            Create a new sparse matrix with the diagonal as a copy of the given array.
            This new matrix will be independent from the array.
            A new memory block will be allocated for storing the matrix.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.Create(System.Int32,System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new sparse matrix and initialize each value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.Create(System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new sparse matrix and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new diagonal sparse matrix and initialize each diagonal value to the same provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.CreateDiagonal(System.Int32,System.Int32,System.Func{System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new diagonal sparse matrix and initialize each diagonal value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.CreateIdentity(System.Int32)">
            <summary>
            Create a new square sparse identity matrix where each diagonal value is set to One.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.LowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.LowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.LowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.UpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.UpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.UpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyLowerTriangle">
            <summary>
            Returns a new matrix containing the lower triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The lower triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyLowerTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyLowerTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly lower triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyUpperTriangle">
            <summary>
            Returns a new matrix containing the upper triangle of this matrix. The new matrix
            does not contain the diagonal elements of this matrix.
            </summary>
            <returns>The upper triangle of this matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyUpperTriangle(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="result"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the result matrix's dimensions are not the same as this matrix.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.StrictlyUpperTriangleImpl(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Puts the strictly upper triangle of this matrix into the result matrix.
            </summary>
            <param name="result">Where to store the lower triangle.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoNegate(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Negate each element of this matrix and place the results into the result matrix.
            </summary>
            <param name="result">The result of the negation.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.InfinityNorm">
            <summary>Calculates the induced infinity norm of this matrix.</summary>
            <returns>The maximum absolute row sum of the matrix.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.FrobeniusNorm">
            <summary>Calculates the entry-wise Frobenius norm of this matrix.</summary>
            <returns>The square root of the sum of the squared values.</returns>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoAdd(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="other">The matrix to add to this matrix.</param>
            <param name="result">The matrix to store the result of the addition.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoSubtract(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="other">The matrix to subtract to this matrix.</param>
            <param name="result">The matrix to store the result of subtraction.</param>
            <exception cref="T:System.ArgumentNullException">If the other matrix is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the two matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoMultiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies each element of the matrix by a scalar and places results into the result matrix.
            </summary>
            <param name="scalar">The scalar to multiply the matrix with.</param>
            <param name="result">The matrix to store the result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoMultiply(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with a vector and places the results into the result vector.
            </summary>
            <param name="rightSide">The vector to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoTransposeAndMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Multiplies this matrix with transpose of another matrix and places the results into the result matrix.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <param name="result">The result of the multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoPointwiseMultiply(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into the result matrix.
            </summary>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <param name="result">The matrix to store the result of the pointwise multiplication.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.DoPointwiseDivide(MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex},MathNet.Numerics.LinearAlgebra.Matrix{System.Numerics.Complex})">
            <summary>
            Pointwise divide this matrix by another matrix and stores the result into the result matrix.
            </summary>
            <param name="divisor">The matrix to pointwise divide this one by.</param>
            <param name="result">The matrix to store the result of the pointwise division.</param>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.IsSymmetric">
            <summary>
            Evaluates whether this matrix is symmetric.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.IsHermitian">
            <summary>
            Evaluates whether this matrix is Hermitian (conjugate symmetric).
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Addition(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Adds two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to add.</param>
            <param name="rightSide">The right matrix to add.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_UnaryPlus(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Returns a <strong>Matrix</strong> containing the same values of <paramref name="rightSide"/>.
            </summary>
            <param name="rightSide">The matrix to get the values from.</param>
            <returns>A matrix containing a the same values as <paramref name="rightSide"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Subtraction(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Subtracts two matrices together and returns the results.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to subtract.</param>
            <param name="rightSide">The right matrix to subtract.</param>
            <returns>The result of the addition.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="leftSide"/> and <paramref name="rightSide"/> don't have the same dimensions.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_UnaryNegation(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Negates each element of the matrix.
            </summary>
            <param name="rightSide">The matrix to negate.</param>
            <returns>A matrix containing the negated values.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,System.Numerics.Complex)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Multiply(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Multiplies two matrices.
            </summary>
            <remarks>This operator will allocate new memory for the result. It will
            choose the representation of either <paramref name="leftSide"/> or <paramref name="rightSide"/> depending on which
            is denser.</remarks>
            <param name="leftSide">The left matrix to multiply.</param>
            <param name="rightSide">The right matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
            <exception cref="T:System.ArgumentException">If the dimensions of <paramref name="leftSide"/> or <paramref name="rightSide"/> don't conform.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,MathNet.Numerics.LinearAlgebra.Complex.SparseVector)">
            <summary>
            Multiplies a <strong>Matrix</strong> and a Vector.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The vector to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Multiply(MathNet.Numerics.LinearAlgebra.Complex.SparseVector,MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix)">
            <summary>
            Multiplies a Vector and a <strong>Matrix</strong>.
            </summary>
            <param name="leftSide">The vector to multiply.</param>
            <param name="rightSide">The matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> or <paramref name="rightSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix.op_Modulus(MathNet.Numerics.LinearAlgebra.Complex.SparseMatrix,System.Numerics.Complex)">
            <summary>
            Multiplies a <strong>Matrix</strong> by a constant and returns the result.
            </summary>
            <param name="leftSide">The matrix to multiply.</param>
            <param name="rightSide">The constant to multiply the matrix by.</param>
            <returns>The result of the multiplication.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="leftSide"/> is <see langword="null" />.</exception>
        </member>
        <member name="T:MathNet.Numerics.LinearAlgebra.Complex.SparseVector">
            <summary>
            A vector with sparse storage, intended for very large vectors where most of the cells are zero.
            </summary>
            <remarks>The sparse vector is not thread safe.</remarks>
        </member>
        <member name="P:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.NonZerosCount">
            <summary>
            Gets the number of non zero elements in the vector.
            </summary>
            <value>The number of non zero elements.</value>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.#ctor(MathNet.Numerics.LinearAlgebra.Storage.SparseVectorStorage{System.Numerics.Complex})">
            <summary>
            Create a new sparse vector straight from an initialized vector storage instance.
            The storage is used directly without copying.
            Intended for advanced scenarios where you're working directly with
            storage for performance or interop reasons.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.#ctor(System.Int32)">
            <summary>
            Create a new sparse vector with the given length.
            All cells of the vector will be initialized to zero.
            Zero-length vectors are not supported.
            </summary>
            <exception cref="T:System.ArgumentException">If length is less than one.</exception>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.OfVector(MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Create a new sparse vector as a copy of the given other vector.
            This new vector will be independent from the other vector.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.OfEnumerable(System.Collections.Generic.IEnumerable{System.Numerics.Complex})">
            <summary>
            Create a new sparse vector as a copy of the given enumerable.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.OfIndexedEnumerable(System.Int32,System.Collections.Generic.IEnumerable{System.Tuple{System.Int32,System.Numerics.Complex}})">
            <summary>
            Create a new sparse vector as a copy of the given indexed enumerable.
            Keys must be provided at most once, zero is assumed if a key is omitted.
            This new vector will be independent from the enumerable.
            A new memory block will be allocated for storing the vector.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.Create(System.Int32,System.Numerics.Complex)">
            <summary>
            Create a new sparse vector and initialize each value using the provided value.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.Create(System.Int32,System.Func{System.Int32,System.Numerics.Complex})">
            <summary>
            Create a new sparse vector and initialize each value using the provided init function.
            </summary>
        </member>
        <member name="M:MathNet.Numerics.LinearAlgebra.Complex.SparseVector.DoAdd(System.Numerics.Complex,MathNet.Numerics.LinearAlgebra.Vector{System.Numerics.Complex})">
            <summary>
            Adds a scalar to each element of the vector and stores the result in the result vector.
            Warning, the new 'sparse vector' with a non-zero scalar added to it will be a 100% filled
            sparse vector and very inefficient. Would be better to work with a dense vector instead.
            </summary>
            <param name="scalar">
            The scalar to add.
            </param>
         